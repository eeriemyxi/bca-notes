{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site will contain my personal notes for the college degree that I'm pursuing.</p>"},{"location":"sem1/aec-eng/audition/","title":"Mahim Bora: Audition","text":"<p>PDF Page: 10-17</p>"},{"location":"sem1/aec-eng/audition/#questions","title":"Questions","text":"<ol> <li>What festival does Basanta bring?</li> <li>Which bird\u2019s cooing is mentioned as melodious in the beginning?</li> <li>What was Prafulla\u2019s greatest ambition?</li> <li>Where did Prafulla go to pursue his ambition?</li> <li>What job did Dipak have at the radio station?</li> <li>Why was it difficult for Dipak to get Prafulla a role?</li> <li>What was Prafulla\u2019s main physical drawback according to the narrator?</li> <li>What oath did Prafulla take after the incident at the well?</li> <li>What job did Prafulla take after completing his BA?</li> <li>Why did the radio station avoid inviting artistes from outside Guwahati?</li> <li>How did Prafulla feel about payment for his role?</li> <li>Why did Prafulla\u2019s mother criticize his singing?</li> <li>How did the neighbor react to Prafulla\u2019s singing?</li> <li>How did the girls fetching water react after overhearing Prafulla\u2019s mother?</li> <li>Why did Prafulla not have any romantic relationships?</li> <li>What was the \u201cBhishma Pratigya\u201d he took?</li> <li>What did people say about men singing after marriage?</li> <li>Why did Dipak compare standing before a microphone to standing before a stuffed tiger?</li> <li>How did Prafulla feel when he heard the name \u201cBimbadhara\u201d?</li> <li>Why couldn\u2019t Dipak stay with Prafulla during the audition?</li> <li>What time was Prafulla\u2019s audition scheduled?</li> <li>How early did Prafulla arrive at the radio station?</li> <li>What made Prafulla fear the audition was already over?</li> <li>How did Miss Bimbadhara react when she saw Prafulla waiting?</li> <li>What object was the man with \u201cBhima\u2019s mace\u201d actually carrying?</li> <li>What was Prafulla told to do when the red light came on in the studio?</li> <li>What was Prafulla\u2019s initial reaction when asked to sing?</li> <li>What songs did Prafulla consider singing?</li> <li>What happened when Prafulla began to sing the Bihu song?</li> <li>What did the assistant station director mistake his singing for?</li> <li>How long would Prafulla have to wait for his next audition?</li> <li>What was Dipak\u2019s reaction to hearing Prafulla failed?</li> <li>Why was Miss Bimbadhara shocked to learn Prafulla was Dipak\u2019s friend?</li> <li>Who was actually in charge of the drama audition?</li> <li>What type of audition did Prafulla unintentionally appear for?</li> <li>How many candidates had Miss Bimbadhara auditioned before Prafulla that day?</li> <li>What was Miss Bimbadhara worried about after Dipak\u2019s complaint?</li> <li>What did Dipak demand she do to make amends?</li> <li>What important vow did Miss Bimbadhara unintentionally make Prafulla break?</li> <li>What extreme possibility did Dipak mention could have happened because of this incident?</li> <li>What do you think this story suggests about bureaucracy in creative industries?</li> <li>How does Prafulla\u2019s determination contrast with his actual abilities?</li> <li>Why do you think Dipak still tried to help Prafulla despite knowing the odds?</li> <li>How does humor play a role in this story?</li> <li>How does the author use exaggeration in describing Prafulla\u2019s feelings?</li> <li>What does the story imply about appearances versus reality in radio performance?</li> <li>How does Prafulla\u2019s childhood experience shape his adult life?</li> <li>What role does misunderstanding play in the climax of the story?</li> <li>How might the ending have been different if Dipak had stayed with Prafulla?</li> <li>What message or moral can readers take from Prafulla\u2019s experience?</li> </ol>"},{"location":"sem1/aec-eng/audition/#answers","title":"Answers","text":"<ol> <li>Bohag Bihu.</li> <li>The kuli-ketaki.</li> <li>To give a talk on the radio or get a role in a play.</li> <li>Guwahati.</li> <li>A radio announcer.</li> <li>Dipak was new, had a part-time job, and auditions were mostly for show.</li> <li>His voice.</li> <li>That he would never sing again.</li> <li>A temporary teacher in a village school.</li> <li>To avoid paying for their travel and lodging (stay).</li> <li>He did not want any payment and was willing to pay them for a role.</li> <li>Because his voice was terrible and drove her crazy.</li> <li>She defended him, saying a man's voice should be deep (sonorous).</li> <li>They looked at him and laughed (giggled).</li> <li>He was not attractive, was an average student, and couldn't join cultural functions.</li> <li>That he would never sing again.</li> <li>That it is the bride's first test of the groom.</li> <li>To show that the microphone is harmless and not scary.</li> <li>He clutched his heart and thought it was a dangerous name.</li> <li>It was against the rules and he was busy in the announcing booth.</li> <li>Three in the afternoon.</li> <li>Half an hour early.</li> <li>He saw other people returning from the audition.</li> <li>She seemed tired (strained voice) but told him to come inside.</li> <li>A musical instrument.</li> <li>To sing.</li> <li>He was confused and asked, \"Sing? What will I sing?\"</li> <li>A Hindi song (Mere dil ne pukara aaja) and a Bihu song.</li> <li>Miss Bimbadhara fell off her chair laughing and the engineer turned off the switch.</li> <li>A motorcycle.</li> <li>Three months.</li> <li>He was furious (very angry).</li> <li>Because she had just failed him and laughed at him.</li> <li>Mr Das.</li> <li>A singing audition.</li> <li>Around fifteen.</li> <li>She was worried about losing her job.</li> <li>To pass him, give him a part in a drama, and ask for forgiveness.</li> <li>His vow (Bhishma Pratigya) to never sing again.</li> <li>That Prafulla might have committed suicide.</li> <li>It suggests they are disorganized, unfair, and rely on connections rather than talent.</li> <li>He is very determined to be on the radio, but he has a terrible voice.</li> <li>Because he was a very close friend and felt sorry for Prafulla.</li> <li>It uses Prafulla's terrible voice and the reactions to it (like the motorcycle sound) to make the situation funny.</li> <li>By describing his voice spreading over the universe or him wanting to live in a well.</li> <li>It implies that on radio, how you look or who you are doesn't matter, only the sound.</li> <li>The embarrassment at the well made him take a serious vow (Bhishma Pratigya) never to sing again.</li> <li>It causes the main problem; Prafulla went to the wrong audition (singing) by mistake.</li> <li>Dipak would have realized it was the wrong audition and taken Prafulla to the correct one.</li> <li>That small misunderstandings and poor organization can lead to big, embarrassing failures.</li> </ol>"},{"location":"sem1/aec-eng/no-second-troy/","title":"W. B. Yeats: No Second Troy","text":"Was there another Troy for her to burn? <ul> <li>Why should I blame her that she fill my days</li> <li>With misery, or that she would of late</li> <li>Have taught to ignorant men most violent ways,</li> <li>Or hurled the little streets upon the great,</li> <li>Had they but courage equal to desire?</li> <li>What could have made her peaceful with a mind</li> <li>That nobleness made simple as a fire,</li> <li>With beauty like a tightened bow, a kind</li> <li>That is not natural in an age like this,</li> <li>Being high and solitary and most stern?</li> <li>Why, what could she have done, being what she is?</li> <li>Was there another Troy for her to burn?</li> </ul>"},{"location":"sem1/aec-eng/no-second-troy/#summary","title":"Summary","text":"<p>The speaker starts by asking why he should blame a certain woman for making him personally miserable. He also asks why he should blame her for encouraging poor, uneducated men to use violence in a political uprising, essentially turning the poor against the rich and powerful. He notes that the uprising failed only because the men's courage did not match their desire for change.</p> <p>The speaker then answers his own question. He says it was impossible for her to be peaceful because of her personality. He describes her mind as being noble but also intense and destructive, like a fire. He describes her beauty as being tense and dangerous, like a tightly pulled bow. He feels that this kind of serious, intense, and solitary person is old-fashioned and does not belong in the modern world. e He concludes that, given her nature, she had no other choice. He compares her to Helen of Troy, a famous beauty from mythology who caused the destruction of the great city of Troy. The speaker implies this woman has the same epic, destructive quality. Since there was no ancient, legendary city like Troy for her to destroy in modern times, she had to cause this smaller, political conflict instead. It was simply her destiny to cause destruction.</p>"},{"location":"sem1/aec-eng/no-second-troy/#questions","title":"Questions","text":"<ol> <li>Who is the author of the poem \"No Second Troy\"?</li> <li>Who is the woman, the \"her,\" that the poem is believed to be about?</li> <li>What specific actions does the poet consider blaming the woman for in the first five lines?</li> <li>Explain the meaning of the line \"Or hurled the little streets upon the great.\" What historical context does this refer to?</li> <li>What does the poet mean when he says the woman \"taught to ignorant men most violent ways\"?</li> <li>According to the poet, what stopped these \"ignorant men\" from causing even more destruction?</li> <li>Identify and explain the simile used to describe the woman's mind in the line \"nobleness made simple as a fire.\"</li> <li>Identify and explain the simile used to describe the woman's beauty. What does \"a tightened bow\" suggest?</li> <li>What three adjectives does the poet use to describe the woman's character in the line \"Being high and solitary and most stern\"?</li> <li>Why does the poet claim her kind is \"not natural in an age like this\"?</li> <li>What is the central classical allusion in the poem, and how does it relate to the woman being described?</li> <li>Who was Helen of Troy, and what is her significance in this poem?</li> <li>What is the function of the rhetorical questions used throughout the poem?</li> <li>How does the poet's tone towards the woman shift, or what complex mix of feelings does he express?</li> <li>In what way does the poet suggest the woman is 'blameless' or acting according to her nature?</li> <li>Explain the poem's final question: \"Was there another Troy for her to burn?\" What does it imply about the woman and the modern world?</li> <li>What is the form and rhyme scheme of the poem?</li> <li>How does the poem explore the theme of destructive beauty?</li> <li>How does the poem contrast the 'heroic' or 'epic' past with the 'modern' present?</li> <li>What does the poem suggest about the relationship between personal desire and political action?</li> <li>Analyze the poet's own feelings. Is he simply angry, or is there also a sense of awe or resignation?</li> <li>What does the poem imply about the woman's potential?</li> <li>What \"misery\" might the poet be referring to in the second line?</li> <li>Discuss the poet's perspective on the \"ignorant men.\" How does he seem to view them?</li> <li>Ultimately, what is the poet's final judgment or conclusion about the woman?</li> </ol>"},{"location":"sem1/aec-eng/no-second-troy/#answers","title":"Answers","text":"<ol> <li>W. B. Yeats.</li> <li>Maud Gonne.</li> <li>Making him miserable and teaching violent ways to ignorant men.</li> <li>She encouraged poor people (little streets) to fight the powerful (the great), referencing Irish nationalism.</li> <li>She inspired common people to use violence for their political goals.</li> <li>Their courage was not equal to their desire (they were not brave enough).</li> <li>Her mind is compared to a fire, meaning it is naturally noble, intense, and destructive.</li> <li>Her beauty is compared to a tightened bow, suggesting it is tense, powerful, and dangerous.</li> <li>High, solitary, and most stern.</li> <li>He feels her intense, heroic personality belongs to an ancient, epic time, not the modern world.</li> <li>The reference to Troy (and Helen of Troy), comparing the woman's destructive power to Helen's.</li> <li>In Greek myth, she was the most beautiful woman, and her kidnapping caused the Trojan War and the burning of Troy.</li> <li>They show the poet thinking through the problem and realizing he cannot blame her.</li> <li>He feels a mix of personal pain (misery) and admiration (awe) for her powerful nature.</li> <li>He says she is just \"being what she is\" and her fiery nature cannot be peaceful.</li> <li>It means her capacity for destruction is too large for the modern world; there is no target great enough for her.</li> <li>It is one 12-line stanza with an ABAB CDCD EFEF rhyme scheme.</li> <li>It links her beauty (\"tightened bow\") and mind (\"fire\") directly to causing misery and violence.</li> <li>It presents her as a heroic, epic figure (like Helen) who is wasted in the less grand modern age.</li> <li>It shows how one person's powerful personality and beliefs can inspire violent political action in others.</li> <li>He feels more resignation and awe at her power than simple anger.</li> <li>It implies she has the powerful, destructive potential of a figure from an epic myth.</li> <li>He is likely referring to the personal heartbreak and sadness she caused him by rejecting his love.</li> <li>He seems to see them as simple followers who were inspired by her but lacked real courage.</li> <li>He concludes that she cannot be blamed because she is simply acting according to her unique, powerful, and fiery nature.</li> </ol>"},{"location":"sem1/aec-eng/photograph-of-me/","title":"Margaret Atwood: This is a Photograph of Me","text":"<ul> <li>It was taken some time ago. At first it seems to be a smeared print: blurred lines and grey flecks blended with the paper;</li> <li>then, as you scan it, you see in the left-hand corner a thing that is like a branch: part of a tree (balsam or spruce) emerging and, to the right, halfway up what ought to be a gentle slope, a small frame house.</li> <li>In the background there is a lake, and beyond that, some low hills.</li> <li>(The photograph was taken the day after I drowned.</li> <li>I am in the lake, in the centre of the picture, just under the surface.</li> <li>It is difficult to say where precisely, or to say how large or small I am: the effect of water on light is a distortion</li> <li>but if you look long enough, eventually you will be able to see me.)</li> </ul>"},{"location":"sem1/aec-eng/photograph-of-me/#summary","title":"Summary","text":"<p>The poem describes an old, blurry, and faded photograph. At first glance, the picture seems to be just a smeared, grey landscape. But as you study it, you start to see details: a tree branch on one side, a small house on a slope, and a lake with low hills behind it.</p> <p>The speaker of the poem then reveals a shocking fact: the photo was taken the day after she drowned. The speaker is actually the main subject of the picture, but she is hidden. She is in the lake, in the very center, lying just under the surface.</p> <p>She explains that it is difficult to see her exact location or size because the water distorts her image, just as water makes things look wavy or bent. The poem suggests that the speaker is an unseen or ignored presence. What looks like a simple, empty landscape is actually a record of her death and her hidden body.</p> <p>The poem ends by speaking directly to the viewer. It says that if you look at the photo long enough and with real effort, you will eventually be able to see her, implying that seeing the truth requires time and careful attention.</p>"},{"location":"sem1/aec-eng/photograph-of-me/#questions","title":"Questions","text":"<ol> <li>What is the speaker's initial description of the photograph's quality?</li> <li>What are the first distinct objects the speaker points out as the viewer's eyes adjust to the photo?</li> <li>What natural landscape features are described as being in the background of the photograph?</li> <li>When does the speaker reveal the photograph was taken?</li> <li>What shocking personal event does the speaker connect to the timing of the photograph?</li> <li>Where in the photograph does the speaker claim to be located?</li> <li>Why, according to the speaker, is it difficult to see her \"precisely\"?</li> <li>What is the \"distortion\" mentioned in the poem, and what is its literal cause?</li> <li>What condition does the speaker give for the viewer to \"eventually\" be able to see her?</li> <li>Analyze the shift in tone that occurs at the parenthetical stanza (lines 16-27).</li> <li>Discuss the significance of the photograph being \"smeared\" and \"blurred.\" What could this symbolize beyond a poor-quality print?</li> <li>How does the poem challenge the idea of photographs as objective, truthful records of reality?</li> <li>What is the effect of the speaker calmly guiding the viewer through the landscape before revealing the tragedy?</li> <li>Explain the \"effect of water on light\" as a metaphor. What else might be distorted besides the speaker's physical image?</li> <li>Who is the \"you\" the speaker is addressing, and what role does this \"you\" play in the poem's meaning?</li> <li>Explore the theme of visibility versus invisibility as it relates to the speaker.</li> <li>What is the mood of the poem, and how does Atwood's language create it?</li> <li>Why is it significant that the speaker is \"just under the surface\" and not deep at the bottom?</li> <li>How does the poem use the simple description of a landscape to explore deeper themes of death, memory, and hidden truths?</li> <li>Discuss the use of parentheses. Why might the poem's most crucial information be enclosed in them?</li> <li>What might the \"small frame house\" on the slope represent or symbolize in the context of the poem?</li> <li>Analyze the power dynamic between the speaker (who knows the truth) and the viewer (who must search for it).</li> <li>How does the poem relate to the idea of a \"haunting\" or an unseen presence?</li> <li>What might the poem be suggesting about the nature of truth and the effort required to find it?</li> <li>Consider the poem as a commentary on the overlooked or suppressed stories, particularly those of women. How does the speaker's \"drowning\" function in this interpretation?</li> </ol>"},{"location":"sem1/aec-eng/photograph-of-me/#answers","title":"Answers","text":"<ol> <li>It seems to be a smeared print with blurred lines and grey flecks.</li> <li>A tree branch in the left corner and a small frame house on a slope to the right.</li> <li>There is a lake, and beyond that, some low hills.</li> <li>She reveals it was taken the day after she drowned.</li> <li>Her own death by drowning.</li> <li>She is in the lake, in the centre of the picture, just under the surface.</li> <li>Because the effect of water on light causes distortion.</li> <li>The distortion is how her image is bent or unclear, and it is caused by water affecting the light.</li> <li>The viewer must look long enough.</li> <li>The tone shifts from a calm description to a personal, unsettling, and mysterious one.</li> <li>It could mean that the truth is unclear, hidden, or has been faded by time and memory.</li> <li>It shows that a photo can hide the most important truth (a death) instead of revealing it clearly.</li> <li>It creates a sense of shock and makes the final, terrible information more powerful.</li> <li>It can be a metaphor for how emotions, memory, or different perspectives can bend or hide the truth.</li> <li>The \"you\" is the reader, who is given the job of actively searching for the hidden speaker.</li> <li>The speaker is physically present in the photo but is unseen, showing she is invisible or ignored by others.</li> <li>The mood is eerie, haunting, and sad, created by the calm voice describing her own death.</li> <li>It suggests the truth is very close and almost visible, not completely lost or buried deep.</li> <li>It uses the ordinary, peaceful landscape to hide a dark secret, showing that truth is often hidden beneath a normal surface.</li> <li>The parentheses make the information seem like a quiet, secondary thought, which makes the shocking content feel even more unsettling.</li> <li>It could represent normal human life, family, or safety, which is separate from the speaker who is in the lake.</li> <li>The speaker is in a position of power because she knows the secret, while the viewer must work hard to find it.</li> <li>The speaker is like a ghost, present but unseen, speaking from beyond death and asking to be noticed.</li> <li>It suggests that truth is not obvious and requires continuous, patient effort to be seen.</li> <li>The speaker, a woman who is present but invisible, can represent how women's lives, stories, and tragedies are often ignored or hidden by society.</li> </ol>"},{"location":"sem1/aec-eng/so-many-oaks/","title":"Sujata Bhatt: So Many Oaks","text":"Standing among ancient trees, where timeless nature witnesses the stories of our world <ul> <li>In this forest we stand among ancient trees.</li> <li>So many oaks. Holy. An evil witch would kill them.</li> <li>The windows of that house are so bright, so clean -</li> <li>Who lives there? A woman who lost five sons in the war.</li> <li>Birds have feathers but mammals have none.</li> <li>A pity because I would really like to fly.</li> <li>Human beings have eyes and ears</li> <li>but some are born blind or deaf.</li> <li>The flowers of a plum tree can be red or white.</li> <li>I have one of each in my garden.</li> <li>My hat is brown. My gloves are brown.</li> <li>A practical colour.</li> </ul>"},{"location":"sem1/aec-eng/so-many-oaks/#summary","title":"Summary","text":"<p>In Sujata Bhatt's \"So Many Oaks,\" the speaker stands in a forest, observing the world's random and often contradictory nature. The poem contrasts the ancient, enduring beauty of oak trees with the sharp, specific pain of human tragedy, such as a woman who lost five sons in the war.</p> <p>The speaker's thoughts jump between the freedom of birds, the reality of human disability, and the simple beauty of flowers. It all concludes with a quiet, grounding observation about the speaker's own brown hat and gloves, calling the color \"practical.\" Ultimately, the poem is a reflection on how profound beauty and deep sorrow exist side-by-side, and how people often cope by focusing on simple, everyday realities.</p>"},{"location":"sem1/aec-eng/so-many-oaks/#questions","title":"Questions","text":"<ol> <li>What is the primary setting of the poem?</li> <li>What specific type of tree is mentioned multiple times?</li> <li>According to the speaker, who would want to kill the trees?</li> <li>How many sons did the woman in the house lose?</li> <li>What characteristic do birds have that mammals lack, which the speaker desires?</li> <li>What colors can the flowers of a plum tree be?</li> <li>What color are the speaker's hat and gloves?</li> <li>What is the significance of the speaker describing the oaks as \"Holy\"?</li> <li>The poem juxtaposes the \"ancient trees\" with a woman who lost her sons in a war. What is the effect of this contrast?</li> <li>What might the \"bright, so clean\" windows of the house symbolize?</li> <li>The poem consists of a series of seemingly disconnected observations. What underlying theme or feeling might connect these different thoughts?</li> <li>How does the simple, declarative statement \"A practical colour\" at the end of the poem affect its overall tone?</li> <li>What does the desire \"to fly\" suggest about the speaker's internal state?</li> <li>The poem moves from a grand, ancient forest to personal items like a hat and gloves. What is the effect of this shift in scale?</li> <li>How does the line \"Human beings have eyes and ears / but some are born blind or deaf\" contribute to the poem's exploration of life's randomness and imperfections?</li> <li>How does Bhatt use juxtaposition to create meaning in the poem? (Provide at least two examples).</li> <li>What is the effect of the poem's free verse structure, which lacks a regular rhyme scheme or meter?</li> <li>Discuss the symbolism of the \"ancient\" oaks in the context of the poem's other images of loss and change.</li> <li>Analyze the poem's tone. Does it remain consistent, or does it shift? Explain your answer.</li> <li>How does the title, \"So Many Oaks,\" relate to the poem's broader themes?</li> <li>The poem balances images of natural beauty with human suffering. What message might the poet be conveying about the relationship between humanity and the natural world?</li> <li>Is the ending of the poem hopeful, resigned, or something else entirely? Justify your interpretation.</li> <li>How does the poem explore the themes of loss, endurance, and observation?</li> <li>The speaker makes several straightforward, almost child-like statements (\"Birds have feathers but mammals have none\"). What role does this simple, observational voice play in the poem?</li> <li>If you had to describe the central conflict or tension in this poem, what would it be?</li> </ol>"},{"location":"sem1/aec-eng/so-many-oaks/#answers","title":"Answers","text":"<ol> <li>The poem is set in a forest.</li> <li>The poem mentions oak trees.</li> <li>The speaker says an \"evil witch\" would kill the trees.</li> <li>The woman in the house lost five sons in the war.</li> <li>Birds have feathers, which the speaker implies would allow her to fly.</li> <li>The flowers of a plum tree can be red or white.</li> <li>The speaker's hat and gloves are brown.</li> <li>Calling the oaks \"Holy\" suggests they are ancient, sacred, and possess an enduring spiritual quality that contrasts with human fragility.</li> <li>The contrast highlights the indifference of timeless nature to specific, acute human suffering. The oaks stand long before and after the war.</li> <li>The \"bright, so clean\" windows could symbolize a brave attempt to maintain normalcy and order in the face of unimaginable grief.</li> <li>The connecting theme is the fragmented and random nature of existence, where profound beauty, deep tragedy, and mundane facts all coexist.</li> <li>It brings the poem to a sudden, quiet, and resigned conclusion, suggesting a retreat from overwhelming emotion into the safety of the mundane.</li> <li>The desire \"to fly\" expresses a yearning for freedom and escape from the limitations and sorrows of human life.</li> <li>The shift from the vast forest to personal items grounds the poem in the individual's small reality, highlighting how one person navigates a world of big, impersonal forces.</li> <li>It adds to the theme that life is inherently imperfect and arbitrary; suffering and limitations are presented as simple facts of existence, just like eye color or the color of flowers.</li> <li>The primary juxtaposition is between the enduring, holy oaks and the tragic, transient life of the woman who lost her sons. Another is between the desire to fly and the practical, earthbound brown gloves.</li> <li>The free verse structure mimics the natural, disjointed flow of human thought and observation, making the poem feel intimate and immediate.</li> <li>The ancient oaks symbolize endurance, stability, and the continuity of the natural world, acting as silent witnesses to the fleeting tragedies of human history.</li> <li>The tone shifts from awe (\"Holy\"), to pathos (the woman's loss), to wistfulness (desire to fly), and finally settles into a flat, pragmatic resignation (\"A practical colour\").</li> <li>The title emphasizes the overwhelming, enduring presence of nature. Despite the poem's focus on human suffering and limitation, the oaks are the dominant, framing reality.</li> <li>The poem suggests that humanity and nature exist on separate planes. Nature is a powerful, indifferent backdrop to the drama of human life, offering no answers to its suffering.</li> <li>The ending is best described as resigned. The turn to practicality is not a solution or a sign of hope, but an acceptance of the need to ground oneself in simple reality to endure.</li> <li>The poem explores loss through the dead sons and disabilities, endurance through the ancient oaks and the grieving mother, and uses observation as the method by which the speaker processes these conflicting realities.</li> <li>The simple, almost child-like voice makes the poem's profound observations feel more direct and powerful. It presents the harsh realities of life as plain, undeniable facts.</li> <li>The central conflict is between the human mind's search for meaning, beauty, and escape, and the stark, often painful or mundane reality it is forced to observe.</li> </ol>"},{"location":"sem1/aec-eng/syllabus/","title":"Syllabus","text":""},{"location":"sem1/aec-eng/syllabus/#unit-1-poetry-25-marks-1-credit","title":"Unit 1: Poetry: 25 Marks (1 Credit)","text":"<ul> <li>W. B. Yeats: No Second Troy</li> <li>Sarojini Naidu: The Palanquin Bearers</li> <li>Sujata Bhatt: So Many Oaks</li> <li>Margaret Atwood: This was a Photograph of Me</li> </ul>"},{"location":"sem1/aec-eng/syllabus/#unit-2-short-fiction-25-marks-1-credit","title":"Unit 2: Short Fiction: 25 Marks (1 Credit)","text":"<ul> <li>Mahim Bora: Audition</li> <li>Bryan MacMahon: The Ring</li> </ul>"},{"location":"sem1/aec-eng/syllabus/#unit-3-non-fiction-25-marks-1-credit","title":"Unit 3: Non-Fiction: 25 Marks (1 Credit)","text":"<ul> <li>R.L. Stevenson: Pan's Pipes</li> <li>Ruskin Bond: Coming Home to Dehra</li> <li>Muhammad Yunus: Towards Creating a Poverty-Free World</li> </ul>"},{"location":"sem1/aec-eng/syllabus/#unit-4-developing-writing-skills-25-marks-1-credit","title":"Unit 4: Developing Writing Skills: 25 Marks (1 Credit)","text":"<ul> <li>How to write book reviews</li> <li>How to file an RTI</li> <li>How to face and take an interview</li> <li>How to write an effective resume</li> </ul>"},{"location":"sem1/aec-eng/syllabus/#read","title":"Read","text":"<p>Digital Book</p>"},{"location":"sem1/aec-eng/the-palanquin-bearers/","title":"Sarojini Naidu: The Palanquin Bearers","text":"Lightly, O lightly we bear her along, she sways like a flower in the wind of our song. <ul> <li>Lightly, O lightly we bear her along,</li> <li>She sways like a flower in the wind of our song;</li> <li>She skims like a bird on the foam of a stream,</li> <li>She floats like a laugh from the lips of a dream.</li> <li>Gaily, O gaily we glide and we sing,</li> <li>We bear her along like a pearl on a string.</li> <li>Softly, O softly we bear her along,</li> <li>She hangs like a star in the dew of our song;</li> <li>She springs like a beam on the brow of the tide,</li> <li>She falls like a tear from the eyes of a bride.</li> <li>Lightly, O lightly we glide and we sing,</li> <li>We bear her along like a pearl on a string.</li> </ul>"},{"location":"sem1/aec-eng/the-palanquin-bearers/#summary","title":"Summary","text":"<p>This poem is about a group of men, known as palanquin bearers, who are carrying a noble bride to her new home. They are singing happily as they walk.</p> <p>The bearers feel that the bride is very light and easy to carry. They say they carry her \"lightly\" and \"softly.\" They are happy and proud of their job, moving smoothly and \"gaily\" as they sing. They feel she is extremely precious and delicate, comparing her to a \"pearl on a string.\"</p> <p>The poem uses many comparisons to describe the bride's gentle movements as they walk. She sways gently like a \"flower in the wind.\" She moves gracefully, like a \"bird\" skimming the top of a stream. She seems ethereal and joyful, like a \"laugh from the lips of a dream.\" She is beautiful and bright, hanging like a \"star\" in the air or springing like a \"beam\" of light on an ocean wave.</p> <p>The poem also captures the mixed emotions of the moment. One comparison describes the bride falling \"like a tear from the eyes of a bride.\" This single line shows that while the occasion is happy, the bride is also experiencing the natural sadness of leaving her childhood home.</p> <p>Overall, the poem paints a picture of a joyful, delicate, and precious moment, celebrating the beauty of the bride and the happiness of the bearers who are carefully carrying her.</p>"},{"location":"sem1/aec-eng/the-palanquin-bearers/#questions","title":"Questions","text":"<ol> <li>Who are the speakers in the poem \"The Palanquin Bearers\"?</li> <li>Who is being carried in the palanquin, and where is she likely going?</li> <li>What is the overall mood of the palanquin bearers? Support your answer with a phrase from the poem.</li> <li>Identify and explain the simile used in the line: \"She sways like a flower in the wind of our song.\"</li> <li>Identify and explain the simile used in the line: \"We bear her along like a pearl on a string.\"</li> <li>What does the comparison to a \"pearl on a string\" tell us about how the bearers view the bride?</li> <li>List two similes from the first stanza and two similes from the second stanza.</li> <li>What is a refrain? Identify the refrain used in this poem.</li> <li>What is the effect of the repetition of words like \"Lightly, O lightly\" and \"Softly, O softly\"?</li> <li>How does the \"song\" of the bearers affect the bride's movement, according to the poem?</li> <li>Explain the meaning of the line: \"She skims like a bird on the foam of a stream.\"</li> <li>Explain the meaning of the line: \"She hangs like a star in the dew of our song.\"</li> <li>The poem presents contrasting emotions. Explain the contrast between \"She floats like a laugh\" and \"She falls like a tear.\"</li> <li>What does the \"tear from the eyes of a bride\" symbolize?</li> <li>What are the two main emotions depicted in the poem?</li> <li>What is the rhyme scheme of the first stanza?</li> <li>How does the poem portray the traditional Indian culture of a bride's farewell (vidai)?</li> <li>What impression do you get of the bride from the various comparisons used in the poem?</li> <li>Why do the bearers say they bear the bride \"lightly\"? Does it only refer to her physical weight?</li> <li>What is the central theme of the poem?</li> <li>Explain the image: \"She springs like a beam on the brow of the tide.\"</li> <li>How do the bearers feel about their duty?</li> <li>What role does nature (flowers, birds, streams, stars) play in the poem's imagery?</li> <li>What is the significance of the poem's title?</li> <li>Summarize the journey of the palanquin bearers in your own words.</li> </ol>"},{"location":"sem1/aec-eng/the-palanquin-bearers/#answers","title":"Answers","text":"<ol> <li>The palanquin bearers who are carrying the bride.</li> <li>A newly-married bride is being carried. She is likely going from her parents' home to her husband's home.</li> <li>They are happy and cheerful. The poem says, \"Gaily, O gaily we glide and we sing.\"</li> <li>The bride (she) is compared to a flower. It means she is delicate and moves gently to the rhythm of their song.</li> <li>The bride (her) is compared to a pearl on a string. It means she is very precious and valuable to them.</li> <li>It shows they think she is very precious, special, and needs to be carried with great care.</li> <li>First stanza: \"like a flower\" and \"like a bird.\" Second stanza: \"like a star\" and \"like a tear.\"</li> <li>A refrain is a line repeated in a poem. The refrain is: \"Lightly, O lightly we glide and we sing, / We bear her along like a pearl on a string.\"</li> <li>It creates a soft, gentle, and musical rhythm, like a lullaby or the swaying motion of the palki.</li> <li>Their song makes her sway gently, like a flower in the wind.</li> <li>It means she is very light and moves so smoothly that she seems to float, just as a bird skims the top of a river.</li> <li>It means she is bright, beautiful, and precious, shining like a star seen through the morning dew (which is their song).</li> <li>\"Like a laugh\" shows her happiness for her new life. \"Like a tear\" shows her sadness at leaving her parents' home.</li> <li>It symbolizes the bride's sadness and sorrow of leaving her family and childhood home during her vidai.</li> <li>The bearers' happiness and the bride's mixed feelings of happiness (joy) and sadness (sorrow).</li> <li>The rhyme scheme is aabbcc.</li> <li>It shows the tradition of carrying the bride in a doli (palanquin) and captures her mixed feelings of joy and sorrow during her vidai.</li> <li>She is very beautiful, delicate, precious, and light.</li> <li>No, it means she is so delicate and precious that they don't feel her weight as a burden. Their happiness makes the job feel light.</li> <li>The central theme is the traditional journey of a bride in a palanquin, describing her beauty and the mixed emotions of her farewell.</li> <li>It compares her to a ray of light (beam) that moves quickly and brightly on top of a wave (tide), showing her beauty and movement.</li> <li>They feel happy, proud, and responsible. They consider it an honor to carry the precious bride.</li> <li>Nature is used to create similes that describe the bride's beauty, lightness, and delicate nature.</li> <li>The title is significant because the poem is told from the point of view of the palanquin bearers, describing their experience.</li> <li>Happy palanquin bearers are carrying a new bride in her doli, singing a song about how beautiful, light, and precious she is as they walk.</li> </ol>"},{"location":"sem1/aec-eng/the-ring/","title":"Bryan MacMahon: The Ring","text":"\"Her heart had turned to stone in her breast.\" The story of a grandmother's unwavering spirit and a lost wedding ring, a symbol of enduring love and profound grief."},{"location":"sem1/aec-eng/the-ring/#questions","title":"Questions","text":"<ol> <li>Who is the narrator describing in the passage?</li> <li>Where did the narrator\u2019s grandmother live?</li> <li>In which county is the \u201cKickham country\u201d located?</li> <li>Where was the narrator\u2019s own home?</li> <li>How did the narrator describe the grass in Tipperary compared to Kerry?</li> <li>Who was Uncle Con?</li> <li>Who was Aunt Annie?</li> <li>How did Aunt Annie feel about her mother-in-law managing the farm?</li> <li>How did the narrator\u2019s grandfather, Martin Dermody, die?</li> <li>How many children did the grandmother have?</li> <li>What was the gender distribution of her children?</li> <li>What comparison does the narrator make between a jockey\u2019s crop and his grandmother?</li> <li>What comparison does the narrator make between a fishing rod and his grandmother?</li> <li>How does the narrator describe his grandmother\u2019s appearance?</li> <li>What is meant by \u201cblack affection\u201d in the text?</li> <li>How did the grandmother react when the narrator told the man he was named after his uncle, not his grandfather?</li> <li>What was Uncle Con\u2019s reaction to that same story?</li> <li>What was the grandmother doing on the day she lost her wedding ring?</li> <li>Where did she think she had lost the ring?</li> <li>What else had she lost apart from the wedding ring?</li> <li>Why had she lost the keeper?</li> <li>What was her working motto?</li> <li>Why did she refuse help from the narrator and Uncle Con when searching for the ring?</li> <li>When did she find the keeper?</li> <li>When did she finally find the ring?</li> <li>What did she do immediately after finding the ring?</li> <li>What emotional reaction did she have upon finding the ring?</li> <li>What name did she call out while sobbing?</li> <li>What is meant by \u201cthe teeth of the Galtees\u201d?</li> <li>What is a \u201ckeeper\u201d in the context of a wedding ring?</li> <li>What is a \u201cjockey\u2019s crop\u201d?</li> <li>What is \u201cCastle Connell greenheart\u201d?</li> <li>What is meant by \u201csix to six\u201d in the grandmother\u2019s motto?</li> <li>What does the narrator mean by \u201cblack affection\u201d?</li> <li>What is meant by \u201claws were made to be broken\u201d in the context of the grandmother\u2019s actions?</li> <li>What does the loss of the wedding ring symbolize for the grandmother?</li> <li>Why might the grandmother have been more emotional about the ring than she appeared at first?</li> <li>What does the narrator\u2019s comparison of the grandmother to a rod or crop tell us about her personality?</li> <li>How does the narrator suggest his grandmother\u2019s character was shaped by her past experiences?</li> <li>Why does the narrator describe her as having a \u201cheart turned to stone\u201d?</li> <li>Why might the grandmother have insisted on searching alone?</li> <li>How does the family\u2019s reaction during her search reflect their respect for her?</li> <li>Why is the moment she finally cries significant?</li> <li>How does the narrator\u2019s tone about his grandmother change from childhood to adulthood?</li> <li>Why does the narrator call her late-night search \u201cbrittle bravery\u201d?</li> <li>Identify one example of imagery from the text and explain its effect.</li> <li>How does the writer use humor in the text?</li> <li>How does the narrator use similes to describe the grandmother?</li> <li>Explain the use of personification in \u201cgrass gone to waste\u2026 seemed as much as you\u2019d find in a dozen\u2026 fields.\u201d</li> <li>How is foreshadowing used in the description of her determination?</li> <li>What narrative perspective is the story told from?</li> <li>How does the author create tension in the search for the ring?</li> <li>How does the ending provide emotional resolution?</li> <li>What theme of family relationships is explored in this passage?</li> <li>How is the theme of determination shown through the grandmother\u2019s character?</li> <li>What does the story reveal about rural Irish life at the time?</li> <li>How is the theme of pride illustrated in the grandmother\u2019s behavior?</li> <li>What role does memory play in the narrator\u2019s storytelling?</li> <li>How is loss portrayed in the passage?</li> <li>How is respect for elders depicted in the narrator\u2019s relationship with his grandmother?</li> <li>Do you think the grandmother\u2019s reaction to losing the ring was reasonable? Why or why not?</li> <li>If the ring had never been found, how do you think it would have affected her?</li> <li>What does the ring represent to the grandmother personally?</li> <li>How might this story be different if told from Uncle Con\u2019s perspective?</li> <li>Is the narrator\u2019s depiction of his grandmother more affectionate or critical? Explain your view.</li> <li>How does the search for the ring parallel the grandmother\u2019s life struggles?</li> <li>Could the story work without the emotional breakdown at the end? Why or why not?</li> <li>In what ways does the grandmother\u2019s character embody resilience?</li> <li>Why might the narrator have chosen to include the humorous incident with the man and the shilling?</li> <li>How does the author balance humor and pathos in the text?</li> </ol>"},{"location":"sem1/aec-eng/the-ring/#answers","title":"Answers","text":"<ol> <li>The narrator is describing his grandmother, who was his mother's mother.</li> <li>She lived on a farm in the \"Kickham country\" in Tipperary, Ireland.</li> <li>\"Kickham country\" is located in County Tipperary.</li> <li>The narrator's home was in a \"bitter sea-coast village in Kerry.\"</li> <li>He said that the grass wasted on a small stretch of roadside in Tipperary was more than you'd find in a dozen of his \"sea-poisoned\" fields in Kerry.</li> <li>Uncle Con was the narrator's uncle, his grandmother's only son.</li> <li>Aunt Annie was the narrator's aunt, Uncle Con's wife.</li> <li>She was happy (\"charmed\") to let her mother-in-law be responsible for the farm, as she was a gentle person.</li> <li>His horse walked into the farmyard pulling a cart (car) with Martin Dermody's dead body in it.</li> <li>She had six children.</li> <li>She had five girls and one boy.</li> <li>When he held a jockey's crop (a horse-riding whip), its balance reminded him of his grandmother.</li> <li>When he was fighting a large salmon with a \"CastleConnell greenheart\" fishing rod, the rod reminded him of his grandmother.</li> <li>He remembers her as being \"tall and dark and austere\" (serious or strict).</li> <li>This is answered in question 34.</li> <li>She \"laughed a little warmly.\"</li> <li>He picked the narrator up, messed up his hair, and called him a \"clever Kerry rascal.\"</li> <li>She was in the hayshed, moving hay with a fork as it was being stacked.</li> <li>She thought she had lost it in the \"half-pillar\" (a section) of hay they were building.</li> <li>She had also lost the \"keeper\" (the outer ring).</li> <li>She had lost it because her \"hands are getting thin.\"</li> <li>Her working motto was \"Six to six.\"</li> <li>She said that if they helped and didn't find it, she would worry they didn't search carefully enough and would have to search it all over again herself.</li> <li>She found the keeper on Saturday afternoon, around three o'clock.</li> <li>She finally found the ring on Saturday night, near midnight.</li> <li>She walked into the house, put the lantern on the dresser, and put out the candle before she spoke.</li> <li>At first, her face was \"cold as death,\" but then she suddenly hid her face in her apron, \"sobbed,\" and \"cried like the rain.\"</li> <li>She called out, \"Oh, Martin, Martin.\"</li> <li>It refers to the sharp, pointy peaks of the Galtee mountain range.</li> <li>The notes explain it's an outer ring worn to protect or keep the main wedding ring in place.</li> <li>The notes explain it's a \"firm rod\" (like a short whip) used by jockeys when racing horses.</li> <li>The notes explain it's a type of strong fishing rod made from \"greenheart\" wood, named after a place in Ireland.</li> <li>It refers to her strict working hours, likely from 6:00 AM to 6:00 PM.</li> <li>It means a type of love that was strict, serious, and not shown openly, hidden under her \"hard\" personality.</li> <li>She was talking about breaking her own strict \"six to six\" working rule, justifying her choice to work late into the night.</li> <li>It symbolizes her deep connection to her dead husband, Martin. Losing it felt like losing him all over again.</li> <li>The ring was her last physical link to her husband. While she acted tough to cope with his death, the ring represented the love and sadness she had buried deep inside.</li> <li>It tells us she was very tough and resilient. Like the rod, she could bend under great pressure (was flexible) but would never break (was not fragile).</li> <li>He directly says that her husband's sudden death, which left her to raise six children alone, was what \"turned her heart to stone\" and made her so \"hard.\"</li> <li>He means she became emotionally hard and tough as a way to protect herself and cope with the shock of her husband's death and the burden of raising her family alone.</li> <li>She said she needed \"peace of mind.\" She felt only she would search carefully enough, and if anyone else failed, she would have to re-do the search herself.</li> <li>They respect her authority completely. They offer help once, but when she refuses, they back off. They don't question her or stop her, even when she breaks her own rules.</li> <li>It is important because it's the only time the narrator ever saw her show emotion. It shows that under her \"hard\" exterior, she still felt deep sadness for her husband.</li> <li>As a child, he was \"puzzled\" by her and just saw her as strict and serious. As an adult (\"Now\"), he is more understanding and sympathetic, seeing \"with greater clarity\" why she was the way she was.</li> <li>It was \"bravery\" because she was forcing herself to keep searching, but \"brittle\" (like it could easily break) because she was at her physical and emotional limit, looking \"wan\" and \"strained.\"</li> <li>One example is when he describes her as \"like a mouse nibbling at a giant's loaf.\" This image clearly shows how huge the task was (the giant loaf of hay) and how small and slow her search felt against it.</li> <li>The writer uses humor in the story about the narrator and the man on the road. The narrator proudly says he's a Dermody, but then says he's named after \"Uncle Con,\" not his famous grandfather, which makes his grandmother laugh.</li> <li>He compares her to a jockey's crop and a fishing rod to show she was tough and flexible, but not fragile. He also compares her search to \"like a mouse nibbling at a giant's loaf.\"</li> <li>This sentence is a comparison (hyperbole), not personification. A real example of personification is in the same paragraph, calling the fields in Kerry \"sea-poisoned,\" which makes the sea seem like a living thing that can poison the land.</li> <li>Her description as \"hard, main hard\" and how she \"faced the world bravely\" after her husband's death hints (foreshadows) that she will show the same amazing, stubborn determination in searching for the ring.</li> <li>It is told from the first-person perspective (\"I,\" \"my\"). The narrator is an adult remembering his childhood.</li> <li>The author builds tension by making the search last for many days (Monday to Saturday) and by describing how tired and stressed the grandmother becomes. The moment of false hope, when they think she found the ring but it was \"only the keeper,\" also makes the tension rise.</li> <li>It provides a big emotional release. When the grandmother finally breaks down and cries, we finally understand her character. We see that her \"hard\" personality was just hiding her deep sadness for her husband.</li> <li>The passage explores the theme of a family led by a strong woman (a matriarch). The family respects the grandmother's authority, and the story also touches on unspoken love and shared sadness.</li> <li>It's shown through her \"bravely\" raising six children alone after her husband died, and through her six-day, non-stop search for the ring, where she searches \"wisp by wisp\" and refuses all help.</li> <li>It shows a life of hard farm work, where people depended on the land. It also shows that people had to be very tough to survive hardships and that families often had a strong, respected elder in charge.</li> <li>Her pride is shown in her refusal to accept help. She insists on searching alone because she believes only she can do it properly, and she doesn't want to rely on anyone else for something so important.</li> <li>The whole story is a memory. The narrator is telling a story from his childhood but explaining it with the understanding he has now as an adult. He is connecting the \"strict\" woman he remembers with the sad woman he now understands.</li> <li>Loss is shown as a life-changing event. The main loss\u2014her husband's death\u2014is what \"turned her heart to stone.\" The fear of losing the ring is so great because it feels like losing her husband all over again.</li> <li>Respect is shown as obedience. The narrator and his family do what she says and \"didn't cross her.\" They are in awe of her and are careful not to upset her, giving her space when she \"resented\" their pity.</li> <li>(Interpretation) Yes, it was reasonable for her. The ring wasn't just jewellery; it was her last physical link to her dead husband. Her entire \"hard\" personality was a way to cope with his death. Losing the ring threatened that, so a desperate search was understandable.</li> <li>(Inference) It probably would have broken her. Her \"brittle bravery\" would have shattered. Since finding the ring made her cry so much, not finding it might have left her in deep despair, feeling she had failed to protect the last piece of her past.</li> <li>It represents her dead husband, Martin, and the life she had with him before he died. It was a symbol of the time before she had to become \"hard\" to survive.</li> <li>(Inference) It would be more practical and less emotional. Con is \"gentle\" and worried about the farm work being delayed. He would probably focus more on his mother's health and the farm, not on analyzing her \"character\" the way the narrator does.</li> <li>(Interpretation) It is an affectionate (loving) description. Although he uses hard words like \"austere\" and \"stone\" at first, he uses them to show a mystery. By the end, when he explains her sadness, it's clear he understands and loves her deeply.</li> <li>The search is a small example of her life. She is faced with a huge, impossible-seeming task (the pile of hay, or raising six kids alone) that she must handle with determination, all by herself, no matter the personal cost.</li> <li>(Interpretation) No, it wouldn't work. Without her breakdown, she just stays a \"hard\" and \"austere\" woman. The ending is the whole point\u2014it gives the \"clarity\" the narrator talks about and shows the deep sadness that shaped her.</li> <li>She shows resilience by \"facing the world bravely\" and raising six children alone after her husband's death. She also shows it by pushing through six days of hard searching, ignoring her own health, to find the ring.</li> <li>He included it to show her human side. It's the only time he remembers her laughing \"warmly\" and shows the \"black affection\" she had for him. It's an important contrast to her usual \"hard\" behavior.</li> <li>The author uses the light, funny story about the shilling to show the grandmother's warmer side first. This makes the later story of her \"pathetic\" and sad search for the ring feel even more powerful and emotional.</li> </ol>"},{"location":"sem1/c/syllabus/","title":"Syllabus","text":""},{"location":"sem1/c/syllabus/#unit-1-getting-started-with-c-programming-10-lectures","title":"UNIT 1: Getting started with C programming (10 Lectures)","text":"<ul> <li> <p>1. C Fundamentals and Program Structure</p> <ul> <li>Introduction to programming languages<ul> <li>High-level vs low-level languages</li> <li>Compiled vs interpreted languages</li> </ul> </li> <li>Structure of a C program</li> <li>Introduction to Header files</li> <li>Main function and a simple program execution</li> <li>Compiling and executing a program</li> </ul> </li> <li> <p>2. Data, Variables, and Constants</p> <ul> <li>C tokens<ul> <li>Keywords</li> <li>Identifiers</li> <li>Constants</li> <li>Operators</li> </ul> </li> <li>Basic data types in C<ul> <li>Integers, floats, doubles, characters</li> <li>Void</li> </ul> </li> <li>Size and range of values of data types</li> <li>Variables</li> <li>Constants<ul> <li>Integer constant</li> <li>Real constant</li> <li>Character constant</li> <li>String constant</li> </ul> </li> <li>Declaration and initialization of variables and constants</li> <li>Assigning values to variables</li> </ul> </li> <li> <p>3. Operators, Expressions, and I/O</p> <ul> <li>Statements and expressions in C</li> <li>Operators in C<ul> <li>Binary and unary operators</li> <li>Arithmetic, assignment, logical, comparison, bitwise, and conditional operators</li> </ul> </li> <li>Order of precedence of operators</li> <li>Associativity of operators</li> <li>Typecasting</li> <li>Input and output statements<ul> <li>getchar(), getc(), getch()</li> <li>putchar(), putc(), puts()</li> <li>scanf(), printf()</li> <li>Format specifiers</li> </ul> </li> </ul> </li> </ul>"},{"location":"sem1/c/syllabus/#unit-2-control-structures-in-c-9-lectures","title":"UNIT 2: Control Structures in C (9 Lectures)","text":"<ul> <li>Control Structures in C.</li> <li>Basic programming constructs- Sequence, selection and iteration.</li> <li>Conditional statements \u2013 if, else, switch case.</li> <li>Nested conditions.</li> <li>Loops \u2013 for loop, while loop, do- while loop.</li> <li>Using loop for counting iterations.</li> <li>Using while loop for indefinite iterations.</li> <li>Nested loops.</li> <li>Break and continue statements.</li> </ul>"},{"location":"sem1/c/syllabus/#unit-3-arrays-and-strings-8-lectures","title":"UNIT 3: Arrays and Strings (8 Lectures)","text":"<ul> <li>Introduction to Arrays.</li> <li>Declaration and initialization of arrays.</li> <li>Accessing array elements.</li> <li>Multidimensional arrays.</li> <li>Introduction to Strings.</li> <li>Declaration and initialization of strings.</li> <li>String input and output in C.</li> </ul>"},{"location":"sem1/c/syllabus/#unit-4-functions-and-pointers-9-lectures","title":"UNIT 4: Functions and Pointers (9 Lectures)","text":"<ul> <li>Introduction to Pointers.</li> <li>Pointer declaration and initialization.</li> <li>Pointers and addresses.</li> <li>Pointers and Arrays.</li> <li>Basic concept of dynamic memory allocation, malloc(), calloc().</li> <li>Introduction to functions.</li> <li>Function declaration and definition.</li> <li>Return types of function.</li> <li>Function arguments.</li> <li>Function calling \u2013 call by value vs call by reference.</li> <li>Passing an array as argument to a function.</li> <li>Basic concept of recursion.</li> </ul>"},{"location":"sem1/c/syllabus/#unit-5-introduction-to-structures-and-unions-4-lectures","title":"UNIT 5: Introduction to Structures and Unions (4 Lectures)","text":"<ul> <li>Basic concept of Structures and Unions in C.</li> <li>Structure declaration and initialization.</li> <li>Union declaration and initialization.</li> <li>Difference between structures and unions.</li> </ul>"},{"location":"sem1/c/syllabus/#unit-6-file-processing-in-c-5-lectures","title":"UNIT 6: File Processing in C (5 Lectures)","text":"<ul> <li>Basic concept of file handling.</li> <li>Opening and closing file using fopen() and fclose().</li> <li>Binary vs text files.</li> <li>Reading and writing files \u2013 fgets(), fscanf(), fprintf().</li> <li>Random access to files.</li> </ul>"},{"location":"sem1/c/u1-i/","title":"C Fundamentals and Program Structure","text":""},{"location":"sem1/c/u1-i/#introduction-to-programming-languages","title":"Introduction to Programming Languages","text":""},{"location":"sem1/c/u1-i/#high-level-vs-low-level-languages","title":"High-level vs Low-level Languages","text":"<p>High-level languages:</p> <ul> <li>Designed for human readability and ease of use</li> <li>Closer to natural language syntax</li> <li>Include features like automatic memory management</li> <li>Examples: Python, Java, C++, JavaScript</li> </ul> <p>Low-level languages:</p> <ul> <li>Closer to machine code and hardware architecture</li> <li>Require understanding of computer architecture</li> <li>Provide direct control over hardware resources</li> <li>Examples: Assembly language, Machine code</li> </ul> <p>Key differences:</p> Aspect High-level Low-level Abstraction High abstraction from hardware Direct hardware control Portability Platform independent Platform specific Development time Faster development Slower development Performance Generally slower Generally faster Memory management Automatic Manual"},{"location":"sem1/c/u1-i/#compiled-vs-interpreted-languages","title":"Compiled vs Interpreted Languages","text":"<p>Compiled languages:</p> <ul> <li>Source code translated to machine code before execution</li> <li>Complete conversion before program runs</li> <li>Examples: C, C++, Rust, Go</li> </ul> <p>Interpreted languages:</p> <ul> <li>Source code executed line by line during runtime</li> <li>No separate compilation step</li> <li>Examples: Python, JavaScript, Ruby</li> </ul> <p>Hybrid approaches:</p> <ul> <li>Some languages use both compilation and interpretation</li> <li>Java: bytecode compilation followed by JVM interpretation</li> <li>C#: compilation to IL followed by JIT compilation</li> </ul> <p>[insert image on programming language compilation vs interpretation here]</p>"},{"location":"sem1/c/u1-i/#structure-of-a-c-program","title":"Structure of a C Program","text":"<p>A well-structured C program typically follows this organization:</p> <p>Preprocessor directives</p> <ul> <li>Include headers like #include  <li>Macro definitions using #define</li> <p>Global declarations</p> <ul> <li>Global variables</li> <li>Function prototypes</li> </ul> <p>Main function</p> <ul> <li>Entry point of the program</li> <li>Program execution starts here</li> </ul> <p>User-defined functions</p> <ul> <li>Additional functionality</li> <li>Called from main or other functions</li> </ul> <p>Example basic structure: <pre><code>#include &lt;stdio.h&gt;  // Preprocessor directive\n\n// Global variable declaration\nint global_var = 0;\n\n// Function prototype\nvoid display_message();\n\nint main() {\n    // Local variable declarations\n    int local_var = 1;\n\n    // Statements\n    printf(\"Hello, World!\\n\");\n    display_message();\n\n    return 0;  // Return statement\n}\n\n// User-defined function\nvoid display_message() {\n    printf(\"This is a user-defined function.\\n\");\n}\n</code></pre></p>"},{"location":"sem1/c/u1-i/#introduction-to-header-files","title":"Introduction to Header Files","text":"<p>Header files serve several purposes:</p> <p>Function declarations:</p> <ul> <li>Prototypes for standard library functions</li> <li>User-defined function prototypes</li> </ul> <p>Macro definitions:</p> <ul> <li>Constants and symbolic names</li> <li>Example: #define PI 3.14159</li> </ul> <p>Data type definitions:</p> <ul> <li>Custom structures and unions</li> <li>Typedef statements</li> </ul> <p>Header guards:</p> <ul> <li>Prevent multiple inclusions</li> <li>Example:    <pre><code>#ifndef HEADER_FILE_H\n#define HEADER_FILE_H\n// Content\n#endif\n</code></pre></li> </ul> <p>Common standard headers:</p> <ul> <li><code>&lt;stdio.h&gt;</code> - Input/output functions</li> <li><code>&lt;stdlib.h&gt;</code> - Memory allocation and process control</li> <li><code>&lt;string.h&gt;</code> - String manipulation</li> <li><code>&lt;math.h&gt;</code> - Mathematical functions</li> <li><code>&lt;conio.h&gt;</code> - Console input/output (non-standard)</li> </ul> <p>[insert image on C header files structure here]</p>"},{"location":"sem1/c/u1-i/#main-function-and-simple-program-execution","title":"Main Function and Simple Program Execution","text":"<p>The main function is the entry point of every C program:</p> <pre><code>int main() {\n    // Program statements\n    return 0;\n}\n</code></pre> <p>Key aspects of the main function:</p> <p>Return type:</p> <ul> <li><code>int</code> indicates the function returns an integer</li> <li>Returning <code>0</code> indicates successful execution</li> <li>Non-zero values indicate errors</li> </ul> <p>Parameters:</p> <ul> <li><code>void main()</code> - No parameters</li> <li><code>int main(void)</code> - Explicitly no parameters</li> <li><code>int main(int argc, char *argv[])</code> - With command-line arguments</li> </ul> <p>Simple execution flow:</p> <ol> <li>Program starts at <code>main()</code></li> <li>Statements are executed sequentially</li> <li>The <code>return</code> statement ends the function</li> <li>Operating system receives return value</li> </ol> <p>[insert image on C program execution flow here]</p>"},{"location":"sem1/c/u1-i/#compiling-and-executing-a-program","title":"Compiling and Executing a Program","text":"<p>The compilation process involves several stages:</p>"},{"location":"sem1/c/u1-i/#compilation-stages","title":"Compilation Stages","text":"<p>Preprocessing:</p> <ul> <li>Handles preprocessor directives</li> <li>Expands macros and includes header files</li> <li>Command: <code>gcc -E program.c -o program.i</code></li> </ul> <p>Compilation:</p> <ul> <li>Translates code to assembly language</li> <li>Command: <code>gcc -S program.i -o program.s</code></li> </ul> <p>Assembly:</p> <ul> <li>Converts assembly to machine code</li> <li>Command: <code>gcc -c program.s -o program.o</code></li> </ul> <p>Linking:</p> <ul> <li>Combines object files with libraries</li> <li>Creates executable file</li> <li>Command: <code>gcc program.o -o program</code></li> </ul>"},{"location":"sem1/c/u1-i/#complete-compilation-command","title":"Complete Compilation Command","text":"<pre><code>gcc -o program program.c\n./program  # Execute the program\n</code></pre>"},{"location":"sem1/c/u1-i/#common-compiler-options","title":"Common Compiler Options","text":"Option Description <code>-o &lt;file&gt;</code> Specify output file name <code>-Wall</code> Show all warnings <code>-g</code> Include debugging information <code>-O2</code> Optimize code <code>-std=c11</code> Specify C11 standard <p>[insert image on C compilation process here]</p>"},{"location":"sem1/c/u1-i/#common-compilation-errors-and-solutions","title":"Common Compilation Errors and Solutions","text":"<p>Syntax Errors:</p> <ul> <li>Missing semicolons</li> <li>Incorrect parentheses or brackets</li> <li>Undefined variables</li> </ul> <p>Linker Errors:</p> <ul> <li>Missing function definitions</li> <li>Incorrect function declarations</li> <li>Missing libraries</li> </ul> <p>Runtime Errors:</p> <ul> <li>Division by zero</li> <li>Array out of bounds</li> <li>Null pointer dereference</li> </ul> <p>Debugging Tips:</p> <ul> <li>Use compiler warnings (<code>-Wall</code>)</li> <li>Add print statements to trace execution</li> <li>Use debugging tools like gdb</li> </ul>"},{"location":"sem1/c/u1-i/#best-practices-for-c-programming","title":"Best Practices for C Programming","text":"<ol> <li>Consistent indentation and formatting</li> <li>Meaningful variable and function names</li> <li>Code comments for complex logic</li> <li>Modular programming with separate functions</li> <li>Error checking for input/output operations</li> <li>Memory management and leak prevention</li> </ol>"},{"location":"sem1/c/u1-ii/","title":"Data, Variables, and Constants in C","text":""},{"location":"sem1/c/u1-ii/#data-variables-and-constants-in-c","title":"Data, Variables, and Constants in C","text":""},{"location":"sem1/c/u1-ii/#c-tokens","title":"C Tokens","text":"<p>In C programming, a token is the smallest individual unit in a program. C tokens can be classified into several categories:</p> <ul> <li>Keywords</li> <li>Identifiers</li> <li>Constants</li> <li>Operators</li> <li>Special symbols</li> <li>Comments</li> </ul> <p>All these tokens combined together form a C program. The compiler processes these tokens sequentially to understand the program's structure and functionality.</p>"},{"location":"sem1/c/u1-ii/#keywords","title":"Keywords","text":"<p>Keywords are predefined reserved words in C that have special meanings to the compiler. They cannot be used as identifiers or variable names. Some of the keywords in C include:</p> <ul> <li><code>auto</code></li> <li><code>break</code></li> <li><code>case</code></li> <li><code>char</code></li> <li><code>const</code></li> <li><code>continue</code></li> <li><code>default</code></li> <li><code>do</code></li> <li><code>double</code></li> <li><code>else</code></li> <li><code>enum</code></li> <li><code>extern</code></li> <li><code>float</code></li> <li><code>for</code></li> <li><code>goto</code></li> <li><code>if</code></li> <li><code>int</code></li> <li><code>long</code></li> <li><code>register</code></li> <li><code>return</code></li> <li><code>short</code></li> <li><code>signed</code></li> <li><code>sizeof</code></li> <li><code>static</code></li> <li><code>struct</code></li> <li><code>switch</code></li> <li><code>typedef</code></li> <li><code>union</code></li> <li><code>unsigned</code></li> <li><code>void</code></li> <li><code>volatile</code></li> <li><code>while</code></li> </ul> <p>Total number of keywords in C is 32. The exact set of keywords may vary slightly between different C standards like C89, C99, C11, etc.</p>"},{"location":"sem1/c/u1-ii/#identifiers","title":"Identifiers","text":"<p>Identifiers are names given to variables, functions, arrays, or other user-defined items. They are used to identify different elements in a program. Rules for forming identifiers in C include:</p> <ol> <li>Allowed characters: letters (A-Z, a-z), digits (0-9), and underscore (_)</li> <li>First character must be a letter or underscore (not a digit)</li> <li>Cannot contain spaces or special characters (except underscore)</li> <li>Cannot be a keyword</li> <li>Case-sensitive (variables 'sum' and 'Sum' are different)</li> </ol> <p>Examples of valid identifiers:</p> <ul> <li><code>variable_name</code></li> <li><code>sum</code></li> <li><code>total_marks</code></li> <li><code>average</code></li> <li><code>_temp</code></li> </ul> <p>Examples of invalid identifiers:</p> <ul> <li><code>2number</code> (starts with digit)</li> <li><code>my variable</code> (contains space)</li> <li><code>int</code> (keyword)</li> <li><code>sum@total</code> (contains special character)</li> </ul>"},{"location":"sem1/c/u1-ii/#constants","title":"Constants","text":"<p>Constants are fixed values that cannot be changed during program execution. They are also called literals. Constants in C can be of several types:</p> <ol> <li>Integer constants</li> <li>Real constants (floating-point constants)</li> <li>Character constants</li> <li>String constants</li> <li>Enumeration constants</li> </ol> <p>Constants provide several advantages:</p> <ul> <li>They make the program more readable and maintainable</li> <li>They prevent accidental modification of values that should remain unchanged</li> <li>They improve program efficiency as compilers can optimize constant values</li> </ul>"},{"location":"sem1/c/u1-ii/#operators","title":"Operators","text":"<p>Operators are symbols that perform operations on variables and values. They are essential for manipulating data and controlling program flow. C operators can be classified into:</p> <ol> <li>Arithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code></li> <li>Relational operators: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li> <li>Logical operators: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li> <li>Bitwise operators: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Assignment operators: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, etc.</li> <li>Conditional operator: <code>?:</code></li> <li>Special operators: <code>sizeof</code>, <code>&amp;</code> (address), <code>*</code> (pointer), <code>.</code> (member), <code>-&gt;</code> (pointer to member)</li> </ol> <p>The precedence of operators determines the order in which operations are performed. Higher precedence operators are evaluated before lower precedence operators.</p>"},{"location":"sem1/c/u1-ii/#basic-data-types-in-c","title":"Basic Data Types in C","text":"<p>Data types in C determine the type of data a variable can store, the amount of memory it occupies, and the operations that can be performed on it. The basic data types in C include:</p>"},{"location":"sem1/c/u1-ii/#integers","title":"Integers","text":"<p>Integers are whole numbers without fractional components. They can be positive, negative, or zero. In C, integer types include:</p> <ul> <li><code>char</code>: Typically 1 byte, stores characters or small integers</li> <li><code>short</code>: Usually 2 bytes</li> <li><code>int</code>: Typically 4 bytes</li> <li><code>long</code>: Usually 4 bytes</li> <li><code>long long</code>: Usually 8 bytes</li> </ul> <p>Each integer type can also be modified with the <code>signed</code> or <code>unsigned</code> keyword to determine if they can store negative values.</p>"},{"location":"sem1/c/u1-ii/#floats-and-doubles","title":"Floats and Doubles","text":"<p>Floating-point types represent real numbers with fractional parts:</p> <ul> <li><code>float</code>: Single-precision floating-point, typically 4 bytes</li> <li><code>double</code>: Double-precision floating-point, typically 8 bytes</li> <li><code>long double</code>: Extended precision floating-point, typically 10 or 16 bytes</li> </ul> <p>Floating-point types follow the IEEE 754 standard for representing real numbers in binary.</p>"},{"location":"sem1/c/u1-ii/#characters","title":"Characters","text":"<p>Character type (<code>char</code>) stores single characters such as letters, digits, or special symbols. Characters are stored as their corresponding ASCII values. For example, the character 'A' is stored as the value 65.</p> <p>The <code>char</code> type is typically 1 byte in size and can be modified with <code>signed</code> (values from -128 to 127) or <code>unsigned</code> (values from 0 to 255).</p>"},{"location":"sem1/c/u1-ii/#void","title":"Void","text":"<p>The <code>void</code> type indicates an absence of value. It has several uses:</p> <ol> <li>Function return type: Functions that don't return a value use <code>void</code></li> <li>Function parameters: Functions that don't take parameters use <code>void</code></li> <li>Generic pointers: A <code>void*</code> pointer can point to any data type</li> </ol> <p>Example: <pre><code>void print_message() {\n    printf(\"Hello, World!\");\n}\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#size-and-range-of-values-of-data-types","title":"Size and Range of Values of Data Types","text":"<p>The size of data types can vary between different systems. The C standard specifies minimum sizes but allows implementations to exceed them. Below are typical sizes and ranges for modern 32-bit and 64-bit systems:</p> Data Type Size (bytes) Range (typical) <code>char</code> 1 -128 to 127 (signed) or 0 to 255 (unsigned) <code>short</code> 2 -32,768 to 32,767 (signed) or 0 to 65,535 (unsigned) <code>int</code> 4 -2,147,483,648 to 2,147,483,647 (signed) or 0 to 4,294,967,295 (unsigned) <code>long</code> 4 or 8 On 32-bit: same as int; On 64-bit: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 <code>long long</code> 8 -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 <code>float</code> 4 \u00b13.4E\u00b138 (about 7 decimal digits) <code>double</code> 8 \u00b11.7E\u00b1308 (about 15 decimal digits) <code>long double</code> 10 or 16 \u00b11.2E\u00b14932 (about 19 decimal digits) <p>You can use the <code>sizeof</code> operator to determine the size of data types on your system:</p> <pre><code>printf(\"Size of int: %zu bytes\\n\", sizeof(int));\nprintf(\"Size of float: %zu bytes\\n\", sizeof(float));\n</code></pre>"},{"location":"sem1/c/u1-ii/#variables","title":"Variables","text":"<p>Variables are named storage locations in memory that hold data values that can change during program execution. They are fundamental to programming as they allow us to store and manipulate data.</p>"},{"location":"sem1/c/u1-ii/#characteristics-of-variables","title":"Characteristics of Variables","text":"<ol> <li>Name: A unique identifier for the variable</li> <li>Data type: Determines the kind of data the variable can hold</li> <li>Size: Amount of memory allocated to store the variable</li> <li>Value: The data stored in the variable</li> <li>Address: The memory location where the variable is stored</li> </ol>"},{"location":"sem1/c/u1-ii/#declaration-of-variables","title":"Declaration of Variables","text":"<p>Variable declaration specifies the name and data type of a variable. The syntax is:</p> <pre><code>data_type variable_name;\n</code></pre> <p>Example: <pre><code>int age;\nfloat average;\nchar grade;\n\nint a, b, c; // Multiple variables of same type\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#initialization-of-variables","title":"Initialization of Variables","text":"<p>Initialization is the process of assigning an initial value to a variable when it is declared. The syntax is:</p> <pre><code>data_type variable_name = value;\n</code></pre> <p>Example: <pre><code>int age = 25;\nfloat average = 85.5;\nchar grade = 'A';\n\nint a = 10, b = 20, c = 30; // Multiple initialization\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#assigning-values-to-variables","title":"Assigning Values to Variables","text":"<p>You can assign or change a variable's value using the assignment operator (<code>=</code>):</p> <pre><code>int age;\nage = 25; // Assignment after declaration\n\n// You can also use compound assignment operators\nage += 5; // Equivalent to age = age + 5\nage *= 2; // Equivalent to age = age * 2\n</code></pre> <p>Constants are fixed values that cannot be changed during program execution. They are useful for values that should remain constant throughout the program.</p>"},{"location":"sem1/c/u1-ii/#types-of-constants","title":"Types of Constants","text":"<ol> <li>Integer Constants</li> <li>Real Constants (Floating-point Constants)</li> <li>Character Constants</li> <li>String Constants</li> </ol>"},{"location":"sem1/c/u1-ii/#integer-constants","title":"Integer Constants","text":"<p>Integer constants are whole numbers without fractional components. They can be:</p> <ol> <li> <p>Decimal: Base 10 (digits 0-9)    <pre><code>int a = 123;\nint b = +456;\nint c = -789;\n</code></pre></p> </li> <li> <p>Octal: Base 8 (digits 0-7), prefixed with 0    <pre><code>int a = 0123; // Decimal 83\n</code></pre></p> </li> <li> <p>Hexadecimal: Base 16 (digits 0-9, letters A-F), prefixed with 0x or 0X    <pre><code>int a = 0x123; // Decimal 291\n</code></pre></p> </li> </ol> <p>Integer constants can also have the following suffixes to specify their type:</p> <ul> <li><code>U</code> or <code>u</code>: unsigned</li> <li><code>L</code> or <code>l</code>: long</li> <li><code>LL</code> or <code>ll</code>: long long</li> <li><code>UL</code> or <code>ul</code>: unsigned long</li> <li><code>ULL</code> or <code>ull</code>: unsigned long long</li> </ul> <p>Examples: <pre><code>unsigned int a = 123U;\nlong b = 123L;\nlong long c = 123LL;\nunsigned long d = 123UL;\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#real-constants","title":"Real Constants","text":"<p>Real constants (floating-point constants) represent numbers with fractional parts. They can be:</p> <ol> <li> <p>Decimal form: With a decimal point and optional exponent    <pre><code>float a = 123.456;\nfloat b = 0.456;\nfloat c = -123.0;\nfloat d = .456; // Equivalent to 0.456\n</code></pre></p> </li> <li> <p>Exponential form: With an exponent (E or e)    <pre><code>float a = 123.456e2; // 123.456 \u00d7 10\u00b2 = 12345.6\nfloat b = 123.456E-2; // 123.456 \u00d7 10\u207b\u00b2 = 1.23456\n</code></pre></p> </li> </ol> <p>Floating-point constants can have the following type specifiers:</p> <ul> <li><code>F</code> or <code>f</code>: float</li> <li><code>L</code> or <code>l</code>: long double</li> </ul> <p>Examples: <pre><code>float a = 123.456F;\ndouble b = 123.456;\nlong double c = 123.456L;\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#character-constants","title":"Character Constants","text":"<p>Character constants are single characters enclosed in single quotes: <pre><code>char a = 'A';\nchar b = '7';\nchar c = '$';\nchar d = '\\n'; // Newline escape sequence\n</code></pre></p> <p>Special characters can be represented using escape sequences:</p> <ul> <li><code>\\n</code>: Newline</li> <li><code>\\t</code>: Tab</li> <li><code>\\\\</code>: Backslash</li> <li><code>\\'</code>: Single quote</li> <li><code>\\\"</code>: Double quote</li> <li><code>\\b</code>: Backspace</li> <li><code>\\r</code>: Carriage return</li> <li><code>\\0</code>: Null character</li> <li><code>\\xHH</code>: Hexadecimal number (HH is hex digits)</li> <li><code>\\0OO</code>: Octal number (OO is octal digits)</li> </ul> <p>Examples: <pre><code>char newline = '\\n';\nchar backslash = '\\\\';\nchar hex_value = '\\x41'; // 'A' in ASCII\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#string-constants","title":"String Constants","text":"<p>String constants (string literals) are sequences of characters enclosed in double quotes. The compiler automatically adds a null character (<code>\\0</code>) at the end: <pre><code>char greeting[] = \"Hello, World!\";\nchar name[] = \"John Doe\";\nchar empty[] = \"\"; // Empty string\n</code></pre></p> <p>Each string character occupies one byte, and the null terminator occupies one additional byte.</p>"},{"location":"sem1/c/u1-ii/#declaration-and-initialization-of-variables-and-constants","title":"Declaration and Initialization of Variables and Constants","text":""},{"location":"sem1/c/u1-ii/#declaration-of-variables_1","title":"Declaration of Variables","text":"<p>Variable declaration tells the compiler the name and data type of a variable. The variable is declared before it is used:</p> <pre><code>int age; // Declaration\nage = 25; // Assignment\n</code></pre> <p>Multiple variables of the same type can be declared in one statement: <pre><code>int a, b, c;\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#initialization-of-variables_1","title":"Initialization of Variables","text":"<p>Initialization assigns an initial value to a variable when it is declared:</p> <pre><code>int age = 25; // Declaration and initialization\n</code></pre> <p>For multiple variables: <pre><code>int a = 10, b = 20, c = 30;\n</code></pre></p> <p>Uninitialized variables contain garbage values (undefined values), which can lead to unpredictable behavior. It's always good practice to initialize variables when declaring them.</p>"},{"location":"sem1/c/u1-ii/#constants-declaration","title":"Constants Declaration","text":"<p>Constants can be declared in two ways in C:</p> <ol> <li> <p>Using <code>const</code> keyword    <pre><code>const int MAX_VALUE = 100;\nconst float PI = 3.14159;\n</code></pre></p> </li> <li> <p>Using <code>#define</code> preprocessor directive    <code>c    #define MAX_VALUE 100    #define PI 3.14159</code></p> </li> </ol> <p>Constants declared with <code>const</code> are type-safe (the compiler knows their data type), while constants defined with <code>#define</code> are simple text substitutions during preprocessing.</p>"},{"location":"sem1/c/u1-ii/#assigning-values-to-variables_1","title":"Assigning Values to Variables","text":"<p>Values can be assigned to variables in several ways:</p>"},{"location":"sem1/c/u1-ii/#simple-assignment","title":"Simple Assignment","text":"<p>The basic assignment operator is <code>=</code>: <pre><code>int a;\na = 10; // Simple assignment\n\n// Compound assignment\na += 5; // a = a + 5\na -= 3; // a = a - 3\na *= 2; // a = a * 2\na /= 4; // a = a / 4\na %= 2; // a = a % 2\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#multiple-assignment","title":"Multiple Assignment","text":"<p>Multiple variables can be assigned the same value: <pre><code>int a, b, c;\na = b = c = 10; // All assigned 10\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#initialization-during-declaration","title":"Initialization During Declaration","text":"<p>Variables can be initialized at the time of declaration: <pre><code>int a = 10;\nint b = 20, c = 30;\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#initialization-with-expressions","title":"Initialization with Expressions","text":"<p>Variables can be initialized with expressions involving other variables or constants: <pre><code>int a = 10;\nint b = a + 5; // b is 15\nint c = 2 * b; // c is 30\n</code></pre></p>"},{"location":"sem1/c/u1-ii/#type-conversion-in-assignment","title":"Type Conversion in Assignment","text":"<p>When assigning values between different data types, type conversion may occur:</p> <ol> <li> <p>Implicit type conversion: Done automatically by the compiler    <pre><code>int a = 10;\nfloat b = a; // int to float (a becomes 10.0)\n</code></pre></p> </li> <li> <p>Explicit type conversion: Done using cast operator    <pre><code>float a = 10.5;\nint b = (int)a; // float to int (b becomes 10)\n</code></pre></p> </li> </ol> <p>When converting from a larger type to a smaller type (like double to float), data may be lost due to truncation or rounding.</p> <p><pre><code>graph TD\n    A[C Tokens] --&gt; B[Keywords]\n    A --&gt; C[Identifiers]\n    A --&gt; D[Constants]\n    A --&gt; E[Operators]\n    A --&gt; F[Special Symbols]\n    A --&gt; G[Comments]\n\n    D --&gt; H[Integer Constants]\n    D --&gt; I[Real Constants]\n    D --&gt; J[Character Constants]\n    D --&gt; K[String Constants]\n    D --&gt; L[Enumeration Constants]\n\n    E --&gt; M[Arithmetic]\n    E --&gt; N[Relational]\n    E --&gt; O[Logical]\n    E --&gt; P[Bitwise]\n    E --&gt; Q[Assignment]\n\n    F[Basic Data Types] --&gt; R[Integers]\n    F --&gt; S[Floats/Doubles]\n    F --&gt; T[Characters]\n    F --&gt; U[Void]\n</code></pre> (insert image on C data types memory representation here)</p>"},{"location":"sem1/c/u1-iii/","title":"Operators, Expressions, and I/O","text":""},{"location":"sem1/c/u1-iii/#statements-and-expressions-in-c","title":"Statements and Expressions in C","text":"<p>In C, a statement is an instruction that tells the computer to perform a specific action. It ends with a semicolon (;). Examples include:</p> <pre><code>int x = 10;\nprintf(\"Hello, World!\");\nreturn 0;\n</code></pre> <p>An expression is a combination of constants, variables, operators, and function calls that can be evaluated to produce a value. Examples include:</p> <pre><code>int sum = 5 + 3; // 5 + 3 is an expression\nint result = (x &gt; y) ? x : y;  // ternary expression\n</code></pre> <p>Key differences:</p> <ul> <li>Statements perform actions; expressions produce values</li> <li>Some expressions can be statements (when they end with <code>;</code>), but not all statements are expressions</li> <li>Examples of expressions:</li> <li>Constants: <code>5</code>, <code>3.14</code>, <code>'a'</code></li> <li>Variables: <code>x</code>, <code>y</code></li> <li>Function calls: <code>printf(\"Hello\")</code></li> <li>Operations: <code>5 + 3</code>, <code>x * y</code></li> <li>Composition: <code>5 + (x * y)</code></li> </ul>"},{"location":"sem1/c/u1-iii/#operators-in-c","title":"Operators in C","text":""},{"location":"sem1/c/u1-iii/#binary-and-unary-operators","title":"Binary and Unary Operators","text":"<p>Binary operators require two operands:</p> <ul> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li> <li>Assignment: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li> <li>Logical: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li> <li>Bitwise: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> </ul> <p>Unary operators require only one operand:</p> <ul> <li>Increment: <code>++</code> (pre and post)</li> <li>Decrement: <code>--</code> (pre and post)</li> <li>Unary plus: <code>+</code></li> <li>Unary minus: <code>-</code></li> <li>Logical NOT: <code>!</code></li> <li>Address of: <code>&amp;</code></li> <li>Indirection/dereference: <code>*</code></li> <li>Size of: <code>sizeof()</code></li> </ul>"},{"location":"sem1/c/u1-iii/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>The basic arithmetic operators are:</p> <ul> <li>Addition (<code>+</code>): Adds two operands</li> <li>Subtraction (<code>-</code>): Subtracts the second operand from the first</li> <li>Multiplication (<code>*</code>): Multiplies two operands</li> <li>Division (<code>/</code>): Divides the first operand by the second</li> <li>Modulus (<code>%</code>): Returns the remainder of division (only for integers)</li> </ul> <pre><code>int a = 10, b = 5;\nint sum = a + b;      // 15\nint difference = a - b;  // 5\nint product = a * b;    // 50\nint quotient = a / b;   // 2\nint remainder = a % b;  // 0\n</code></pre> <p>Important notes:</p> <ul> <li>Division of integers truncates toward zero</li> <li>Modulus operator cannot be applied to floating-point numbers</li> <li>The behavior of division and modulus with negative operands is implementation-defined in some cases according to the C standard</li> </ul>"},{"location":"sem1/c/u1-iii/#assignment-operators","title":"Assignment Operators","text":"<p>Basic assignment: =</p> <p>Compound assignment operators:</p> <ul> <li><code>+=</code>: Add and assign</li> <li><code>-=</code>: Subtract and assign</li> <li><code>*=</code>: Multiply and assign</li> <li><code>/=</code>: Divide and assign</li> <li><code>%=</code>: Modulus and assign</li> </ul> <pre><code>int x = 10;\nx += 5;   // Equivalent to x = x + 5; (x becomes 15)\nx *= 2;   // Equivalent to x = x * 2; (x becomes 30)\n</code></pre>"},{"location":"sem1/c/u1-iii/#logical-operators","title":"Logical Operators","text":"<ul> <li><code>&amp;&amp;</code> (AND): Returns 1 (true) if both operands are non-zero</li> <li><code>||</code> (OR): Returns 1 (true) if at least one operand is non-zero</li> <li><code>!</code> (NOT): Returns 1 (true) if the operand is zero, otherwise returns 0 (false)</li> </ul> <pre><code>int a = 1, b = 0;\nint result1 = a &amp;&amp; b;  // 0 (false)\nint result2 = a || b;  // 1 (true)\nint result3 = !a;      // 0 (false)\n</code></pre>"},{"location":"sem1/c/u1-iii/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>==</code> (Equal to): Returns 1 if operands are equal</li> <li><code>!=</code> (Not equal to): Returns 1 if operands are not equal</li> <li><code>&gt;</code> (Greater than): Returns 1 if first operand is greater than second</li> <li><code>&lt;</code> (Less than): Returns 1 if first operand is less than second</li> <li><code>&gt;=</code> (Greater than or equal to): Returns 1 if first operand is greater than or equal to second</li> <li><code>&lt;=</code> (Less than or equal to): Returns 1 if first operand is less than or equal to second</li> </ul> <pre><code>int a = 10, b = 20;\nint result1 = a &gt; b;  // 0 (false)\nint result2 = a &lt; b;  // 1 (true)\nint result3 = a == 10; // 1 (true)\n</code></pre>"},{"location":"sem1/c/u1-iii/#bitwise-operators","title":"Bitwise Operators","text":"<ul> <li><code>&amp;</code> (Bitwise AND): Performs bitwise AND operation</li> <li><code>|</code> (Bitwise OR): Performs bitwise OR operation</li> <li><code>^</code> (Bitwise XOR): Performs bitwise XOR operation</li> <li><code>~</code> (Bitwise NOT): Inverts all bits of the operand</li> <li><code>&lt;&lt;</code> (Left shift): Shifts bits to the left</li> <li><code>&gt;&gt;</code> (Right shift): Shifts bits to the right</li> </ul> <pre><code>int a = 5;  // 0101 in binary\nint b = 3;  // 0011 in binary\nint result1 = a &amp; b;  // 0001 (1)\nint result2 = a | b;  // 0111 (7)\nint result3 = a ^ b;  // 0110 (6)\nint result4 = ~a;     // -6 (two's complement)\nint result5 = a &lt;&lt; 1; // 1010 (10)\nint result6 = a &gt;&gt; 1; // 0010 (2)\n</code></pre>"},{"location":"sem1/c/u1-iii/#conditional-operator-ternary-operator","title":"Conditional Operator (Ternary Operator)","text":"<p>The conditional operator is the only ternary operator in C: <pre><code>condition ? expression1 : expression2\n</code></pre></p> <p>If <code>condition</code> is true (non-zero), <code>expression1</code> is evaluated; otherwise, <code>expression2</code> is evaluated.</p> <pre><code>int x = 10, y = 5;\nint max = (x &gt; y) ? x : y;  // max becomes 10\n</code></pre>"},{"location":"sem1/c/u1-iii/#order-of-precedence-of-operators","title":"Order of Precedence of Operators","text":"<p>Operator precedence determines the grouping of operations in expressions. Higher precedence operators are evaluated before lower precedence ones.</p> Precedence Operator Description Highest <code>()</code>, <code>[]</code>, <code>-&gt;</code>, <code>.</code> Function call, array subscript, member access <code>++</code>, <code>--</code>, <code>-</code>, <code>!</code>, <code>~</code>, <code>*</code>, <code>&amp;</code>, <code>sizeof</code> Unary operators, increment/decrement <code>*</code>, <code>/</code>, <code>%</code> Multiplicative operators <code>+</code>, <code>-</code> Additive operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code> Bitwise shifts <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> Relational operators <code>==</code>, <code>!=</code> Equality operators <code>&amp;</code> Bitwise AND <code>^</code> Bitwise XOR <code>|</code> Bitwise OR <code>&amp;&amp;</code> Logical AND <code>||</code> Logical OR <code>? :</code> Conditional operator <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&amp;=</code>, <code>^=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code> Assignment operators Lowest <code>,</code> Comma operator"},{"location":"sem1/c/u1-iii/#associativity-of-operators","title":"Associativity of Operators","text":"<p>When operators have the same precedence, associativity determines the order of evaluation.</p> <p>Left-to-right associativity (most operators have this):</p> <ul> <li>Arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>)</li> <li>Bitwise operators (<code>&amp;</code>, <code>^</code>, <code>|</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>)</li> <li>Relational operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>)</li> <li>Equality operators (<code>==</code>, <code>!=</code>)</li> <li>Assignment operators (<code>=</code>, <code>+=</code>, etc.)</li> </ul> <p>Right-to-left associativity:</p> <ul> <li>Unary operators (<code>!</code>, <code>~</code>, <code>++</code>, <code>--</code>, <code>*</code>, <code>&amp;</code>)</li> <li>Conditional operator (<code>? :</code>)</li> <li>Assignment operators Example of associativity: <pre><code>int a = 10, b = 20, c = 30;\nint result = a + b + c;  // Left-to-right: ((a + b) + c)\n\nint x = 5, y, z;\ny = z = x;  // Right-to-left: y = (z = x)\n</code></pre></li> </ul>"},{"location":"sem1/c/u1-iii/#typecasting","title":"Typecasting","text":"<p>Typecasting is the explicit conversion of a value from one data type to another.</p>"},{"location":"sem1/c/u1-iii/#implicit-type-conversion","title":"Implicit Type Conversion","text":"<p>When mixing data types in expressions, C performs implicit type promotion:</p> <ol> <li>If one operand is float, the other is converted to float</li> <li>If one operand is double, the other is converted to double</li> <li>If one operand is long, the other is converted to long</li> <li>Otherwise, both operands are converted to int</li> </ol> <pre><code>int a = 5;\nfloat b = 2.0;\nfloat result = a / b;  // Both operands promoted to float\n</code></pre>"},{"location":"sem1/c/u1-iii/#explicit-type-conversion","title":"Explicit Type Conversion","text":"<p>Syntax: <code>(target_type) expression</code></p> <pre><code>int a = 7;\nfloat b = 2.0;\nint result = (int) (a / b);  // 3.5 becomes 3 ( truncation )\n</code></pre> <p>Common casts:</p> <ul> <li>Cast to larger type (widening): preserves information, may add zeros</li> <li>Cast to smaller type (narrowing): potential loss of data</li> </ul>"},{"location":"sem1/c/u1-iii/#input-and-output-statements","title":"Input and Output Statements","text":""},{"location":"sem1/c/u1-iii/#getchar-getc-getch","title":"getchar(), getc(), getch()","text":"<ul> <li> <p>getchar(): Reads a single character from the standard input (usually keyboard).   <pre><code>int c = getchar();\n</code></pre></p> </li> <li> <p>getc(): Similar to getchar() but can read from any specified stream.   <pre><code>int c = getc(stdin);  // Equivalent to getchar()\nint c = getc(file);    // Read from a file\n</code></pre></p> </li> <li> <p>getch(): Non-standard function (commonly in  for Windows) that reads a character without displaying it on the screen (no echo).   <pre><code>int c = getch();\n</code></pre>"},{"location":"sem1/c/u1-iii/#putchar-putc-puts","title":"putchar(), putc(), puts()","text":"<ul> <li> <p>putchar(): Writes a single character to the standard output (usually the screen).   <pre><code>putchar('A');\n</code></pre></p> </li> <li> <p>putc(): Similar to putchar() but can write to any specified stream.   <pre><code>putc('A', stdout);  // Equivalent to putchar('A')\nputc('A', file);     // Write to a file\n</code></pre></p> </li> <li> <p>puts(): Writes a string to the standard output, followed by a newline character.   <pre><code>puts(\"Hello, World!\");\n</code></pre></p> </li> </ul>"},{"location":"sem1/c/u1-iii/#scanf-printf","title":"scanf(), printf()","text":"<ul> <li> <p>scanf(): Reads formatted input from the standard input.   <pre><code>int age;\nfloat salary;\nscanf(\"%d %f\", &amp;age, &amp;salary);\n</code></pre></p> </li> <li> <p>printf(): Writes formatted output to the standard output.   <pre><code>int age = 25;\nprintf(\"Age: %d\", age);\n</code></pre></p> </li> </ul> <p>Both functions use format specifiers to control how data is read or written.</p>"},{"location":"sem1/c/u1-iii/#format-specifiers","title":"Format Specifiers","text":"<p>Common format specifiers:</p> Specifier Data Type Description %d, %i int Signed decimal integer %u unsigned int Unsigned decimal integer %f, %F float Decimal floating point %e, %E float Scientific notation %g, %G float Uses %f or %e, whichever is shorter %c char Single character %s char* String of characters %p void* Pointer address %x, %X int Hexadecimal integer %o int Octal integer %% - Literal '%' character <p>Additional flags for format specifiers:</p> Flag Description - Left justify + Always print sign (+ or -) 0 Pad with zeros # Alternative form (for example, 0x prefix for hex) width Minimum number of characters to be printed .prec Precision for floats or maximum characters to be printed for strings <p>Examples: <pre><code>int age = 25;\nfloat height = 5.9;\nchar name[] = \"Alice\";\n\nprintf(\"Name: %10s\", name);      // Right-aligned, 10 chars wide\nprintf(\"Name: %-10s\", name);     // Left-aligned, 10 chars wide\nprintf(\"Height: %07.2f\", height); // Zero padded, 7 chars wide, 2 decimal places\nprintf(\"Age: %d (+/- %d)\", age, age); // Multiple format specifiers\n</code></pre></p>"},{"location":"sem1/c/u2/","title":"Control Structures in C","text":"<p>Control structures in C programming are used to control the flow of program execution. They determine how the statements in a program are executed based on certain conditions. The basic control structures in C can be categorized into three types: Sequence, Selection, and Iteration.</p>"},{"location":"sem1/c/u2/#sequence-structure","title":"Sequence Structure","text":"<p>The sequence structure is the simplest of all control structures. In this structure, statements are executed in the order they appear in the program. There is no skipping or repeating of statements.</p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int a = 5;\n    int b = 10;\n    int sum = a + b;  // Sequential execution\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#selection-structure","title":"Selection Structure","text":"<p>Selection structures allow the program to execute different blocks of code based on certain conditions. The selection structures in C include if-else statements and switch-case statements.</p>"},{"location":"sem1/c/u2/#conditional-statements","title":"Conditional Statements","text":""},{"location":"sem1/c/u2/#if-else-statement","title":"if-else statement","text":"<p>The if statement is used to execute a block of code only if a specified condition evaluates to true. The else statement specifies a block of code to be executed if the condition is false.</p> <p>Basic syntax: <pre><code>if (condition) {\n    // Code to execute if condition is true\n} else {\n    // Code to execute if condition is false\n}\n</code></pre></p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int num = 10;\n    if (num &gt; 0) {\n        printf(\"Number is positive\\n\");\n    } else {\n        printf(\"Number is not positive\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#if-else-if-else-ladder","title":"if-else if-else ladder","text":"<p>For multiple conditions, we can use the if-else if-else ladder:</p> <pre><code>if (condition1) {\n    // Code if condition1 is true\n} else if (condition2) {\n    // Code if condition2 is true\n} else {\n    // Code if all conditions are false\n}\n</code></pre>"},{"location":"sem1/c/u2/#nested-conditions","title":"Nested conditions","text":"<p>Conditions can be nested within other conditions:</p> <pre><code>if (condition1) {\n    if (condition2) {\n        // Code to execute if both conditions are true\n    } else {\n        // Code to execute if condition1 is true and condition2 is false\n    }\n} else {\n    // Code to execute if condition1 is false\n}\n</code></pre> <p>Example of nested conditions: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int num = 15;\n    if (num &gt; 0) {\n        if (num % 2 == 0) {\n            printf(\"Positive even number\\n\");\n        } else {\n            printf(\"Positive odd number\\n\");\n        }\n    } else {\n        printf(\"Not a positive number\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#switch-case-statement","title":"switch-case statement","text":"<p>The switch statement is used to perform different actions based on different conditions. It's often cleaner than multiple if-else statements when you have many conditions to check.</p> <p>Basic syntax: <pre><code>switch (expression) {\n    case constant1:\n        // Code to execute\n        break;\n    case constant2:\n        // Code to execute\n        break;\n    default:\n        // Code to execute if no case matches\n}\n</code></pre></p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int day = 3;\n    switch (day) {\n        case 1:\n            printf(\"Monday\\n\");\n            break;\n        case 2:\n            printf(\"Tuesday\\n\");\n            break;\n        case 3:\n            printf(\"Wednesday\\n\");\n            break;\n        default:\n            printf(\"Invalid day\\n\");\n    }\n    return 0;\n}\n</code></pre></p> <p>Important notes about switch-case:</p> <ul> <li>The expression in the switch must be an integer or character</li> <li>Each case must end with a break statement, otherwise execution will \"fall through\" to the next case</li> <li>The default case is optional and executes if no case matches</li> </ul>"},{"location":"sem1/c/u2/#iteration-structure","title":"Iteration Structure","text":"<p>Iteration structures (loops) allow a block of code to be executed repeatedly under certain conditions. The loop structures in C include for loop, while loop, and do-while loop.</p>"},{"location":"sem1/c/u2/#for-loop","title":"for loop","text":"<p>The for loop is used when you know how many times you want to execute a block of code.</p> <p>Basic syntax: <pre><code>for (initialization; condition; increment/decrement) {\n    // Code to execute in each iteration\n}\n</code></pre></p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    for (int i = 0; i &lt; 5; i++) {\n        printf(\"Iteration %d\\n\", i);\n    }\n    return 0;\n}\n</code></pre></p> <p>Using for loop for counting iterations: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int sum = 0;\n    for (int i = 1; i &lt;= 10; i++) {\n        sum += i;\n    }\n    printf(\"Sum of numbers 1 to 10: %d\\n\", sum);\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#while-loop","title":"while loop","text":"<p>The while loop is used when you want to execute a block of code as long as a condition is true. It's useful for indefinite iterations.</p> <p>Basic syntax: <pre><code>while (condition) {\n    // Code to execute while condition is true\n}\n</code></pre></p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int count = 0;\n    while (count &lt; 5) {\n        printf(\"Count: %d\\n\", count);\n        count++;\n    }\n    return 0;\n}\n</code></pre></p> <p>Using while loop for indefinite iterations: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int number;\n    while (1) {  // Infinite loop\n        printf(\"Enter a positive number (0 to exit): \");\n        scanf(\"%d\", &amp;number);\n\n        if (number == 0) {\n            break;\n        }\n\n        if (number &gt; 0) {\n            printf(\"You entered: %d\\n\", number);\n        } else {\n            printf(\"Please enter a positive number\\n\");\n        }\n    }\n    printf(\"Program ended.\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#do-while-loop","title":"do-while loop","text":"<p>The do-while loop is similar to the while loop, but it executes the code block at least once before checking the condition.</p> <p>Basic syntax: <pre><code>do {\n    // Code to execute\n} while (condition);\n</code></pre></p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int number = 0;\n    do {\n        printf(\"Enter a number (0 to exit): \");\n        scanf(\"%d\", &amp;number);\n        printf(\"You entered: %d\\n\", number);\n    } while (number != 0);\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#nested-loops","title":"Nested loops","text":"<p>Loops can be nested inside other loops. This is useful for handling multidimensional data or patterns.</p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    for (int i = 1; i &lt;= 3; i++) {\n        printf(\"Outer loop iteration %d:\\n\", i);\n        for (int j = 1; j &lt;= 3; j++) {\n            printf(\"  Inner loop iteration %d\\n\", j);\n        }\n    }\n    return 0;\n}\n</code></pre></p> <p>Pattern using nested loops: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    int rows = 5;\n    for (int i = 1; i &lt;= rows; i++) {\n        for (int j = 1; j &lt;= i; j++) {\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#break-and-continue-statements","title":"Break and Continue Statements","text":""},{"location":"sem1/c/u2/#break-statement","title":"break statement","text":"<p>The break statement is used to terminate the current loop or switch statement and transfer control to the statement immediately following the loop or switch.</p> <p>Example with loop: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    for (int i = 0; i &lt; 10; i++) {\n        if (i == 5) {\n            break;  // Exit loop when i equals 5\n        }\n        printf(\"%d \", i);\n    }\n    printf(\"\\nLoop terminated with break statement.\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#continue-statement","title":"continue statement","text":"<p>The continue statement is used to skip the current iteration of a loop and move to the next iteration.</p> <p>Example: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    for (int i = 0; i &lt; 10; i++) {\n        if (i % 2 == 0) {\n            continue;  // Skip even numbers\n        }\n        printf(\"%d \", i);\n    }\n    printf(\"\\nOnly odd numbers printed.\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#compare-break-and-continue","title":"Compare break and continue:","text":"<ul> <li>break: Exits the loop entirely</li> <li>continue: Skips the current iteration and continues with the next one</li> </ul> <p>Example demonstrating both: <pre><code>#include &lt;stdio.h&gt;\nint main() {\n    printf(\"Using break:\\n\");\n    for (int i = 0; i &lt; 5; i++) {\n        if (i == 2) {\n            break;\n        }\n        printf(\"%d \", i);\n    }\n\n    printf(\"\\n\\nUsing continue:\\n\");\n    for (int i = 0; i &lt; 5; i++) {\n        if (i == 2) {\n            continue;\n        }\n        printf(\"%d \", i);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#control-flow-diagrams","title":"Control Flow Diagrams","text":"<p>Control structures can be better understood through flow diagrams. Here's a simple representation of decision and loop structures:</p> <p>[insert flowchart decision and loop control structures here]</p>"},{"location":"sem1/c/u2/#common-pitfalls-and-best-practices","title":"Common Pitfalls and Best Practices","text":"<ol> <li>Infinite loops: Always ensure loop conditions can be met to avoid infinite loops</li> <li>Missing semicolons: In loops and conditionals, missing a semicolon can lead to syntax errors</li> <li>Off-by-one errors: Be careful with comparison operators (&lt;, &lt;=, &gt;, &gt;=) to avoid executing one more or one less iteration than intended</li> <li>Uninitialized variables: Using uninitialized variables in loop conditions can lead to unpredictable behavior</li> <li>Break vs. continue: Understand the difference to control loop execution appropriately</li> </ol>"},{"location":"sem1/c/u2/#advanced-topics","title":"Advanced Topics","text":""},{"location":"sem1/c/u2/#loop-optimization","title":"Loop Optimization","text":"<p>For performance-critical applications, consider:</p> <ul> <li>Minimizing operations inside loops</li> <li>Using appropriate loop constructs</li> <li>Avoiding unnecessary computations inside loops</li> </ul> <p>Example of optimization: <pre><code>// Less optimized - calculation inside loop\nint sum1 = 0;\nfor (int i = 0; i &lt; 1000; i++) {\n    sum1 += i * 2 + 5;\n}\n\n// More optimized - calculation outside loop\nint multiplier = 2;\nint addend = 5;\nint sum2 = 0;\nfor (int i = 0; i &lt; 1000; i++) {\n    sum2 += i * multiplier + addend;\n}\n</code></pre></p>"},{"location":"sem1/c/u2/#loop-unrolling","title":"Loop Unrolling","text":"<p>Loop unrolling is a technique where the number of loop iterations is decreased by increasing the number of operations performed in each iteration. This can improve performance by reducing loop overhead.</p> <p>Example: <pre><code>// Standard loop\nfor (int i = 0; i &lt; 10; i++) {\n    process_array[i] = i * 2;\n}\n\n// Unrolled loop\nfor (int i = 0; i &lt; 10; i += 2) {\n    process_array[i] = i * 2;\n    process_array[i+1] = (i+1) * 2;\n}\n</code></pre></p>"},{"location":"sem1/c/u3/","title":"Unit 3","text":""},{"location":"sem1/c/u3/#arrays-in-c","title":"Arrays in C","text":""},{"location":"sem1/c/u3/#what-are-arrays","title":"What are Arrays?","text":"<p>Arrays are a collection of elements of the same data type stored in contiguous memory locations. They provide a way to store multiple values of the same type under a single variable name, using an index to access each element.</p>"},{"location":"sem1/c/u3/#declaration-of-arrays","title":"Declaration of Arrays","text":"<p>The general syntax for declaring an array in C is:</p> <pre><code>data_type array_name[array_size];\n</code></pre> <p>Where:</p> <ul> <li><code>data_type</code> specifies the type of elements the array will hold (e.g., int, float, char)</li> <li><code>array_name</code> is the name of the array</li> <li><code>array_size</code> indicates the number of elements the array can hold</li> </ul> <p>Examples: <pre><code>int numbers[10];      // An array of 10 integers\nfloat prices[5];      // An array of 5 floating-point numbers\nchar letters[26];     // An array of 26 characters\n</code></pre></p>"},{"location":"sem1/c/u3/#initialization-of-arrays","title":"Initialization of Arrays","text":"<p>Arrays can be initialized at the time of declaration in several ways:</p> <ol> <li> <p>Initialization with explicit values: <pre><code>int marks[5] = {90, 85, 95, 88, 92};\n</code></pre></p> </li> <li> <p>Partial initialization: <pre><code>int numbers[10] = {1, 2, 3};  // Remaining elements will be set to 0\n</code></pre></p> </li> <li> <p>Initialization without size (compiler determines size): <pre><code>int primes[] = {2, 3, 5, 7, 11};  // Array size is 5\n</code></pre></p> </li> <li> <p>Initialization using loops: <pre><code>int squares[10];\nfor(int i = 0; i &lt; 10; i++) {\n    squares[i] = i * i;\n}\n</code></pre></p> </li> </ol>"},{"location":"sem1/c/u3/#accessing-array-elements","title":"Accessing Array Elements","text":"<p>Array elements are accessed using their index number, which starts from 0 in C. The syntax is:</p> <pre><code>array_name[index];\n</code></pre> <p>Examples: <pre><code>int scores[3] = {95, 88, 76};\nprintf(\"%d\", scores[0]);  // Outputs 95\nscores[2] = 90; // Changes the third element to 90\n</code></pre></p> <p>[insert image on array index visualization here]</p> <p>Important Notes:</p> <ul> <li>Array indices in C start from 0, not 1</li> <li>The valid index range is 0 to (size-1)</li> <li>Accessing an out-of-bounds index leads to undefined behavior</li> <li>The compiler does not check array bounds automatically</li> </ul>"},{"location":"sem1/c/u3/#multidimensional-arrays","title":"Multidimensional Arrays","text":""},{"location":"sem1/c/u3/#what-are-multidimensional-arrays","title":"What are Multidimensional Arrays?","text":"<p>Multidimensional arrays are arrays of arrays, allowing you to create tables or matrices of data. The most common type is the two-dimensional array (2D array), which represents a table with rows and columns.</p>"},{"location":"sem1/c/u3/#declaration-of-multidimensional-arrays","title":"Declaration of Multidimensional Arrays","text":"<p>The general syntax for declaring a multidimensional array is:</p> <pre><code>data_type array_name[size1][size2]...[sizeN];\n</code></pre> <p>For a 2D array: <pre><code>int matrix[3][4];  // 3 rows, 4 columns\nfloat table[5][5];  // 5x5 matrix\n</code></pre></p>"},{"location":"sem1/c/u3/#initialization-of-multidimensional-arrays","title":"Initialization of Multidimensional Arrays","text":"<p>2D arrays can be initialized in several ways:</p> <ol> <li> <p>Row-wise initialization: <pre><code>int matrix[2][3] = {\n    {1, 2, 3},\n    {4, 5, 6}\n};\n</code></pre></p> </li> <li> <p>Linear initialization (in memory order): <pre><code>int matrix[2][3] = {1, 2, 3, 4, 5, 6};\n</code></pre></p> </li> <li> <p>Partial initialization: <pre><code>int matrix[2][3] = {\n    {1, 2},\n    {4}\n};  // Remaining elements are initialized to 0\n</code></pre></p> </li> </ol>"},{"location":"sem1/c/u3/#accessing-elements-in-multidimensional-arrays","title":"Accessing Elements in Multidimensional Arrays","text":"<p>Elements are accessed using multiple indices:</p> <pre><code>matrix[1][2] = 10;  // Accesses element in row 1, column 2\nprintf(\"%d\", matrix[0][1]);  // Outputs element in row 0, column 1\n</code></pre> <p>[insert image on 2D array visualization here]</p>"},{"location":"sem1/c/u3/#more-than-two-dimensions","title":"More Than Two Dimensions","text":"<p>C supports arrays with any number of dimensions:</p> <pre><code>int cube[3][4][5];  // 3D array\nint hypercube[3][4][5][6];  // 4D array\n</code></pre>"},{"location":"sem1/c/u3/#strings-in-c","title":"Strings in C","text":""},{"location":"sem1/c/u3/#what-are-strings-in-c","title":"What are Strings in C?","text":"<p>In C, a string is a sequence of characters terminated by a null character ('\\0'). Unlike some other languages, C does not have a built-in string type. Instead, strings are represented as arrays of characters.</p>"},{"location":"sem1/c/u3/#declaration-and-initialization-of-strings","title":"Declaration and Initialization of Strings","text":"<p>Strings can be declared and initialized in several ways:</p> <ol> <li> <p>As a character array: <pre><code>char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\n</code></pre></p> </li> <li> <p>Using string literal: <pre><code>char greeting[] = \"Hello\";  // Size is 6 (including null terminator)\n</code></pre></p> </li> <li> <p>declaration with specific size: <pre><code>char name[50] = \"John Doe\";  // Can hold up to 49 characters + null terminator\n</code></pre></p> </li> </ol> <p>[insert image on string null terminator here]</p>"},{"location":"sem1/c/u3/#string-input-and-output-in-c","title":"String Input and Output in C","text":"<p>C provides several functions for string input and output in the standard library <code>&lt;string.h&gt;</code> and <code>&lt;stdio.h&gt;</code>.</p>"},{"location":"sem1/c/u3/#string-output-functions","title":"String Output Functions","text":"<ol> <li> <p><code>puts()</code> function: <pre><code>char message[] = \"Hello, World!\";\nputs(message);  // Outputs the string and adds a newline\n</code></pre></p> </li> <li> <p><code>printf()</code> function with <code>%s</code> format specifier: <pre><code>char name[] = \"Alice\";\nprintf(\"Hello, %s!\", name);\n</code></pre></p> </li> <li> <p><code>fputs()</code> function for file output: <pre><code>fputs(\"Output to file\", stdout);\n</code></pre></p> </li> </ol>"},{"location":"sem1/c/u3/#string-input-functions","title":"String Input Functions","text":"<ol> <li> <p><code>gets()</code> function (deprecated - dangerous): <pre><code>char buffer[100];\ngets(buffer);  // Reads until newline, but doesn't check buffer size\n</code></pre></p> </li> <li> <p><code>fgets()</code> function (safer alternative): <pre><code>char buffer[100];\nfgets(buffer, 100, stdin);  // Reads up to 99 characters + null terminator\n</code></pre></p> </li> <li> <p><code>scanf()</code> function with <code>%s</code>: <pre><code>char name[50];\nscanf(\"%s\", name);  // Stops reading at whitespace\n</code></pre></p> </li> <li> <p><code>gets()</code> alternative with length limitation: <pre><code>char input[100];\nint i = 0;\nwhile(i &lt; 99 &amp;&amp; (input[i] = getchar()) != '\\n') {\n    i++;\n}\ninput[i] = '\\0';\n</code></pre></p> </li> </ol>"},{"location":"sem1/c/u3/#important-string-functions","title":"Important String Functions","text":"<p>The <code>&lt;string.h&gt;</code> header provides many useful string functions:</p> <ul> <li><code>strlen()</code>: Returns the length of a string</li> <li><code>strcpy()</code>: Copies one string to another</li> <li><code>strcat()</code>: Concatenates two strings</li> <li><code>strcmp()</code>: Compares two strings</li> <li><code>strncpy()</code>: Copy with maximum length</li> <li><code>strncat()</code>: Concatenate with maximum length</li> <li><code>sprintf()</code>: Formatted string output</li> </ul> <p>Example usage: <pre><code>#include &lt;string.h&gt;\nchar str1[50] = \"Hello\";\nchar str2[50] = \"World\";\nprintf(\"Length of str1: %zu\\n\", strlen(str1));\nstrcpy(str2, str1);  // Copy str1 to str2\nstrcat(str1, \" C\");  // \"Hello C\"\nint cmp = strcmp(str1, str2);  // Non-zero if strings are different\n</code></pre></p>"},{"location":"sem1/c/u3/#string-manipulation-best-practices","title":"String Manipulation Best Practices","text":"<ol> <li>Always ensure strings have space for the null terminator</li> <li>Be careful about buffer overflows when copying strings</li> <li>Check string length before copying to destination buffer</li> <li>Initialize strings properly to avoid undefined behavior</li> <li>Consider using safer string functions like <code>strncpy()</code> and <code>strncat()</code></li> </ol> <pre><code>graph TD\n    A[Arrays] --&gt; B[1D Arrays]\n    A --&gt; C[2D Arrays]\n    A --&gt; D[Multidimensional Arrays]\n\n    B --&gt; B1[Declaration]\n    B --&gt; B2[Initialization]\n    B --&gt; B3[Accessing Elements]\n\n    C --&gt; C1[Declaration]\n    C --&gt; C2[Initialization]\n    C --&gt; C3[Accessing Elements]\n\n    D --&gt; D1[3D Arrays]\n    D --&gt; D2[4D Arrays]\n    D --&gt; D3[Higher Dimensions]\n\n    E[Strings] --&gt; E1[Declaration]\n    E --&gt; E2[Initialization]\n    E --&gt; E3[Input/Output]\n    E --&gt; E4[String Functions]\n</code></pre> <pre><code>graph LR\n    F[String Representation] --&gt; G[Character Array]\n    F --&gt; H[Null Terminator]\n    F --&gt; I[Fixed Size]\n\n    I --&gt; J[Static Allocation]\n    I --&gt; K[Dynamic Allocation]\n\n    G --&gt; L[ASCII Values]\n    G --&gt; M[Memory Layout]\n</code></pre>"},{"location":"sem1/c/u4/","title":"Introduction to Pointers","text":""},{"location":"sem1/c/u4/#pointer-declaration-and-initialization","title":"Pointer Declaration and Initialization","text":"<p>A pointer is a variable that stores the memory address of another variable. Pointers are powerful features of C that provide direct memory access and efficient memory management.</p>"},{"location":"sem1/c/u4/#declaration","title":"Declaration","text":"<p>Pointers are declared using the asterisk (*) symbol:</p> <pre><code>int *ptr; // Declaration of an integer pointer\nfloat *fptr;     // Declaration of a float pointer\nchar *cptr;      // Declaration of a character pointer\n</code></pre>"},{"location":"sem1/c/u4/#initialization","title":"Initialization","text":"<p>Pointers must be initialized before use. They can be initialized to contain the address of a variable:</p> <pre><code>int num = 10;\nint *ptr = &amp;num; // ptr now contains the address of num\n</code></pre>"},{"location":"sem1/c/u4/#key-points","title":"Key Points","text":"<ul> <li>The data type of the pointer must match the data type of the variable it points to.</li> <li>The address-of operator (&amp;) returns the memory address of a variable.</li> <li>The value-of operator (*) returns the value at the memory address stored in the pointer.</li> </ul> <p>Example:</p> <pre><code>int num = 10;\nint *ptr = &amp;num;\n\nprintf(\"Value of num: %d\\n\", num);      // Output: Value of num: 10\nprintf(\"Address of num: %p\\n\", &amp;num);  // Output: Address of num: (memory address)\nprintf(\"Value of ptr: %p\\n\", ptr);      // Output: Value of ptr: (same memory address)\nprintf(\"Value at ptr: %d\\n\", *ptr);     // Output: Value at ptr: 10\n</code></pre>"},{"location":"sem1/c/u4/#pointers-and-addresses","title":"Pointers and Addresses","text":""},{"location":"sem1/c/u4/#memory-representation","title":"Memory Representation","text":"<p>Every variable in C is stored at a specific memory location, which has a unique address.</p> <p>Example:</p> <pre><code>int x = 10;\nint y = 20;\nint *ptr = &amp;x;\n\nprintf(\"Address of x: %p\\n\", &amp;x);\nprintf(\"Address of y: %p\\n\", &amp;y);\nprintf(\"Address of ptr: %p\\n\", &amp;ptr);\nprintf(\"Value stored at ptr: %p\\n\", ptr);\nprintf(\"Value at the address stored in ptr: %d\\n\", *ptr);\n</code></pre>"},{"location":"sem1/c/u4/#pointer-arithmetic","title":"Pointer Arithmetic","text":"<p>You can perform arithmetic operations on pointers:</p> <pre><code>int arr[] = {10, 20, 30, 40, 50};\nint *ptr = arr;\n\nprintf(\"%d\\n\", *ptr);       // Output: 10\nprintf(\"%d\\n\", *(ptr + 1));  // Output: 20\nprintf(\"%d\\n\", *(ptr + 2));  // Output: 30\n</code></pre> <p>[insert image on memory layout of variables and pointers here]</p>"},{"location":"sem1/c/u4/#pointers-and-arrays","title":"Pointers and Arrays","text":"<p>In C, array names are essentially pointers to the first element of the array.</p>"},{"location":"sem1/c/u4/#relationship-between-arrays-and-pointers","title":"Relationship Between Arrays and Pointers","text":"<pre><code>int arr[] = {10, 20, 30, 40, 50};\nint *ptr = arr;\n\n// These are equivalent\nprintf(\"%d\\n\", arr[0]);    // Output: 10\nprintf(\"%d\\n\", *(arr));    // Output: 10\nprintf(\"%d\\n\", *ptr);      // Output: 10\n\n// These are also equivalent\nprintf(\"%d\\n\", arr[2]);    // Output: 30\nprintf(\"%d\\n\", *(arr + 2)); // Output: 30\nprintf(\"%d\\n\", *(ptr + 2)); // Output: 30\n</code></pre>"},{"location":"sem1/c/u4/#array-traversal-using-pointers","title":"Array Traversal Using Pointers","text":"<pre><code>int arr[] = {10, 20, 30, 40, 50};\nint *ptr = arr;\nint size = sizeof(arr) / sizeof(arr[0]);\n\nfor (int i = 0; i &lt; size; i++) {\n    printf(\"%d \", *ptr);\n    ptr++; // Move to the next element\n}\n\n// Output: 10 20 30 40 50\n</code></pre>"},{"location":"sem1/c/u4/#important-notes","title":"Important Notes","text":"<ul> <li>When you increment a pointer, it moves to the next memory location appropriate for its data type.</li> <li>For integer pointers on most systems, ptr++ increases the address by 4 bytes (size of an int).</li> <li>For character pointers, ptr++ increases the address by 1 byte.</li> </ul> <p>[insert image on array and pointer relationship in memory here]</p>"},{"location":"sem1/c/u4/#basic-concept-of-dynamic-memory-allocation","title":"Basic Concept of Dynamic Memory Allocation","text":"<p>Dynamic memory allocation allows you to allocate memory at runtime rather than compile time. This is useful when you don't know the exact memory requirements until the program is running.</p>"},{"location":"sem1/c/u4/#why-use-dynamic-memory-allocation","title":"Why Use Dynamic Memory Allocation?","text":"<ul> <li>Allocate memory as needed during runtime</li> <li>Allocate exactly the amount of memory required</li> <li>Free memory when no longer needed</li> <li>Create data structures like linked lists, trees, etc.</li> </ul>"},{"location":"sem1/c/u4/#memory-allocation-functions","title":"Memory Allocation Functions","text":"<p>The standard library provides several functions for dynamic memory allocation:</p> <ol> <li><code>malloc()</code> - Allocates a block of memory of a specified size</li> <li><code>calloc()</code> - Allocates and initializes a block of memory to zero</li> <li><code>realloc()</code> - Resizes a previously allocated block of memory</li> <li><code>free()</code> - Deallocates memory previously allocated</li> </ol>"},{"location":"sem1/c/u4/#malloc-function","title":"malloc() Function","text":""},{"location":"sem1/c/u4/#syntax","title":"Syntax","text":"<pre><code>void *malloc(size_t size);\n</code></pre>"},{"location":"sem1/c/u4/#description","title":"Description","text":"<ul> <li>Allocates a block of memory of <code>size</code> bytes</li> <li>Returns a pointer to the beginning of the allocated memory block</li> <li>If allocation fails, returns NULL</li> <li>The memory contains garbage values (not initialized)</li> </ul>"},{"location":"sem1/c/u4/#example","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    int *ptr;\n    int n;\n\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &amp;n);\n\n    ptr = (int *)malloc(n * sizeof(int));\n\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    for (int i =  \u037e0; i &lt; n; i++) {\n        ptr[i] = i + 1;\n    }\n\n    printf(\"You entered: \");\n    for (int i = 0; i &lt; n; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n\n    free(ptr); // Free allocated memory\n    return 0;\n}\n</code></pre>"},{"location":"sem1/c/u4/#calloc-function","title":"calloc() Function","text":""},{"location":"sem1/c/u4/#syntax_1","title":"Syntax","text":"<pre><code>void *calloc(size_t num, size_t size);\n</code></pre>"},{"location":"sem1/c/u4/#description_1","title":"Description","text":"<ul> <li>Allocates memory for an array of <code>num</code> elements, each of <code>size</code> bytes</li> <li>Initializes all bits to zero</li> <li>Returns a pointer to the beginning of the allocated memory block</li> <li>If allocation fails, returns NULL</li> </ul>"},{"location":"sem1/c/u4/#example_1","title":"Example","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    int *ptr;\n    int n;\n\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &amp;n);\n\n    ptr = (int *)calloc(n, sizeof(int));\n\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    printf(\"Values after calloc (initialized to zero):\\n\");\n    for (int i = 0; i &lt; 10; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n\n    free(ptr); // Free allocated memory\n    return 0;\n}\n</code></pre>"},{"location":"sem1/c/u4/#difference-between-malloc-and-calloc","title":"Difference Between malloc() and calloc()","text":"Feature malloc() calloc() Syntax malloc(size) calloc(num_elements, size_of_each) Initialization Contains garbage values Initialized to zero Parameters One parameter (size) Two parameters (number of elements, size of each) Speed Faster Slightly slower (initializes memory)"},{"location":"sem1/c/u4/#introduction-to-functions","title":"Introduction to Functions","text":""},{"location":"sem1/c/u4/#what-is-a-function","title":"What is a Function?","text":"<p>A function is a self-contained block of statements that performs a specific task. Functions help in modular programming, code reusability, and better organization.</p>"},{"location":"sem1/c/u4/#advantages-of-functions","title":"Advantages of Functions","text":"<ul> <li>Code reusability</li> <li>Modularity</li> <li>Easier debugging and maintenance</li> <li>Better readability and organization</li> <li>Reduced redundancy</li> </ul>"},{"location":"sem1/c/u4/#function-declaration-and-definition","title":"Function Declaration and Definition","text":""},{"location":"sem1/c/u4/#function-declaration-prototype","title":"Function Declaration (Prototype)","text":"<p>A function declaration tells the compiler about the function name, return type, and parameters without providing the actual implementation.</p> <p>Syntax:</p> <pre><code>return_type function_name(parameter_list);\n</code></pre> <p>Example:</p> <pre><code>int add(int a, int b);  // Function declaration without definition\nfloat calculateSum(float arr[], int size);  // Another example\n</code></pre>"},{"location":"sem1/c/u4/#function-definition","title":"Function Definition","text":"<p>A function definition provides the actual implementation of the function.</p> <p>Syntax:</p> <pre><code>return_type function_name(parameter_list) {\n    // Function body\n    return return_value;\n}\n</code></pre> <p>Example:</p> <pre><code>int add(int a, int b) {\n    int sum = a + b;\n    return sum;\n}\n\n// Alternative implementation\nint add(int a, int b) {\n    return a + b;\n}\n</code></pre>"},{"location":"sem1/c/u4/#return-types-of-function","title":"Return Types of Function","text":"<p>The return type specifies the type of value that the function will return to the calling function.</p>"},{"location":"sem1/c/u4/#basic-return-types","title":"Basic Return Types","text":"<ol> <li><code>int</code> - Returns an integer value</li> <li><code>float</code> - Returns a floating-point value</li> <li><code>double</code> - Returns a double-precision floating-point value</li> <li><code>char</code> - Returns a character</li> <li><code>void</code> - Indicates that the function does not return any value</li> </ol>"},{"location":"sem1/c/u4/#examples","title":"Examples","text":"<pre><code>// Returning an integer\nint getSquare(int num) {\n    return num * num;\n}\n\n// Returning a float\nfloat getAverage(int arr[], int size) {\n    int sum = 0;\n    for (int i = 0; i &lt; size; i++) {\n        sum += arr[i];\n    }\n    return (float)sum / size;\n}\n\n// Void function (no return value)\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n</code></pre>"},{"location":"sem1/c/u4/#function-arguments","title":"Function Arguments","text":""},{"location":"sem1/c/u4/#types-of-function-arguments","title":"Types of Function Arguments","text":"<ol> <li>Formal Arguments: Variables declared in the function header.</li> <li>Actual Arguments: Values passed to the function during the function call.</li> </ol>"},{"location":"sem1/c/u4/#pass-by-value","title":"Pass by Value","text":"<p>In pass by value, the actual value of the argument is copied to the formal parameter. Changes made to the formal parameter inside the function do not affect the actual argument.</p> <p>Example:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid swapByValue(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n    printf(\"Inside function: a = %d, b = %d\\n\", a, b);\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swapByValue(x, y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}\n\n// Output:\n// Before swap: x = 5, y = 10\n// Inside function: a = 10, b = 5\n// After swap: x = 5, y = 10\n</code></pre>"},{"location":"sem1/c/u4/#pass-by-reference-using-pointers","title":"Pass by Reference Using Pointers","text":"<p>In pass by reference, the address of the actual argument is passed to the formal parameter, which is a pointer. Changes made to the value at that address inside the function affect the actual argument.</p> <p>Example:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid swapByReference(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n    printf(\"Inside function: a = %d, b = %d\\n\", *a, *b);\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swapByReference(&amp;x, &amp;y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}\n\n// Output:\n// Before swap: x = 5, y = 10\n// Inside function: a = 10, b = 5\n// After swap: x = 10, y = 5\n</code></pre>"},{"location":"sem1/c/u4/#function-calling-call-by-value-vs-call-by-reference","title":"Function Calling \u2013 Call by Value vs Call by Reference","text":""},{"location":"sem1/c/u4/#call-by-value","title":"Call by Value","text":"<ul> <li>The actual value is passed to the function</li> <li>Changes made to formal parameters do not affect actual arguments</li> <li>Original values remain safe</li> <li>Implemented in C by default</li> </ul> <p>Example:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid modifyValue(int num) {\n    num = num * 2;\n    printf(\"Inside function: num = %d\\n\", num);\n}\n\nint main() {\n    int value = 10;\n    printf(\"Before function call: value = %d\\n\", value);\n    modifyValue(value);\n    printf(\"After function call: value = %d\\n\", value);\n    return 0;\n}\n\n// Output:\n// Before function call: value = 10\n// Inside function: num = 20\n// After function call: value = 10\n</code></pre>"},{"location":"sem1/c/u4/#call-by-reference","title":"Call by Reference","text":"<ul> <li>The address of the actual argument is passed</li> <li>Changes made to formal parameters affect actual arguments</li> <li>Used to modify original values or to avoid copying large data</li> <li>Implemented using pointers in C</li> </ul> <p>Example:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid modifyValueByReference(int *num) {\n    *num = *num * 2;\n    printf(\"Inside function: num = %d\\n\", *num);\n}\n\nint main() {\n    int value = 10;\n    printf(\"Before function call: value = %d\\n\", value);\n    modifyValueByReference(&amp;value);\n    printf(\"After function call: value = %d\\n\", value);\n    return 0;\n}\n\n// Output:\n// Before function call: value = 10\n// Inside function: num = 20\n// After function call: value = 20\n</code></pre>"},{"location":"sem1/c/u4/#passing-an-array-as-argument-to-a-function","title":"Passing an Array as Argument to a Function","text":"<p>Arrays are always passed to functions by reference in C. When we pass an array, we're actually passing a pointer to the first element of the array.</p>"},{"location":"sem1/c/u4/#methods-to-pass-arrays-to-functions","title":"Methods to Pass Arrays to Functions","text":"<ol> <li>Pointer notation</li> <li>Array notation</li> <li>Size of array as a separate parameter</li> </ol>"},{"location":"sem1/c/u4/#example-pointer-notation","title":"Example: Pointer Notation","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    printArray(arr, size);\n    return 0;\n}\n</code></pre>"},{"location":"sem1/c/u4/#example-array-notation","title":"Example: Array Notation","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid printArrayArr(int arr[], int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    printArrayArr(arr, size);\n    return 0;\n}\n</code></pre>"},{"location":"sem1/c/u4/#modifying-array-elements-in-a-function","title":"Modifying Array Elements in a Function","text":"<pre><code>#include &lt;stdio.h&gt;\n\nvoid modifyArray(int *arr, int size) {\n    for (int i = 0; i &lt; size; i++) {\n        arr[i] = arr[i] * 2;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Before modification: \");\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    modifyArray(arr, size);\n\n    printf(\"After modification: \");\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n\n// Output:\n// Before modification: 1 2 3 4 5\n// After modification: 2 4 6 8 10\n</code></pre>"},{"location":"sem1/c/u4/#basic-concept-of-recursion","title":"Basic Concept of Recursion","text":""},{"location":"sem1/c/u4/#what-is-recursion","title":"What is Recursion?","text":"<p>Recursion is a technique in which a function calls itself directly or indirectly in order to solve a problem. The function that calls itself is called a recursive function.</p>"},{"location":"sem1/c/u4/#two-main-components-of-recursion","title":"Two Main Components of Recursion","text":"<ol> <li>Base Case: The condition that stops the recursion. Without a base case, recursion would continue indefinitely, leading to a stack overflow.</li> <li>Recursive Case: The part where the function calls itself with a modified argument, moving toward the base case.</li> </ol>"},{"location":"sem1/c/u4/#simple-example-factorial-calculation","title":"Simple Example: Factorial Calculation","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// Recursive function to calculate factorial\nint factorial(int n) {\n    // Base case\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    // Recursive case\n    else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;\n}\n\n// Output: Factorial of 5 is 120\n</code></pre>"},{"location":"sem1/c/u4/#recursion-vs-iteration","title":"Recursion vs Iteration","text":"Factor Recursion Iteration Implementation Uses function calls Uses loops (for, while) Time Complexity Can be less efficient due to function call overhead Generally more efficient Space Complexity Higher (uses call stack) Lower Code Readability Often simpler for complex problems Can become complex for some problems Risk of Errors Stack overflow if not properly handled Limited by loop bounds"},{"location":"sem1/c/u4/#another-example-fibonacci-sequence","title":"Another Example: Fibonacci Sequence","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// Recursive function to calculate Fibonacci\nint fibonacci(int n) {\n    // Base cases\n    if (n == 0) {\n        return 0;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    // Recursive case\n    else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n\nint main() {\n    int terms = 10;\n    printf(\"Fibonacci sequence up to %d terms:\\n\", terms);\n\n    for (int i = 0; i &lt; terms; i++) {\n        printf(\"%d \", fibonacci(i));\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n\n// Output: Fibonacci sequence up to 10 terms:\n// 0 1 1 2 3 5 8 13 21 34\n</code></pre>"},{"location":"sem1/c/u4/#tail-recursion","title":"Tail Recursion","text":"<p>A special form of recursion where the recursive call is the last operation in the function. Some compilers can optimize tail-recursive functions to avoid stack growth.</p> <p>Example:</p> <pre><code>#include &lt;stdio.h&gt;\n\n// Tail-recursive function for factorial\nint factorialTail(int n, int accumulator) {\n    if (n == 0 || n == 1) {\n        return accumulator;\n    }\n    else {\n        return factorialTail(n - 1, n * accumulator);\n    }\n}\n\n// Wrapper function\nint factorial(int n) {\n    return factorialTail(n, 1);\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;\n}\n</code></pre> <p>[insert image on recursion call stack visualization here]</p>"},{"location":"sem1/fundamentals/syllabus/","title":"Syllabus","text":""},{"location":"sem1/fundamentals/syllabus/#credits","title":"Credits","text":"<p>Theory credit: 3</p> <p>Practical credit: 1</p>"},{"location":"sem1/fundamentals/syllabus/#unit-1-introduction-to-computers-and-number-systems","title":"UNIT 1: Introduction to Computers and Number Systems","text":"<p>(7 Lectures)</p> <ul> <li>Number Systems: Decimal, Binary, Octal, and Hexadecimal</li> <li>Conversion among number systems</li> <li>Computer Fundamentals:<ul> <li>Definition and basic components of a computer</li> <li>Bus architecture</li> <li>Evolution and Generations of computers</li> <li>Classification of computers</li> </ul> </li> <li>Data Representation: ASCII, Unicode</li> </ul>"},{"location":"sem1/fundamentals/syllabus/#unit-2-memory-and-storage-devices","title":"UNIT 2: Memory and Storage Devices","text":"<p>(8 Lectures)</p> <ul> <li>Memory: Memory hierarchy, registers (general purpose and special purpose)</li> <li>Types of Memory:<ul> <li>Primary and Secondary memory</li> <li>Volatile and Non-volatile memory</li> <li>Semiconductor memory: SRAM and DRAM</li> <li>Read-Only Memory (ROM)</li> </ul> </li> <li>Storage Devices:<ul> <li>Magnetic storage devices</li> <li>Optical storage devices</li> <li>Solid-state devices (Flash memory)</li> </ul> </li> <li>Storage evaluation criteria</li> </ul>"},{"location":"sem1/fundamentals/syllabus/#unit-3-input-devices","title":"UNIT 3: Input Devices","text":"<p>(7 Lectures)</p> <ul> <li>Keyboards: Keyboard layouts</li> <li>Pointing Devices: Mechanical and optical mouse, touchpad, trackball, joystick, digitizer</li> <li>Scanners: Hand-held and flat-bed scanners</li> <li>Readers: OMR, OCR, MICR</li> <li>Other Devices: Digital camera, digital microphone</li> </ul>"},{"location":"sem1/fundamentals/syllabus/#unit-4-output-devices","title":"UNIT 4: Output Devices","text":"<p>(7 Lectures)</p> <ul> <li>Monitors: LCD, LED, Plasma</li> <li>Printers:<ul> <li>Impact vs. Non-impact printers</li> <li>Dot-matrix, Inkjet, Laser, and Thermal printers</li> </ul> </li> <li>Other Devices: Plotters, voice output systems, projectors</li> </ul>"},{"location":"sem1/fundamentals/syllabus/#unit-5-programming-languages-and-software","title":"UNIT 5: Programming Languages and Software","text":"<p>(11 Lectures)</p> <ul> <li>CPU and Instruction Cycle: Control unit, computer instruction set, instruction execution life cycle</li> <li>Programming Concepts:<ul> <li>Program, Algorithm, Pseudocode, Flowchart</li> </ul> </li> <li>Programming Languages:<ul> <li>Machine Level Language</li> <li>Assembly Language (Low-Level)</li> <li>High-Level Language</li> </ul> </li> <li>Language Translators: Assembler, Compiler, Interpreter</li> <li>Flowchart Examples:<ul> <li>Find the maximum of n numbers</li> <li>Find the minimum of n numbers</li> <li>Find the average of n numbers</li> <li>Display first n terms of the Fibonacci series</li> <li>Check if a number is prime</li> </ul> </li> <li>Software:<ul> <li>Application Software (with examples)</li> <li>System Software (with examples)</li> <li>Operating System, Device Driver</li> <li>Open-Source vs. Proprietary Software (with examples)</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/syllabus/#unit-6-computer-network-and-internet","title":"UNIT 6: Computer Network and Internet","text":"<p>(5 Lectures)</p> <ul> <li>Networking: Computer networks, Network topologies (LAN and WAN)</li> <li>Internet: ISP, services over the internet</li> <li>World Wide Web (WWW): Web server, web browser</li> <li>Web Technologies:<ul> <li>HTML Tags: <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;title&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;h1&gt;&lt;h6&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;center&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;th&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code></li> <li>Introduction to CSS</li> </ul> </li> <li>Internet Protocols &amp; Concepts: Domain name, URL, DNS, E-mail, telnet, FTP</li> </ul>"},{"location":"sem1/fundamentals/unit-1/","title":"Unit 1","text":""},{"location":"sem1/fundamentals/unit-1/#number-systems","title":"Number Systems","text":""},{"location":"sem1/fundamentals/unit-1/#introduction-to-number-systems","title":"Introduction to Number Systems","text":"<p>A number system is a systematic way to represent numbers with symbolic characters and uses a base value to conveniently group numbers in a compact form. The base of a number system is also called its radix. It is the total number of distinct symbols or digits used to represent numbers in that system.</p> <p>In any number system, the value of a digit depends on its position within the number. This is known as positional notation. The value is determined by the digit itself, its position in the number, and the base of the system.</p> <p>The value of a number can be expressed as a sum of products of each digit with the base raised to the power of its position. For a number with digits \\(d_n d_{n-1} ... d_1 d_0 . d_{-1} d_{-2} ... d_{-m}\\), its value \\(V\\) in base \\(b\\) is:</p> \\[ V = \\sum_{i=-m}^{n} (d_i \\times b^i) \\] <p>Where \\(d_i\\) is the digit at position \\(i\\).</p>"},{"location":"sem1/fundamentals/unit-1/#types-of-number-systems","title":"Types of Number Systems","text":""},{"location":"sem1/fundamentals/unit-1/#decimal-number-system","title":"Decimal Number System","text":"<p>The decimal number system is the most common number system used in our daily lives.</p> <ul> <li>Base (Radix): 10</li> <li>Digits Used: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9</li> <li>Positional Values: Powers of 10 (\\(10^0, 10^1, 10^2, \\dots\\)).</li> </ul> <p>Example: \\( (452.73)_{10} \\)</p> <p>The number \\(452.73\\) in decimal can be represented as:</p> \\[ (4 \\times 10^2) + (5 \\times 10^1) + (2 \\times 10^0) + (7 \\times 10^{-1}) + (3 \\times 10^{-2}) \\] \\[ = (4 \\times 100) + (5 \\times 10) + (2 \\times 1) + (7 \\times 0.1) + (3 \\times 0.01) \\] \\[ = 400 + 50 + 2 + 0.7 + 0.03 = 452.73 \\]"},{"location":"sem1/fundamentals/unit-1/#binary-number-system","title":"Binary Number System","text":"<p>The binary number system is the fundamental language of computers. It uses only two digits. Each digit is called a bit (binary digit).</p> <ul> <li>Base (Radix): 2</li> <li>Digits Used: 0, 1</li> <li>Positional Values: Powers of 2 (\\(2^0, 2^1, 2^2, \\dots\\)).</li> </ul> <p>Example: \\( (1101.101)_2 \\)</p> <p>The number \\(1101.101\\) in binary can be converted to decimal as:</p> \\[ (1 \\times 2^3) + (1 \\times 2^2) + (0 \\times 2^1) + (1 \\times 2^0) + (1 \\times 2^{-1}) + (0 \\times 2^{-2}) + (1 \\times 2^{-3}) \\] \\[ = (1 \\times 8) + (1 \\times 4) + (0 \\times 2) + (1 \\times 1) + (1 \\times 0.5) + (0 \\times 0.25) + (1 \\times 0.125) \\] \\[ = 8 + 4 + 0 + 1 + 0.5 + 0 + 0.125 = (13.625)_{10} \\]"},{"location":"sem1/fundamentals/unit-1/#octal-number-system","title":"Octal Number System","text":"<p>The octal number system is often used in computing as a more compact way to represent binary numbers.</p> <ul> <li>Base (Radix): 8</li> <li>Digits Used: 0, 1, 2, 3, 4, 5, 6, 7</li> <li>Positional Values: Powers of 8 (\\(8^0, 8^1, 8^2, \\dots\\)).</li> </ul> <p>Example: \\( (273.5)_8 \\)</p> <p>The number \\(273.5\\) in octal can be converted to decimal as:</p> \\[ (2 \\times 8^2) + (7 \\times 8^1) + (3 \\times 8^0) + (5 \\times 8^{-1}) \\] \\[ = (2 \\times 64) + (7 \\times 8) + (3 \\times 1) + (5 \\times 0.125) \\] \\[ = 128 + 56 + 3 + 0.625 = (187.625)_{10} \\]"},{"location":"sem1/fundamentals/unit-1/#hexadecimal-number-system","title":"Hexadecimal Number System","text":"<p>The hexadecimal system is widely used in computer systems to represent data like memory addresses and colors. It's even more compact than octal.</p> <ul> <li>Base (Radix): 16</li> <li>Digits Used: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F<ul> <li>Where A=10, B=11, C=12, D=13, E=14, F=15.</li> </ul> </li> <li>Positional Values: Powers of 16 (\\(16^0, 16^1, 16^2, \\dots\\)).</li> </ul> <p>Example: \\( (1A5.C)_{16} \\)</p> <p>The number \\(1A5.C\\) in hexadecimal can be converted to decimal as:</p> \\[ (1 \\times 16^2) + (A \\times 16^1) + (5 \\times 16^0) + (C \\times 16^{-1}) \\] \\[ = (1 \\times 256) + (10 \\times 16) + (5 \\times 1) + (12 \\times 0.0625) \\] \\[ = 256 + 160 + 5 + 0.75 = (421.75)_{10} \\]"},{"location":"sem1/fundamentals/unit-1/#number-system-conversions","title":"Number System Conversions","text":""},{"location":"sem1/fundamentals/unit-1/#decimal-to-other-bases","title":"Decimal to Other Bases","text":"<p>To convert a decimal number to another base, we handle the integer and fractional parts separately.</p>"},{"location":"sem1/fundamentals/unit-1/#integer-part-conversion","title":"Integer Part Conversion","text":"<p>Use the repeated division method.</p> <ol> <li>Divide the decimal number by the target base.</li> <li>Record the remainder.</li> <li>Replace the number with the quotient from the division.</li> <li>Repeat steps 1-3 until the quotient is 0.</li> <li>The new number is the sequence of remainders read from bottom to top.</li> </ol> <p>Convert \\( (43)_{10} \\) to Binary</p> Division Quotient Remainder \\(43 \\div 2\\) 21 1 (LSB) \\(21 \\div 2\\) 10 1 \\(10 \\div 2\\) 5 0 \\(5 \\div 2\\) 2 1 \\(2 \\div 2\\) 1 0 \\(1 \\div 2\\) 0 1 (MSB) <p>Reading the remainders from bottom to top, we get \\(101011\\). So, \\( (43)_{10} = (101011)_2 \\).</p>"},{"location":"sem1/fundamentals/unit-1/#fractional-part-conversion","title":"Fractional Part Conversion","text":"<p>Use the repeated multiplication method.</p> <ol> <li>Multiply the fractional part of the decimal number by the target base.</li> <li>Record the integer part of the result.</li> <li>Replace the fractional part with the fractional part of the result.</li> <li>Repeat steps 1-3 until the fractional part becomes 0 or you reach the desired precision.</li> <li>The new fractional number is the sequence of integers read from top to bottom.</li> </ol> <p>Convert \\( (0.625)_{10} \\) to Binary</p> Multiplication Result Integer Part \\(0.625 \\times 2\\) 1.25 1 (MSB) \\(0.25 \\times 2\\) 0.50 0 \\(0.50 \\times 2\\) 1.00 1 (LSB) <p>Reading the integer parts from top to bottom, we get \\(.101\\). So, \\( (0.625)_{10} = (0.101)_2 \\).</p>"},{"location":"sem1/fundamentals/unit-1/#other-bases-to-decimal","title":"Other Bases to Decimal","text":"<p>To convert a number from any base to decimal, use the positional notation method (also called polynomial expansion).</p> <ol> <li>Multiply each digit by the base raised to the power of its position.</li> <li>Sum up all the products.</li> </ol> <p>Convert \\( (1101)_2 \\) to Decimal</p> \\[ (1101)_2 = (1 \\times 2^3) + (1 \\times 2^2) + (0 \\times 2^1) + (1 \\times 2^0) \\] \\[ = 8 + 4 + 0 + 1 = (13)_{10} \\] <p>Convert \\( (345)_8 \\) to Decimal</p> \\[ (345)_8 = (3 \\times 8^2) + (4 \\times 8^1) + (5 \\times 8^0) \\] \\[ = (3 \\times 64) + (4 \\times 8) + (5 \\times 1) = 192 + 32 + 5 = (229)_{10} \\] <p>Convert \\( (A2F)_{16} \\) to Decimal</p> \\[ (A2F)_{16} = (A \\times 16^2) + (2 \\times 16^1) + (F \\times 16^0) \\] \\[ = (10 \\times 256) + (2 \\times 16) + (15 \\times 1) = 2560 + 32 + 15 = (2607)_{10} \\]"},{"location":"sem1/fundamentals/unit-1/#conversions-between-binary-octal-and-hexadecimal","title":"Conversions Between Binary, Octal, and Hexadecimal","text":"<p>These conversions are straightforward due to their base relationships (\\(8 = 2^3\\) and \\(16 = 2^4\\)).</p>"},{"location":"sem1/fundamentals/unit-1/#binary-to-octal","title":"Binary to Octal","text":"<p>Group binary digits into sets of three, starting from the binary point. Add leading or trailing zeros if needed. Convert each group to its octal equivalent.</p> <p>Convert \\( (10110101)_2 \\) to Octal</p> <ol> <li>Group the bits into threes from right to left: \\( \\underline{10} \\quad \\underline{110} \\quad \\underline{101} \\)</li> <li>Add a leading zero to the first group to make it three bits: \\( \\underline{010} \\quad \\underline{110} \\quad \\underline{101} \\)</li> <li>Convert each group:<ul> <li>\\( (010)_2 = (2)_8 \\)</li> <li>\\( (110)_2 = (6)_8 \\)</li> <li>\\( (101)_2 = (5)_8 \\)</li> </ul> </li> <li>Combine the results: \\( (265)_8 \\). So, \\( (10110101)_2 = (265)_8 \\).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#octal-to-binary","title":"Octal to Binary","text":"<p>Convert each octal digit to its 3-bit binary equivalent.</p> <p>Convert \\( (724)_8 \\) to Binary</p> <ol> <li>Convert each octal digit:<ul> <li>\\( (7)_8 = (111)_2 \\)</li> <li>\\( (2)_8 = (010)_2 \\)</li> <li>\\( (4)_8 = (100)_2 \\)</li> </ul> </li> <li>Combine the results: \\( (111010100)_2 \\). So, \\( (724)_8 = (111010100)_2 \\).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#binary-to-hexadecimal","title":"Binary to Hexadecimal","text":"<p>Group binary digits into sets of four, starting from the binary point. Add leading or trailing zeros if needed. Convert each group to its hexadecimal equivalent.</p> <p>Convert \\( (110101101011)_2 \\) to Hexadecimal</p> <ol> <li>Group the bits into fours from right to left: \\( \\underline{1101} \\quad \\underline{0110} \\quad \\underline{1011} \\)</li> <li>Convert each group:<ul> <li>\\( (1101)_2 = (13)_{10} = (D)_{16} \\)</li> <li>\\( (0110)_2 = (6)_{10} = (6)_{16} \\)</li> <li>\\( (1011)_2 = (11)_{10} = (B)_{16} \\)</li> </ul> </li> <li>Combine the results: \\( (D6B)_{16} \\). So, \\( (110101101011)_2 = (D6B)_{16} \\).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#hexadecimal-to-binary","title":"Hexadecimal to Binary","text":"<p>Convert each hexadecimal digit to its 4-bit binary equivalent.</p> <p>Convert \\( (9AF)_16 \\) to Binary</p> <ol> <li>Convert each hex digit:<ul> <li>\\( (9)_{16} = (1001)_2 \\)</li> <li>\\( (A)_{16} = (1010)_2 \\)</li> <li>\\( (F)_{16} = (1111)_2 \\)</li> </ul> </li> <li>Combine the results: \\( (100110101111)_2 \\). So, \\( (9AF)_{16} = (100110101111)_2 \\).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#octal-to-hexadecimal-and-vice-versa","title":"Octal to Hexadecimal (and Vice Versa)","text":"<p>The easiest way is to use binary as an intermediate step.</p> <ul> <li>Octal to Hexadecimal: Convert the octal number to binary, then regroup the binary bits into sets of four and convert to hexadecimal.</li> <li>Hexadecimal to Octal: Convert the hexadecimal number to binary, then regroup the binary bits into sets of three and convert to octal.</li> </ul> <p>Convert \\( (275)_8 \\) to Hexadecimal</p> <ol> <li>Octal to Binary:<ul> <li>\\( (2)_8 = 010 \\)</li> <li>\\( (7)_8 = 111 \\)</li> <li>\\( (5)_8 = 101 \\)</li> <li>Combined Binary: \\( (010111101)_2 \\)</li> </ul> </li> <li>Binary to Hexadecimal:<ul> <li>Regroup into fours from the right: \\( \\underline{0000} \\quad \\underline{1011} \\quad \\underline{1101} \\)</li> <li>Correct grouping: \\( \\underline{1011} \\quad \\underline{1101} \\). We have \\( (010111101)_2 \\). So, \\( \\underline{0}10111101 \\rightarrow \\underline{0001} \\quad \\underline{0111} \\quad \\underline{1101} \\)</li> <li>Wait, let's re-do the binary grouping carefully. Binary is \\(010111101\\).</li> <li>Group from right: \\( \\underline{01011} \\quad \\underline{1101} \\). No. It's \\( \\underline{010} \\quad \\underline{111} \\quad \\underline{101} \\). Binary: <code>010111101</code>.</li> <li>Regroup from right in fours: <code>01011 1101</code>. No, that's not right. <code>010 111 101</code>. The full binary string is <code>010111101</code>.</li> <li>Grouping from the right: <code>1101</code> and <code>01011</code>. That's not right either.</li> <li>Let's regroup <code>010111101</code> from the right in groups of 4:</li> <li><code>1101</code> (rightmost group)</li> <li><code>0111</code> (middle group)</li> <li><code>0</code> (leftmost group, needs padding) -&gt; <code>0000</code> -&gt; <code>0</code>. Let's use <code>1</code>.</li> <li>Binary: \\( \\underline{0001} \\quad \\underline{0111} \\quad \\underline{1101} \\)</li> <li>The binary is <code>010111101</code>. So from the right: <code>1101</code> is one group. <code>0101</code> is the second. <code>1</code> is left over.</li> <li>\\( \\underline{1} \\quad \\underline{0111} \\quad \\underline{1101} \\). Let's re-check the octal-&gt;binary. \\(2 \\rightarrow 010, 7 \\rightarrow 111, 5 \\rightarrow 101\\). Binary: \\(010111101\\). OK.</li> <li>Regroup \\(010111101\\) in fours from the right: \\( \\underline{1101} \\) (is D), \\( \\underline{0101} \\) (is 5), left with \\( \\underline{1} \\). Pad to \\( \\underline{0001} \\) (is 1).</li> <li>So, \\( \\underline{0001} \\quad \\underline{0101} \\quad \\underline{1101} \\)</li> <li>\\( (0001)_2 = (1)_{16} \\)</li> <li>\\( (0101)_2 = (5)_{16} \\)</li> <li>\\( (1101)_2 = (D)_{16} \\)</li> </ul> </li> <li>Result: \\( (15D)_{16} \\) So, \\( (275)_8 = (15D)_{16} \\).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#computer-fundamentals","title":"Computer Fundamentals","text":""},{"location":"sem1/fundamentals/unit-1/#definition-and-basic-components-of-a-computer","title":"Definition and Basic Components of a Computer","text":"<p>A computer is an electronic device that processes data and performs a vast range of tasks by executing a set of instructions. At a fundamental level, all computers consist of two primary elements: hardware and software.</p> <ul> <li>Hardware refers to the physical components of a computer system that you can touch and see.</li> <li>Software is a set of instructions, data, or programs used to operate computers and execute specific tasks.</li> </ul> <p>The basic hardware components of a computer include:</p>"},{"location":"sem1/fundamentals/unit-1/#central-processing-unit-cpu","title":"Central Processing Unit (CPU)","text":"<p>Often called the \"brain\" of the computer, the CPU is responsible for executing instructions and performing calculations. It consists of two main parts:</p> <ul> <li>Arithmetic Logic Unit (ALT): Performs arithmetic operations (addition, subtraction, etc.) and logical operations (AND, OR, NOT).</li> <li>Control Unit (CT): Directs and coordinates most of the operations in the computer. It interprets instructions and sends signals to other components.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#memory","title":"Memory","text":"<p>Memory is where the computer stores data and instructions. There are two main types of memory:</p> <ul> <li>Primary Memory (Main Memory): This is the memory that the CPU can access directly. It is volatile, meaning its contents are lost when the computer is turned off.<ul> <li>Random Access Memory (RAM): Used to store data and instructions that are currently in use.</li> <li>Read-Only Memory (ROM): Contains pre-written instructions that are essential for booting up the computer.</li> </ul> </li> <li>Secondary Memory (Storage): This is non-volatile memory used for long-term storage of data and programs.<ul> <li>Hard Disk Drive (HDD): A magnetic storage device.</li> <li>Solid-State Drive (SSD): Uses flash memory for storage, which is much faster than an HDD.</li> <li>Optical Drives: Such as CD/DVD/Blu-ray drives.</li> <li>Flash Memory: Used in USB drives and memory cards.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#input-devices","title":"Input Devices","text":"<p>These devices are used to provide data and control signals to a computer.</p> <ul> <li>Keyboard</li> <li>Mouse</li> <li>Scanner</li> <li>Microphone</li> <li>Webcam</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#output-devices","title":"Output Devices","text":"<p>These devices are used to display the results of the processed data.</p> <ul> <li>Monitor</li> <li>Printer</li> <li>Speakers</li> <li>Projector</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#motherboard","title":"Motherboard","text":"<p>The motherboard is the main printed circuit board (PCB) in a computer. It holds and allows communication between many of the crucial electronic components of a system, such as the CPU and memory.</p>"},{"location":"sem1/fundamentals/unit-1/#bus-architecture","title":"Bus Architecture","text":"<p>In computer architecture, a bus is a communication system that transfers data between components inside a computer, or between computers. It is a set of parallel electrical conductors that can be a path for data, addresses, or control signals.</p> <p>There are three main types of buses in a computer system:</p>"},{"location":"sem1/fundamentals/unit-1/#address-bus","title":"Address Bus","text":"<p>The address bus is a unidirectional pathway that carries the memory address from the CPU to the main memory or other I/O devices. The width of the address bus determines the maximum amount of memory the system can address. For example, a system with a 32-bit address bus can address \\(2^{32}\\) memory locations.</p>"},{"location":"sem1/fundamentals/unit-1/#data-bus","title":"Data Bus","text":"<p>The data bus is a bidirectional pathway that carries the actual data between the CPU, memory, and I/O devices. The width of the data bus determines the amount of data that can be transferred at one time.</p>"},{"location":"sem1/fundamentals/unit-1/#control-bus","title":"Control Bus","text":"<p>The control bus is a bidirectional pathway that carries control signals and timing signals to coordinate the activities of all the components. These signals include read/write commands, interrupt requests, and clock signals.</p>"},{"location":"sem1/fundamentals/unit-1/#evolution-and-generations-of-computers","title":"Evolution and Generations of Computers","text":"<p>The evolution of computers is often categorized into generations, with each generation being characterized by a major technological development.</p>"},{"location":"sem1/fundamentals/unit-1/#first-generation-1940-1956-vacuum-tubes","title":"First Generation (1940-1956): Vacuum Tubes","text":"<ul> <li>Technology: Used vacuum tubes for circuitry and magnetic drums for memory.</li> <li>Characteristics:<ul> <li>Very large in size, often taking up entire rooms.</li> <li>Consumed a great deal of electricity and generated a lot of heat.</li> <li>Relied on machine language for programming.</li> <li>Examples: ENIAC, UNIVAC.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#second-generation-1956-1963-transistors","title":"Second Generation (1956-1963): Transistors","text":"<ul> <li>Technology: Transistors replaced vacuum tubes.</li> <li>Characteristics:<ul> <li>Smaller, faster, cheaper, and more energy-efficient than first-generation computers.</li> <li>Used assembly language and early high-level programming languages like FORTRAN and COBOL.</li> <li>Still generated a considerable amount of heat.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#third-generation-1964-1971-integrated-circuits","title":"Third Generation (1964-1971): Integrated Circuits","text":"<ul> <li>Technology: Integrated circuits (ICs), which are small chips containing hundreds of transistors.</li> <li>Characteristics:<ul> <li>Significantly smaller and faster than previous generations.</li> <li>Keyboards and monitors were introduced for user interaction.</li> <li>Used operating systems for the first time, allowing them to run multiple applications at once.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#fourth-generation-1971-present-microprocessors","title":"Fourth Generation (1971-Present): Microprocessors","text":"<ul> <li>Technology: The microprocessor, which integrates all the components of a CPU onto a single chip.</li> <li>Characteristics:<ul> <li>Led to the development of personal computers (PCs).</li> <li>More powerful, compact, reliable, and affordable.</li> <li>Development of Graphical User Interfaces (GUIs), the mouse, and handheld devices.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#fifth-generation-present-and-beyond-artificial-intelligence","title":"Fifth Generation (Present and Beyond): Artificial Intelligence","text":"<ul> <li>Technology: Based on Artificial Intelligence (AI), with a focus on parallel processing and superconductors.</li> <li>Characteristics:<ul> <li>Aims to develop devices that respond to natural language input and are capable of learning and self-organization.</li> <li>Includes technologies like voice recognition, quantum computing, and nano-technology.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#classification-of-computers","title":"Classification of Computers","text":"<p>Computers can be classified based on their size, purpose, and data handling capabilities.</p>"},{"location":"sem1/fundamentals/unit-1/#classification-by-size","title":"Classification by Size","text":"<ul> <li>Supercomputers: The largest and most powerful computers, used for complex scientific and engineering problems.</li> <li>Mainframe Computers: Large, powerful, and expensive computers used by large organizations for critical applications, such as bulk data processing.</li> <li>Minicomputers (Midrange Computers): Smaller than mainframes but larger than microcomputers, often used as servers in a network.</li> <li>Microcomputers (Personal Computers): The most common type of computer, designed for individual use. They include desktops, laptops, and tablets.</li> <li>Workstations: High-end microcomputers with more powerful processors and better graphics capabilities, used for tasks like graphic design and engineering.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#classification-by-purpose","title":"Classification by Purpose","text":"<ul> <li>General-Purpose Computers: Designed to perform a wide variety of tasks. Most computers today are general-purpose.</li> <li>Special-Purpose Computers: Designed to perform a specific task or a limited range of tasks. Examples include computers in cars, washing machines, and ATMs.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#classification-by-data-handling","title":"Classification by Data Handling","text":"<ul> <li>Analog Computers: Process analog data, which is continuous in nature. They are used for measuring physical quantities like temperature and pressure.</li> <li>Digital Computers: Process digital data, which is in the form of discrete values (0s and 1s). Most modern computers are digital.</li> <li>Hybrid Computers: Combine the features of both analog and digital computers. They are used in specialized applications where both types of data need to be processed.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#data-representation-in-computers","title":"Data Representation in Computers","text":"<p>In the digital world, all data\u2014be it text, numbers, images, or sound\u2014is ultimately stored as a series of binary digits, or bits. A bit can only have one of two values: 0 or 1. To represent complex information like human language, computers need standardized systems to map characters to these binary numbers. These systems are called character encodings.</p>"},{"location":"sem1/fundamentals/unit-1/#ascii-american-standard-code-for-information-interchange","title":"ASCII (American Standard Code for Information Interchange)","text":"<p>ASCII was one of the earliest and most influential character encoding standards, developed in the 1960s. Its primary goal was to provide a standard for representing English characters on teleprinters and computers.</p>"},{"location":"sem1/fundamentals/unit-1/#standard-ascii-7-bit","title":"Standard ASCII (7-bit)","text":"<ul> <li>Structure: Standard ASCII uses 7 bits to represent each character. With 7 bits, it's possible to represent \\(2^7 = 128\\) unique characters.</li> <li>Character Set: These 128 code points are divided into two main groups:<ol> <li>Control Characters (Codes 0-31 and 127): These are non-printable characters used to control devices. Examples include:<ul> <li><code>NULL</code> (0): Null character</li> <li><code>BEL</code> (7): Bell (makes a sound)</li> <li><code>BS</code> (8): Backspace</li> <li><code>LF</code> (10): Line Feed</li> <li><code>CR</code> (13): Carriage Return</li> <li><code>ESC</code> (27): Escape</li> </ul> </li> <li>Printable Characters (Codes 32-126): These are the characters that can be displayed or printed. This set includes:<ul> <li>Punctuation marks and symbols (e.g., <code>!</code>, <code>@</code>, <code>#</code>, <code>$</code>)</li> <li>Digits (<code>0</code> through <code>9</code>)</li> <li>Uppercase English alphabet (<code>A</code> through <code>Z</code>)</li> <li>Lowercase English alphabet (<code>a</code> through <code>z</code>)</li> <li>Space character (Code 32)</li> </ul> </li> </ol> </li> </ul> <p>Example: * The uppercase letter 'A' is represented by the decimal number 65, which in 7-bit binary is <code>1000001</code>. * The digit '5' is represented by the decimal number 53, which in 7-bit binary is <code>0110101</code>.</p>"},{"location":"sem1/fundamentals/unit-1/#extended-ascii-8-bit","title":"Extended ASCII (8-bit)","text":"<ul> <li>Structure: Since most computers store data in 8-bit chunks (bytes), the 8<sup>th</sup> bit, which was unused in standard ASCII, was utilized to create Extended ASCII. This allowed for an additional 128 characters, bringing the total to \\(2^8 = 256\\).</li> <li>Problem of Standardization: The first 128 characters remained the same as standard ASCII. However, there was no single, universally accepted standard for the additional 128 characters (codes 128-255). Different manufacturers and organizations used them for different purposes, such as:<ul> <li>Graphical symbols</li> <li>Mathematical symbols</li> <li>Characters from other languages (e.g., accented letters like <code>\u00e9</code>, <code>\u00fc</code>).</li> </ul> </li> <li>This led to the creation of different code pages (e.g., ISO-8859-1 for Western European languages), which caused compatibility issues. A file created with one code page would not display correctly on a system using a different one.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#unicode","title":"Unicode","text":"<p>Unicode was created to solve the problems of limited character sets and conflicting code pages. It is a universal character encoding standard designed to support all writing systems in the world, both modern and historical.</p>"},{"location":"sem1/fundamentals/unit-1/#core-concept-code-points","title":"Core Concept: Code Points","text":"<p>The fundamental idea behind Unicode is to assign a unique number, called a code point, to every single character. This includes not just letters and numbers but also symbols, punctuation, and even emojis.</p> <ul> <li>Notation: Unicode code points are typically written in hexadecimal with a \"U+\" prefix. For example, <code>U+0041</code> is the code point for the character 'A'.</li> <li>Planes: The entire range of Unicode code points is divided into 17 \"planes,\" each containing 65,536 ( \\(2^{16}\\) ) code points.<ul> <li>The first plane (Plane 0) is the Basic Multilingual Plane (BMP). It contains code points from <code>U+0000</code> to <code>U+FFFF</code> and includes most of the commonly used characters from modern languages.</li> <li>The other 16 planes are called supplementary planes and are used for less common characters, historic scripts, and emojis.</li> </ul> </li> </ul>"},{"location":"sem1/fundamentals/unit-1/#unicode-encoding-schemes","title":"Unicode Encoding Schemes","text":"<p>A code point is just an abstract number. An encoding scheme defines how these code points are translated into a sequence of bytes for storage and transmission. The most common Unicode encodings are UTF-8, UTF-16, and UTF-32.</p>"},{"location":"sem1/fundamentals/unit-1/#utf-8-unicode-transformation-format-8-bit","title":"UTF-8 (Unicode Transformation Format - 8-bit)","text":"<p>UTF-8 is the most popular encoding on the web and for many operating systems. * Variable-Width Encoding: It uses a variable number of bytes to represent each character.     * 1 byte: For all standard ASCII characters (<code>U+0000</code> to <code>U+007F</code>).     * 2 bytes: For Latin letters with diacritics, Greek, Cyrillic, Hebrew, Arabic, etc.     * 3 bytes: For characters in the rest of the BMP (e.g., Chinese, Japanese, Korean).     * 4 bytes: For characters in the supplementary planes (e.g., rare characters, most emojis \ud83d\udc4d). * Key Advantage: Backward Compatibility: A major reason for its success is that it is 100% backward compatible with 7-bit ASCII. Any text file containing only ASCII characters is also a valid UTF-8 file. This made the transition from ASCII to Unicode much smoother.</p>"},{"location":"sem1/fundamentals/unit-1/#utf-16-unicode-transformation-format-16-bit","title":"UTF-16 (Unicode Transformation Format - 16-bit)","text":"<ul> <li>Variable-Width Encoding: UTF-16 uses either 2 bytes (16 bits) or 4 bytes (32 bits) per character.<ul> <li>It uses 2 bytes for all characters in the BMP.</li> <li>For characters in the supplementary planes, it uses a pair of 2-byte sequences called a surrogate pair.</li> </ul> </li> <li>Usage: It is used internally by systems like Microsoft Windows and Java.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#utf-32-unicode-transformation-format-32-bit","title":"UTF-32 (Unicode Transformation Format - 32-bit)","text":"<ul> <li>Fixed-Width Encoding: UTF-32 is the simplest of the three. It uses a fixed 4 bytes (32 bits) for every single Unicode character.</li> <li>Advantage: Every character has the same length, which can simplify programming tasks like finding the nth character in a string.</li> <li>Disadvantage: It is very space-inefficient. A text file containing only English characters would be four times larger in UTF-32 than in ASCII or UTF-8.</li> </ul>"},{"location":"sem1/fundamentals/unit-1/#comparison-ascii-vs-unicode","title":"Comparison: ASCII vs. Unicode","text":"Feature ASCII Unicode Size 7-bit (Standard) or 8-bit (Extended) A standard, not an encoding. Code points up to 21 bits. Encoding Itself is the encoding. Uses encoding schemes like UTF-8, UTF-16, UTF-32. Capacity 128 characters (Standard) or 256 (Extended). Over 1.1 million possible code points (currently over 149,000 assigned). Scope Primarily for the English language. Aims to include every character from every language. Compatibility Extended ASCII has many conflicting versions (code pages). Provides a single, universal standard. UTF-8 is backward compatible with 7-bit ASCII. Memory Usage Fixed 1 byte per character. Variable, depending on the encoding and character. UTF-8 is very efficient for English/Latin text."},{"location":"sem1/fundamentals/unit-1/#problem-set","title":"Problem Set","text":""},{"location":"sem1/fundamentals/unit-1/#number-systems-40-problems","title":"Number Systems (40 Problems)","text":""},{"location":"sem1/fundamentals/unit-1/#introduction-and-core-concepts","title":"Introduction and Core Concepts","text":"<ol> <li>Define 'radix' or 'base' of a number system. State the radix for binary, octal, decimal, and hexadecimal systems.</li> <li>What is the significance of the positional value in a number system? Illustrate with the decimal number \\(345\\).</li> <li>Why is the binary system ideal for electronic computers?</li> <li>List all the valid digits for the base-7 number system.</li> <li>What is the largest value that can be represented by a single hexadecimal digit? What is its decimal equivalent?</li> <li>Explain why \\(387_8\\) is an invalid octal number.</li> <li>Convert the number \\(20_{10}\\) into its equivalent in base-2, base-8, and base-16.</li> <li>Which has a greater value: \\(101010_2\\) or \\(50_{10}\\)? Justify your answer.</li> <li>What is the weight of the digit 'A' in the hexadecimal number \\(1AF5_{16}\\)?</li> <li>How many unique numbers can be represented using 8 bits?</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#conversions-decimal-to-other-bases","title":"Conversions: Decimal to Other Bases","text":"<ol> <li>Convert \\(428_{10}\\) to its binary equivalent.</li> <li>Convert \\(999_{10}\\) to its octal equivalent.</li> <li>Convert \\(4096_{10}\\) to its hexadecimal equivalent.</li> <li>Convert the fractional decimal \\(0.8125_{10}\\) to binary.</li> <li>Convert \\(157.25_{10}\\) to its octal equivalent.</li> <li>Find the hexadecimal equivalent of \\(260.5_{10}\\).</li> <li>Convert \\(3456_{10}\\) to binary.</li> <li>Convert \\(100.1_{10}\\) to its binary equivalent (up to 5 fractional places).</li> <li>Convert \\(511_{10}\\) to octal.</li> <li>Convert \\(65535_{10}\\) to hexadecimal.</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#conversions-other-bases-to-decimal","title":"Conversions: Other Bases to Decimal","text":"<ol> <li>Convert \\(11011101_2\\) to its decimal equivalent.</li> <li>Convert \\(707_8\\) to its decimal equivalent.</li> <li>Find the decimal value of the hexadecimal number \\(F0A1_{16}\\).</li> <li>Convert the binary number \\(10110.1101_2\\) to decimal.</li> <li>Convert \\(234.5_8\\) to its decimal equivalent.</li> <li>Find the decimal value of \\(C4E.B_{16}\\).</li> <li>Convert \\(10000001_2\\) to decimal.</li> <li>What is the decimal value of \\(BAD_{16}\\)?</li> <li>Convert \\(4000_8\\) to decimal.</li> <li>Convert \\(1.1_2\\) to decimal.</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#conversions-between-binary-octal-hexadecimal","title":"Conversions: Between Binary, Octal, &amp; Hexadecimal","text":"<ol> <li>Convert \\(101101110111_2\\) directly to its octal equivalent.</li> <li>Convert the octal number \\(743_8\\) to its binary representation.</li> <li>Convert \\(1111001010100111.101101_2\\) directly to its hexadecimal equivalent.</li> <li>Convert the hexadecimal number \\(1ABC.D_{16}\\) to its binary representation.</li> <li>Convert \\(652_8\\) to hexadecimal. (Hint: First convert to binary).</li> <li>Convert \\(9E7_{16}\\) to octal.</li> <li>Group the bits of \\(10111101_2\\) to find its octal equivalent.</li> <li>Convert \\(BEEF_{16}\\) to binary.</li> <li>Convert the octal number \\(1234_8\\) to hexadecimal.</li> <li>Convert \\(A03F_{16}\\) to octal.</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#computer-fundamentals-40-problems","title":"Computer Fundamentals (40 Problems)","text":""},{"location":"sem1/fundamentals/unit-1/#definition-and-basic-components","title":"Definition and Basic Components","text":"<ol> <li>Draw a neat, labeled block diagram of a computer system. Explain the flow of data between the core components.</li> <li>Define the CPU. What are the functions of its two main components, the ALU and the CU?</li> <li>Differentiate between RAM and ROM. Which one is volatile and why?</li> <li>What is cache memory? Explain its purpose and its position in the memory hierarchy.</li> <li>List four input devices and four output devices, and state the primary function of each.</li> <li>What is the role of the motherboard in a computer system?</li> <li>Explain the fetch-decode-execute cycle performed by the CPU.</li> <li>What is secondary storage? Provide three examples of secondary storage devices.</li> <li>Why is a computer referred to as a \"system\"?</li> <li>Differentiate between a general-purpose register and a special-purpose register (e.g., Program Counter, Instruction Register).</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#bus-architecture_1","title":"Bus Architecture","text":"<ol> <li>Define 'bus' in computer architecture. What are the three main types of buses in a computer system?</li> <li>What is the function of the Address Bus? Is it unidirectional or bidirectional? Justify your answer.</li> <li>If a microprocessor has a 16-bit address bus, what is the maximum memory capacity it can directly address in kilobytes (KB)?</li> <li>Describe the function of the Data Bus. Why must it be bidirectional?</li> <li>If a system has a 64-bit data bus, how many bytes of data can be transferred simultaneously?</li> <li>What is the purpose of the Control Bus? List at least four different control signals it carries.</li> <li>Explain how the Address, Data, and Control buses work together to perform a write operation to a memory location.</li> <li>What is bus width? How does the width of the data bus affect the performance of a computer?</li> <li>Differentiate between a system bus and an expansion bus (like PCI).</li> <li>What is bus contention and how is it managed?</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#evolution-and-generations-of-computers_1","title":"Evolution and Generations of Computers","text":"<ol> <li>What was the defining electronic component for each of the first four generations of computers?</li> <li>Name two examples of First Generation computers. What were their primary limitations?</li> <li>How did the shift from vacuum tubes to transistors in the Second Generation improve computers?</li> <li>What is an Integrated Circuit (IC)? How did its introduction in the Third Generation lead to minicomputers?</li> <li>The Fourth Generation is defined by the microprocessor. What is a microprocessor and how did it revolutionize the computer industry?</li> <li>Differentiate between SSI, MSI, LSI, and VLSI in the context of integrated circuits.</li> <li>What are the primary characteristics and goals of Fifth Generation computers?</li> <li>What programming languages were characteristic of the First and Second Generations?</li> <li>How did the user interface evolve from the First Generation (plugs and switches) to the Fourth Generation (GUIs)?</li> <li>Which generation first saw the widespread use of high-level languages like FORTRAN and COBOL?</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#classification-of-computers_1","title":"Classification of Computers","text":"<ol> <li>Classify computers based on size. Briefly describe Supercomputers, Mainframe computers, Minicomputers, and Microcomputers.</li> <li>What is the primary application area for a supercomputer?</li> <li>How does a mainframe computer differ from a supercomputer in terms of its processing goals?</li> <li>Differentiate between a desktop computer, a laptop, and a tablet, which are all types of microcomputers.</li> <li>Classify computers based on the type of data they process. Explain Analog, Digital, and Hybrid computers.</li> <li>Provide a real-world example for an analog computer and a hybrid computer.</li> <li>Classify computers based on their purpose. Differentiate between general-purpose and special-purpose computers with examples.</li> <li>What is an embedded computer? Give two examples of everyday devices that contain them.</li> <li>Where does a \"server\" fit in the classification of computers by size?</li> <li>What is a workstation, and how does it differ from a standard desktop PC?</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#data-representation-20-problems","title":"Data Representation (20 Problems)","text":""},{"location":"sem1/fundamentals/unit-1/#ascii","title":"ASCII","text":"<ol> <li>What does ASCII stand for? What was its original purpose?</li> <li>The standard ASCII code is a 7-bit code. What is the total number of characters it can represent?</li> <li>What is the primary difference between ASCII and Extended ASCII?</li> <li>The decimal ASCII value for 'a' is 97. What would be the decimal ASCII value for 'e'?</li> <li>Given that the ASCII code for the character '0' is \\(48_{10}\\), find the 7-bit binary ASCII code for the character '3'.</li> <li>What is a major limitation of the ASCII character set in a global context?</li> <li>Decode the following sequence of 7-bit ASCII codes (in binary): <code>1001000 1000101 1001100 1001100 1001111</code>.</li> <li>Are control characters (like newline, tab) part of the ASCII standard?</li> <li>Explain why ASCII is considered a subset of Unicode's UTF-8.</li> <li>What happens when a system using Extended ASCII tries to read a file created with a different extended character set (a different code page)?</li> </ol>"},{"location":"sem1/fundamentals/unit-1/#unicode_1","title":"Unicode","text":"<ol> <li>Why was Unicode created? What fundamental problem does it solve?</li> <li>Explain the difference between a \"code point\" and an \"encoding scheme\" in Unicode.</li> <li>What does UTF in UTF-8, UTF-16, and UTF-32 stand for?</li> <li>Describe the key feature of UTF-8. Why is this variable-width encoding so advantageous for web content?</li> <li>How does UTF-32 work? What is its main advantage and its main disadvantage?</li> <li>The Unicode code point for the Euro sign (\u20ac) is U+20AC. Would this character require 1, 2, 3, or 4 bytes in a UTF-8 encoding? (You don't need to calculate the exact bits, just the byte count based on its range).</li> <li>How many bytes does the character 'A' (U+0041) occupy in UTF-8, UTF-16, and UTF-32 respectively?</li> <li>What is the relationship between the first 128 characters of Unicode and the standard ASCII set?</li> <li>Compare UTF-8 and UTF-16 in terms of space efficiency for documents containing mostly English text versus documents containing mostly East Asian characters (e.g., Chinese, Japanese).</li> <li>Briefly explain what \"endianness\" (Big-Endian vs. Little-Endian) is and why it is a concern for UTF-16 and UTF-32 but not for UTF-8.</li> </ol>"},{"location":"sem1/math/syllabus/","title":"Syllabus","text":""},{"location":"sem1/math/syllabus/#credits","title":"Credits","text":"<ul> <li>Theory credit: 4</li> <li>Practical credit: 0</li> </ul>"},{"location":"sem1/math/syllabus/#course-details","title":"Course Details","text":""},{"location":"sem1/math/syllabus/#unit-1-sets-relations-and-functions-16-lectures","title":"UNIT 1: Sets, Relations and Functions (16 Lectures)","text":"<ul> <li>Sets:<ul> <li>Definition of set, cardinality of sets, finite, countable, and infinite sets.</li> <li>Operations on sets and Venn diagrams.</li> <li>Principle of inclusion and exclusion and its applications.</li> <li>Multisets.</li> </ul> </li> <li>Relations:<ul> <li>Definition and properties of binary relations, closures of relations.</li> <li>Equivalence relations, equivalence classes, and partitions.</li> <li>N-ary relations and their representation as tables.</li> <li>Partial ordering relations and lattices.</li> </ul> </li> <li>Functions:<ul> <li>Definition of a function, one-to-one, and onto functions.</li> <li>Principles of mathematical induction.</li> <li>Concave and convex functions.</li> </ul> </li> </ul>"},{"location":"sem1/math/syllabus/#unit-2-matrices-15-lectures","title":"UNIT 2: Matrices (15 Lectures)","text":"<ul> <li>Definition and Types: Identity matrix, diagonal matrix, etc.</li> <li>Operations: Row and column operations; vector and matrix operations (addition, subtraction, multiplication) and their properties.</li> <li>Identities and Inverses: Existence of additive and multiplicative identity and additive inverse.</li> <li>Applications and Properties:<ul> <li>Representing relations using matrices.</li> <li>Transpose of a matrix and its properties.</li> <li>Symmetric and skew-symmetric matrices.</li> <li>Elementary transformation of a matrix.</li> <li>Invertible matrices.</li> </ul> </li> </ul>"},{"location":"sem1/math/syllabus/#unit-3-determinants-16-lectures","title":"UNIT 3: Determinants (16 Lectures)","text":"<ul> <li>Core Concepts: Determinant of a square matrix, minor, cofactor, and Adjoint of a matrix.</li> <li>Matrix Inversion:<ul> <li>Finding the inverse using the adjoint method.</li> <li>Finding the inverse using elementary transformations.</li> </ul> </li> <li>Rank, Eigenvalues, and Eigenvectors:<ul> <li>Rank of a matrix and its determination.</li> <li>Eigenvalues and Eigenvectors of a matrix (with emphasis on symmetric matrices).</li> <li>Cayley-Hamilton theorem.</li> </ul> </li> <li>Linear Equations:<ul> <li>Cramer\u2019s rule.</li> <li>Consistency of a system of linear non-homogenous equations and existence of solutions.</li> <li>Solving simultaneous linear equations by the Gaussian elimination method.</li> </ul> </li> </ul>"},{"location":"sem1/math/syllabus/#unit-4-fundamentals-of-statistics-and-discrete-probability-13-lectures","title":"UNIT 4: Fundamentals of Statistics and Discrete Probability (13 Lectures)","text":"<ul> <li>Data Representation:<ul> <li>Types of Data: Attributes and variables.</li> <li>Frequency Distribution: Construction of Frequency and Cumulative frequency.</li> <li>Graphical Representation: Histogram, Frequency Polygon, Frequency Curve, and Ogive curves.</li> <li>Diagrammatic Representation: Simple bar, Subdivided bar, and Pie diagrams.</li> </ul> </li> <li>Descriptive Statistics:<ul> <li>Measures of Central Tendency: Mean, Median, and Mode.</li> <li>Measures of Variation: Range, Interquartile range, Standard Deviation, and Variance.</li> </ul> </li> <li>Discrete Probability:<ul> <li>Sample space, events, and random variables.</li> <li>Basic probability concepts.</li> <li>Conditional Probability and Bayes' theorem.</li> </ul> </li> </ul>"},{"location":"sem1/math/syllabus/#read","title":"Read","text":"<p>Digital Book: Discrete Mathematical Structures with Applications to Computer Science</p>"},{"location":"sem1/math/pyq/2024/","title":"MATHEMATICS-I (CIT0100304)","text":"<p>Paper Details</p> <ul> <li>Course: BCA (SEM-I)</li> <li>Full Marks: 60</li> <li>Time: 2\u00bd hours</li> <li>Instructions: The figures in the margin indicate full marks for the questions.</li> </ul>"},{"location":"sem1/math/pyq/2024/#1-answer-the-following","title":"(1) Answer the following","text":"<p>Marks: \\(1 \\times 8 = 8\\)</p> <ul> <li>a. Define Set.</li> <li>b. When is a matrix said to be singular?</li> <li>c. Give an example of a bijective function.</li> <li>d. What is the Cardinality of the Set \\(A=\\{0, 1, -1, 8\\}\\)?</li> <li>e. What is Sample Space?</li> <li>f. If the probability of an event A is \\(P(A)=\\frac{2}{3}\\), then find \\(P(\\overline{A})\\).</li> <li>g. State De Morgan's Law for two sets A and B.</li> <li> <p>h. Find the values of \\(x\\) and \\(y\\) if:</p> \\[ \\begin{bmatrix}x &amp; 5 \\\\ 3 &amp; -2 \\end{bmatrix} = \\begin{bmatrix} -8 &amp; 5 \\\\ y &amp; -2 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/pyq/2024/#2-answer-any-six-from-the-following","title":"(2) Answer any six from the following","text":"<p>Marks: \\(2 \\times 6 = 12\\)</p> <ul> <li>a. Define injective and surjective functions with one example for each.</li> <li>b. If \\(f:R \\rightarrow R\\) and \\(g:R \\rightarrow R\\) are defined as \\(f(x)=x^{2}\\) and \\(g(x)=x-3\\), find \\(f \\circ g\\) and \\(g \\circ f\\).</li> <li> <p>c. Given the matrices \\(A\\) and \\(B\\), find the product \\(A \\cdot B\\).</p> \\[ A = \\begin{bmatrix} 2 &amp; -3 \\\\ 5 &amp; 4 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 6 &amp; -7 \\\\ 2 &amp; -8 \\end{bmatrix} \\] </li> <li> <p>d. Find the minor and co-factors of the elements 2 and 7 in the following matrix:</p> \\[ A = \\begin{bmatrix} 2 &amp; -4 &amp; 5 \\\\ 3 &amp; 1 &amp; 7 \\\\ 0 &amp; -1 &amp; -2 \\end{bmatrix} \\] </li> <li> <p>e. For any three non-empty sets A, B, and C, prove that \\(A-(B \\cup C)=(A-B) \\cap (A-C)\\).</p> </li> <li> <p>f. Find the Trace of the matrix A:</p> \\[ A = \\begin{bmatrix} -1 &amp; 0 &amp; 3 \\\\ 2 &amp; 4 &amp; 5 \\\\ 7 &amp; 3 &amp; 6 \\end{bmatrix} \\] </li> <li> <p>g. If \\(P(A)=\\frac{2}{3}\\), \\(P(B)=\\frac{3}{4}\\), and \\(P(A \\cup B)=\\frac{1}{2}\\), find the value of \\(P(A/B)\\).</p> </li> <li>h. Define a Partially Ordered Set (POSET).</li> <li>i. Calculate the median from the following data:         - \\(x: 1, 2, 3, 4, 5\\)         - \\(y: 8, 5, 6, 2, 1\\)</li> <li>j. What is the empirical relation between mean, median, and mode?</li> </ul>"},{"location":"sem1/math/pyq/2024/#3-answer-any-four-from-the-following","title":"(3) Answer any four from the following","text":"<p>Marks: \\(5 \\times 4 = 20\\)</p> <ul> <li>a. For any four non-empty sets A, B, S, and T, prove that \\((A \\times B) \\cap (S \\times T) = (A \\cap S) \\times (B \\cap T)\\).</li> <li>b. Using the principle of mathematical induction, prove that \\(P(n) = 10^{n} + 3 \\cdot 4^{n+2} + 5\\) is divisible by 9 for all natural numbers \\(n\\).</li> <li> <p>c. If \\(f:A \\rightarrow B\\) and \\(g:B \\rightarrow C\\) are both one-one and onto functions, then prove that:</p> <ol> <li>The composite function \\(g \\circ f\\) is also one-one and onto.</li> <li>\\((g \\circ f)^{-1} = f^{-1} \\circ g^{-1}\\).</li> </ol> </li> <li> <p>d. Let R be a relation '\\(\\le\\)' (less than or equal to) defined on the set of positive integers. Prove that R is a partial order relation.</p> </li> <li>e. Find the mean deviation about the median for the given data:</li> </ul> \\(x_i\\) 5 7 9 10 12 15 \\(f_i\\) 8 6 2 2 6 6 <ul> <li> <p>f. Solve the following system of linear equations using Cramer's rule:</p> \\[ \\begin{cases} 2x - y + 3z = 9 \\\\ x + y + z = 6 \\\\ x - y + z = 2 \\end{cases} \\] </li> <li> <p>g. Find the inverse of the matrix A:</p> \\[ A = \\begin{bmatrix} 0 &amp; 1 &amp; 2 \\\\ 1 &amp; 2 &amp; 3 \\\\ 3 &amp; 1 &amp; 1 \\end{bmatrix} \\] </li> <li> <p>h. If A and B are square matrices of the same order, then prove that \\(adj(AB) = (adj B) \\cdot (adj A)\\).</p> </li> </ul>"},{"location":"sem1/math/pyq/2024/#4-answer-any-two-from-the-following","title":"(4) Answer any two from the following","text":"<p>Marks: \\(10 \\times 2 = 20\\)</p> <ul> <li> <p>a. Let R be a relation on the set of integers I, defined as \\(R = \\{(x,y) | (x-y) \\text{ is divisible by } 5\\}\\). Prove that R is an equivalence relation. Also, find the equivalence classes.</p> </li> <li> <p>b. </p> <ol> <li> <p>If \\(f:X \\rightarrow Y\\) is a function and A, B are subsets of Y, then prove that:</p> <ol> <li> <ul> <li>\\(f^{-1}(A \\cup B) = f^{-1}(A) \\cup f^{-1}(B)\\)</li> </ul> </li> <li> <ul> <li>\\(f^{-1}(A \\cap B) = f^{-1}(A) \\cap f^{-1}(B)\\)</li> </ul> </li> </ol> </li> <li> <p>If R and S are equivalence relations on a set, prove that \\(R \\cap S\\) is also an equivalence relation.</p> </li> </ol> </li> <li> <p>c. </p> <ol> <li>State and prove the Principle of Inclusion and Exclusion for two sets.</li> <li>Prove that for any two finite sets A and B, \\(n(A \\oplus B) = n(A) + n(B) - 2n(A \\cap B)\\), where \\(A \\oplus B\\) is the symmetric difference of A and B.</li> </ol> </li> <li> <p>d. </p> <ol> <li> <p>Solve the following system of equations using the matrix method (inverse matrix method):</p> \\[ \\begin{cases} x - y + 2z = 4 \\\\ 3x + y + 4z = 6 \\\\ x + y + z = 1 \\end{cases} \\] </li> <li> <p>For the matrix \\(A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; -5 \\end{bmatrix}\\), verify that \\(A \\cdot (adj A) = (adj A) \\cdot A = |A|I\\).</p> </li> </ol> </li> <li> <p>e.</p> <ol> <li>Write a short note on the limitations of statistics.</li> <li>Find the Arithmetic Mean and Mode from the following frequency distribution:</li> </ol> </li> </ul> Class Interval Frequency 0-10 5 10-20 6 20-30 8 30-40 30 40-50 10"},{"location":"sem1/math/pyq/2024/#solutions","title":"Solutions","text":""},{"location":"sem1/math/pyq/2024/#section-1-answer-the-following","title":"Section 1: Answer the following","text":"<p>a. Define Set.</p> <p>Ans. A set is a well-defined collection of distinct objects, considered as an object in its own right. The objects that make up the set are called its elements or members.</p> <p>b. When is a matrix said to be singular?</p> <p>Ans. A square matrix is said to be singular if the value of its determinant is equal to zero. If the determinant is not zero, the matrix is called non-singular.</p> <p>c. Give an example of a bijective function.</p> <p>Ans. An example of a bijective function is \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = x + 1\\). This function is both one-to-one (injective) and onto (surjective).</p> <p>d. What is the Cardinality of the Set \\(A=\\{0, 1, -1, 8\\}\\)?</p> <p>Ans. The cardinality of a set is the number of elements in the set. The set \\(A = \\{0, 1, -1, 8\\}\\) has 4 distinct elements. Therefore, the cardinality of set A, denoted as \\(|A|\\), is 4.</p> <p>e. What is Sample Space?</p> <p>Ans. In probability theory, the sample space of an experiment is the set of all possible outcomes of that experiment. It is usually denoted by the symbol \\(S\\). For example, when tossing a coin, the sample space is \\(S = \\{\\text{Heads, Tails}\\}\\).</p> <p>f. If the probability of an event A is \\(P(A)=\\frac{2}{3}\\), then find \\(P(\\overline{A})\\).</p> <p>Ans. We know that for any event A, the probability of its complement, \\(\\overline{A}\\), is given by the formula:</p> \\[ P(\\overline{A}) = 1 - P(A) \\] <p>Given, \\(P(A) = \\frac{2}{3}\\). Therefore,</p> \\[ P(\\overline{A}) = 1 - \\frac{2}{3} \\] \\[ P(\\overline{A}) = \\frac{3 - 2}{3} \\] \\[ P(\\overline{A}) = \\frac{1}{3} \\] <p>g. State De Morgan's Law for two sets A and B.</p> <p>Ans. For any two sets A and B, De Morgan's Laws state: 1.  The complement of the union of the two sets is equal to the intersection of their complements:     \\( (A \\cup B)' = A' \\cap B' \\) 2.  The complement of the intersection of the two sets is equal to the union of their complements:     \\( (A \\cap B)' = A' \\cup B' \\)</p> <p>h. Find the values of \\(x\\) and \\(y\\) if:</p> \\[ \\begin{bmatrix}x &amp; 5 \\\\ 3 &amp; -2 \\end{bmatrix} = \\begin{bmatrix} -8 &amp; 5 \\\\ y &amp; -2 \\end{bmatrix} \\] <p>Ans. Two matrices are equal if and only if their corresponding elements are equal. By equating the corresponding elements of the given matrices, we get:</p> <p>Comparing the element in the first row, first column:</p> \\[ x = -8 \\] <p>Comparing the element in the second row, first column:</p> \\[ 3 = y \\] <p>Thus, the values are \\(x = -8\\) and \\(y = 3\\).</p>"},{"location":"sem1/math/pyq/2024/#section-2-answer-any-six-from-the-following","title":"Section 2: Answer any six from the following","text":"<p>a. Define injective and surjective functions with one example for each.</p> <p>Ans.</p> <ul> <li> <p>Injective Function (One-to-one): A function \\(f: A \\rightarrow B\\) is called injective if distinct elements in the domain \\(A\\) have distinct images in the codomain \\(B\\).     Mathematically, for all \\(a_1, a_2 \\in A\\), if \\(f(a_1) = f(a_2)\\), then \\(a_1 = a_2\\).</p> <ul> <li>Example: The function \\(f: \\mathbb{Z} \\rightarrow \\mathbb{Z}\\) defined by \\(f(x) = x + 5\\) is injective because if \\(x_1 + 5 = x_2 + 5\\), then \\(x_1 = x_2\\).</li> </ul> </li> <li> <p>Surjective Function (Onto): A function \\(f: A \\rightarrow B\\) is called surjective if every element in the codomain \\(B\\) has at least one pre-image in the domain \\(A\\).     Mathematically, for every \\(y \\in B\\), there exists an \\(x \\in A\\) such that \\(f(x) = y\\).</p> <ul> <li>Example: The function \\(f: \\mathbb{R} \\rightarrow \\mathbb{R}\\) defined by \\(f(x) = x - 3\\) is surjective because for any real number \\(y\\), we can find \\(x = y + 3\\) such that \\(f(x) = y\\).</li> </ul> </li> </ul> <p>b. If \\(f:R \\rightarrow R\\) and \\(g:R \\rightarrow R\\) are defined as \\(f(x)=x^{2}\\) and \\(g(x)=x-3\\), find \\(f \\circ g\\) and \\(g \\circ f\\).</p> <p>Ans. Given functions are \\(f(x)=x^{2}\\) and \\(g(x)=x-3\\).</p> <ol> <li> <p>To find \\(f \\circ g\\):     The composition \\(f \\circ g\\) is defined as \\(f(g(x))\\).</p> \\[ (f \\circ g)(x) = f(g(x)) \\] <p>Substitute the expression for \\(g(x)\\): [ = f(x-3) ]</p> <p>Now apply the function \\(f\\) to \\((x-3)\\):</p> \\[ = (x-3)^2 \\] \\[ = x^2 - 6x + 9 \\] <p>Therefore, \\((f \\circ g)(x) = x^2 - 6x + 9\\).</p> </li> <li> <p>To find \\(g \\circ f\\):     The composition \\(g \\circ f\\) is defined as \\(g(f(x))\\).</p> \\[ (g \\circ f)(x) = g(f(x)) \\] <p>Substitute the expression for \\(f(x)\\):</p> \\[ = g(x^2) \\] <p>Now apply the function \\(g\\) to \\(x^2\\):</p> \\[ = x^2 - 3 \\] <p>Therefore, \\((g \\circ f)(x) = x^2 - 3\\).</p> </li> </ol> <p>c. Given the matrices \\(A\\) and \\(B\\), find the product \\(A \\cdot B\\).</p> \\[ A = \\begin{bmatrix} 2 &amp; -3 \\\\ 5 &amp; 4 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 6 &amp; -7 \\\\ 2 &amp; -8 \\end{bmatrix} \\] <p>Ans. To find the product \\(A \\cdot B\\), we multiply the rows of matrix \\(A\\) by the columns of matrix \\(B\\).</p> \\[ A \\cdot B = \\begin{bmatrix} 2 &amp; -3 \\\\ 5 &amp; 4 \\end{bmatrix} \\begin{bmatrix} 6 &amp; -7 \\\\ 2 &amp; -8 \\end{bmatrix} \\] \\[ = \\begin{bmatrix} (2)(6)+(-3)(2) &amp; (2)(-7)+(-3)(-8) \\\\ (5)(6)+(4)(2) &amp; (5)(-7)+(4)(-8) \\end{bmatrix} \\] \\[ = \\begin{bmatrix} 12-6 &amp; -14+24 \\\\ 30+8 &amp; -35-32 \\end{bmatrix} \\] \\[ = \\begin{bmatrix} 6 &amp; 10 \\\\ 38 &amp; -67 \\end{bmatrix} \\] <p>Thus, the product \\(A \\cdot B\\) is \\(\\begin{bmatrix} 6 &amp; 10 \\\\ 38 &amp; -67 \\end{bmatrix}\\).</p> <p>d. Find the minor and co-factors of the elements 2 and 7 in the following matrix:</p> \\[ A = \\begin{bmatrix} 2 &amp; -4 &amp; 5 \\\\ 3 &amp; 1 &amp; 7 \\\\ 0 &amp; -1 &amp; -2 \\end{bmatrix} \\] <p>Ans.</p> <p>For the element 2 (position \\(a_{11}\\)):</p> <ul> <li> <p>Minor (\\(M_{11}\\)): The minor is the determinant of the sub-matrix obtained by deleting the 1<sup>st</sup> row and 1<sup>st</sup> column.</p> \\[ M_{11} = \\det \\begin{bmatrix} 1 &amp; 7 \\\\ -1 &amp; -2 \\end{bmatrix} = (1)(-2) - (7)(-1) = -2 + 7 = 5 \\] </li> <li> <p>Co-factor (\\(C_{11}\\)): The co-factor is given by \\(C_{ij} = (-1)^{i+j} M_{ij}\\).</p> \\[ C_{11} = (-1)^{1+1} M_{11} = (1)(5) = 5 \\] </li> </ul> <p>For the element 7 (position \\(a_{23}\\)):</p> <ul> <li> <p>Minor (\\(M_{23}\\)): The minor is the determinant of the sub-matrix obtained by deleting the 2<sup>nd</sup> row and 3<sup>rd</sup> column.</p> \\[ M_{23} = \\det \\begin{bmatrix} 2 &amp; -4 \\\\ 0 &amp; -1 \\end{bmatrix} = (2)(-1) - (-4)(0) = -2 - 0 = -2 \\] </li> <li> <p>Co-factor (\\(C_{23}\\)): The co-factor is given by \\(C_{ij} = (-1)^{i+j} M_{ij}\\).</p> \\[ C_{23} = (-1)^{2+3} M_{23} = (-1)^5(-2) = (-1)(-2) = 2 \\] </li> </ul> <p>e. For any three non-empty sets A, B, and C, prove that \\(A-(B \\cup C)=(A-B) \\cap (A-C)\\).</p> <p>Ans. To prove the equality, we will show that any element belonging to the left-hand side (LHS) also belongs to the right-hand side (RHS), and vice-versa.</p> <p>Let \\(x\\) be an arbitrary element such that \\(x \\in A - (B \\cup C)\\).</p> \\[ x \\in A - (B \\cup C) \\iff x \\in A \\text{ and } x \\notin (B \\cup C) \\quad \\text{(by definition of set difference)} \\] \\[ \\iff x \\in A \\text{ and } (x \\notin B \\text{ and } x \\notin C) \\quad \\text{(by definition of union)} \\] \\[ \\iff (x \\in A \\text{ and } x \\notin B) \\text{ and } (x \\in A \\text{ and } x \\notin C) \\quad \\text{(Distributive law of logic)} \\] \\[ \\iff (x \\in A-B) \\text{ and } (x \\in A-C) \\quad \\text{(by definition of set difference)} \\] \\[ \\iff x \\in (A-B) \\cap (A-C) \\quad \\text{(by definition of intersection)} \\] <p>Since \\(x \\in A - (B \\cup C) \\iff x \\in (A-B) \\cap (A-C)\\), the two sets are equal. Hence, \\(A-(B \\cup C)=(A-B) \\cap (A-C)\\) is proved.</p> <p>f. Find the Trace of the matrix A:</p> \\[ A = \\begin{bmatrix} -1 &amp; 0 &amp; 3 \\\\ 2 &amp; 4 &amp; 5 \\\\ 7 &amp; 3 &amp; 6 \\end{bmatrix} \\] <p>Ans. The trace of a square matrix is the sum of the elements on its main diagonal (from the upper left to the lower right). The elements on the main diagonal of matrix A are -1, 4, and 6.</p> \\[ \\text{Trace}(A) = -1 + 4 + 6 \\] \\[ \\text{Trace}(A) = 9 \\] <p>The trace of the matrix A is 9.</p> <p>g. If \\(P(A)=\\frac{2}{3}\\), \\(P(B)=\\frac{3}{4}\\), and \\(P(A \\cup B)=\\frac{1}{2}\\), find the value of \\(P(A/B)\\).</p> <p>Ans. The formula for conditional probability is \\(P(A/B) = \\frac{P(A \\cap B)}{P(B)}\\). First, we need to find \\(P(A \\cap B)\\) using the addition rule of probability:</p> \\[ P(A \\cup B) = P(A) + P(B) - P(A \\cap B) \\] <p>Substituting the given values: [ \\frac{1}{2} = \\frac{2}{3} + \\frac{3}{4} - P(A \\cap B) ]</p> \\[ P(A \\cap B) = \\frac{2}{3} + \\frac{3}{4} - \\frac{1}{2} \\] <p>To add/subtract the fractions, we find a common denominator, which is 12.</p> \\[ P(A \\cap B) = \\frac{2 \\times 4}{12} + \\frac{3 \\times 3}{12} - \\frac{1 \\times 6}{12} \\] \\[ P(A \\cap B) = \\frac{8 + 9 - 6}{12} = \\frac{11}{12} \\] <p>Now we can find \\(P(A/B)\\):</p> \\[ P(A/B) = \\frac{P(A \\cap B)}{P(B)} = \\frac{11/12}{3/4} = \\frac{11}{12} \\times \\frac{4}{3} = \\frac{11 \\times 1}{3 \\times 3} = \\frac{11}{9} \\] <p>Note: The result \\(P(A/B) = 11/9\\) is greater than 1. This indicates that the initial probability values given in the question are inconsistent, as a probability value can never exceed 1. For example, \\(P(A \\cap B)\\) cannot be greater than \\(P(A)\\) or \\(P(B)\\), but here \\(\\frac{11}{12} &gt; \\frac{2}{3}\\) and \\(\\frac{11}{12} &gt; \\frac{3}{4}\\). However, the calculation based on the given numbers is as shown.</p> <p>h. Define a Partially Ordered Set (POSET).</p> <p>Ans.</p> <p>A Partially Ordered Set (or POSET) consists of a non-empty set \\(P\\) together with a binary relation \\(\\preceq\\) defined on \\(P\\), such that the relation satisfies the following three properties for all \\(a, b, c \\in P\\):</p> <ol> <li>Reflexivity: \\(a \\preceq a\\) (Every element is related to itself).</li> <li>Antisymmetry: If \\(a \\preceq b\\) and \\(b \\preceq a\\), then \\(a = b\\) (If two elements are related to each other, they must be the same element).</li> <li>Transitivity: If \\(a \\preceq b\\) and \\(b \\preceq c\\), then \\(a \\preceq c\\) (If a is related to b, and b is related to c, then a is related to c).</li> </ol> <p>The pair \\((P, \\preceq)\\) is called a poset.</p> <p>i. Calculate the median from the following data: * \\(x: 1, 2, 3, 4, 5\\) * \\(y: 8, 5, 6, 2, 1\\)</p> <p>Ans. Here, \\(x\\) represents the observations and \\(y\\) represents their corresponding frequencies (\\(f\\)). To find the median, we first calculate the cumulative frequency (\\(cf\\)).</p> \\(x\\) Frequency (\\(f\\)) Cumulative Frequency (\\(cf\\)) 1 8 8 2 5 8 + 5 = 13 3 6 13 + 6 = 19 4 2 19 + 2 = 21 5 1 21 + 1 = 22 <p>The total number of observations is \\(N = \\sum f = 22\\). Since \\(N\\) is an even number, the median is the average of the \\(\\left(\\frac{N}{2}\\right)^{th}\\) and \\(\\left(\\frac{N}{2} + 1\\right)^{th}\\) observations.</p> \\[ \\text{Median} = \\frac{\\left(\\frac{22}{2}\\right)^{th} \\text{ obs} + \\left(\\frac{22}{2} + 1\\right)^{th} \\text{ obs}}{2} = \\frac{11^{th} \\text{ obs} + 12^{th} \\text{ obs}}{2} \\] <p>From the cumulative frequency table: * Observations 1 to 8 have the value 1. * Observations 9 to 13 have the value 2. This means both the \\(11^{th}\\) and \\(12^{th}\\) observations fall in the group where \\(x=2\\).</p> \\[ \\text{Median} = \\frac{2 + 2}{2} = \\frac{4}{2} = 2 \\] <p>The median of the data is 2.</p> <p>j. What is the empirical relation between mean, median, and mode?</p> <p>Ans. The empirical relationship between mean, median, and mode describes an approximate relationship between the three measures of central tendency for a unimodal distribution that is moderately skewed. The relation is given by the formula:</p> \\[ \\text{Mean} - \\text{Mode} \\approx 3 (\\text{Mean} - \\text{Median}) \\] <p>This can be rearranged to express the mode in terms of the mean and median:</p> \\[ \\text{Mode} \\approx 3 \\times \\text{Median} - 2 \\times \\text{Mean} \\]"},{"location":"sem1/math/pyq/2024/#section-3-answer-any-four-from-the-following","title":"Section 3: Answer any four from the following","text":"<p>a. For any four non-empty sets A, B, S, and T, prove that \\((A \\times B) \\cap (S \\times T) = (A \\cap S) \\times (B \\cap T)\\).</p> <p>Ans. To prove the set equality, we will show that an element \\((x, y)\\) belongs to the left-hand side (LHS) if and only if it belongs to the right-hand side (RHS).</p> <p>Let \\((x, y)\\) be an arbitrary element of \\((A \\times B) \\cap (S \\times T)\\).</p> \\[ (x, y) \\in (A \\times B) \\cap (S \\times T) \\] <p>By the definition of intersection of sets:</p> \\[ \\iff (x, y) \\in (A \\times B) \\quad \\text{and} \\quad (x, y) \\in (S \\times T) \\] <p>By the definition of the Cartesian product:</p> \\[ \\iff (x \\in A \\text{ and } y \\in B) \\quad \\text{and} \\quad (x \\in S \\text{ and } y \\in T) \\] <p>Rearranging the terms using the commutative and associative properties of logical 'and':</p> \\[ \\iff (x \\in A \\text{ and } x \\in S) \\quad \\text{and} \\quad (y \\in B \\text{ and } y \\in T) \\] <p>By the definition of intersection of sets:</p> \\[ \\iff x \\in (A \\cap S) \\quad \\text{and} \\quad y \\in (B \\cap T) \\] <p>By the definition of the Cartesian product:</p> \\[ \\iff (x, y) \\in (A \\cap S) \\times (B \\cap T) \\] <p>Since an arbitrary element \\((x, y)\\) is in the LHS if and only if it is in the RHS, the two sets are equal. Hence, proved.</p> <p>b. Using the principle of mathematical induction, prove that \\(P(n) = 10^{n} + 3 \\cdot 4^{n+2} + 5\\) is divisible by 9 for all natural numbers \\(n\\).</p> <p>Ans. Let the given statement be \\(P(n)\\): \\(10^n + 3 \\cdot 4^{n+2} + 5\\) is divisible by 9.</p> <p>Step 1: Base Case For \\(n=1\\), we have:</p> \\[ P(1) = 10^1 + 3 \\cdot 4^{1+2} + 5 \\] \\[ = 10 + 3 \\cdot 4^3 + 5 \\] \\[ = 10 + 3 \\cdot 64 + 5 \\] \\[ = 10 + 192 + 5 = 207 \\] <p>Since \\(207 = 9 \\times 23\\), \\(P(1)\\) is divisible by 9. Thus, the base case is true.</p> <p>Step 2: Inductive Hypothesis Let us assume that \\(P(k)\\) is true for some natural number \\(k\\). That is, \\(10^k + 3 \\cdot 4^{k+2} + 5\\) is divisible by 9. We can write this as \\(10^k + 3 \\cdot 4^{k+2} + 5 = 9m\\) for some integer \\(m\\).</p> \\[ \\implies 10^k = 9m - 3 \\cdot 4^{k+2} - 5 \\quad \\dots(i) \\] <p>Step 3: Inductive Step We need to prove that \\(P(k+1)\\) is also true.</p> \\[ P(k+1) = 10^{k+1} + 3 \\cdot 4^{(k+1)+2} + 5 \\] \\[ = 10^{k+1} + 3 \\cdot 4^{k+3} + 5 \\] \\[ = 10 \\cdot 10^k + 3 \\cdot 4 \\cdot 4^{k+2} + 5 \\] \\[ = 10 \\cdot 10^k + 12 \\cdot 4^{k+2} + 5 \\] <p>Substituting the value of \\(10^k\\) from equation (i):</p> \\[ = 10 (9m - 3 \\cdot 4^{k+2} - 5) + 12 \\cdot 4^{k+2} + 5 \\] \\[ = 90m - 30 \\cdot 4^{k+2} - 50 + 12 \\cdot 4^{k+2} + 5 \\] \\[ = 90m - (30 - 12) \\cdot 4^{k+2} - 45 \\] \\[ = 90m - 18 \\cdot 4^{k+2} - 45 \\] <p>Factoring out 9 from each term:</p> \\[ = 9 (10m - 2 \\cdot 4^{k+2} - 5) \\] <p>Since \\(m\\) and \\(k\\) are integers, \\((10m - 2 \\cdot 4^{k+2} - 5)\\) is also an integer. Thus, \\(P(k+1)\\) is a multiple of 9.</p> <p>By the principle of mathematical induction, \\(P(n)\\) is true for all natural numbers \\(n\\). Hence, proved.</p> <p>e. Find the mean deviation about the median for the given data: | \\(x_i\\) | 5 | 7 | 9 | 10 | 12 | 15 | | :--- | :-: | :-: | :-: | :--: | :--: | :--: | | \\(f_i\\) | 8 | 6 | 2 | 2 | 6 | 6 |</p> <p>Ans. Step 1: Calculate the Median First, we find the cumulative frequency (\\(cf\\)) to locate the median.</p> \\(x_i\\) Frequency (\\(f_i\\)) Cumulative Frequency (\\(cf\\)) 5 8 8 7 6 14 9 2 16 10 2 18 12 6 24 15 6 30 <p>The total frequency is \\(N = \\sum f_i = 30\\). Since \\(N\\) is even, the median is the average of the \\(\\left(\\frac{N}{2}\\right)^{th}\\) and \\(\\left(\\frac{N}{2} + 1\\right)^{th}\\) observations. This corresponds to the average of the \\(15^{th}\\) and \\(16^{th}\\) observations. From the \\(cf\\) column, the \\(15^{th}\\) and \\(16^{th}\\) observations both fall in the group where \\(x_i = 9\\). So, Median \\(M = 9\\).</p> <p>Step 2: Calculate Mean Deviation about the Median The formula is \\(MD_M = \\frac{\\sum f_i |x_i - M|}{N}\\). We create a calculation table:</p> <p>| \\(x_i\\) | \\(f_i\\) | \\(|x_i - M| = |x_i - 9|\\) | \\(f_i |x_i - M|\\) | | :---: | :---: | :---: | :---: | |   5   |   8   |   4   |  32   | |   7   |   6   |   2   |  12   | |   9   |   2   |   0   |   0   | |   10  |   2   |   1   |   2   | |   12  |   6   |   3   |  18   | |   15  |   6   |   6   |  36   | | Total | \\(N=30\\) | | \\(\\sum f_i |x_i - M| = 100\\) |</p> <p>Now, we compute the mean deviation:</p> \\[ MD_M = \\frac{100}{30} = \\frac{10}{3} \\approx 3.33 \\] <p>The mean deviation about the median is approximately 3.33.</p> <p>f. Solve the following system of linear equations using Cramer's rule:</p> \\[ \\begin{cases} 2x - y + 3z = 9 \\\\ x + y + z = 6 \\\\ x - y + z = 2 \\end{cases} \\] <p>Ans. The given system of equations can be written in matrix form \\(AX=B\\), where:</p> \\[ A = \\begin{bmatrix} 2 &amp; -1 &amp; 3 \\\\ 1 &amp; 1 &amp; 1 \\\\ 1 &amp; -1 &amp; 1 \\end{bmatrix}, \\quad X = \\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}, \\quad B = \\begin{bmatrix} 9 \\\\ 6 \\\\ 2 \\end{bmatrix} \\] <p>Step 1: Calculate the determinant D of the coefficient matrix A.</p> \\[ D = \\det(A) = \\begin{vmatrix} 2 &amp; -1 &amp; 3 \\\\ 1 &amp; 1 &amp; 1 \\\\ 1 &amp; -1 &amp; 1 \\end{vmatrix} \\] \\[ = 2(1\\cdot1 - 1\\cdot(-1)) - (-1)(1\\cdot1 - 1\\cdot1) + 3(1\\cdot(-1) - 1\\cdot1) \\] \\[ = 2(2) + 1(0) + 3(-2) = 4 - 6 = -2 \\] <p>Since \\(D \\neq 0\\), a unique solution exists.</p> <p>Step 2: Calculate \\(D_x\\), \\(D_y\\), and \\(D_z\\).</p> \\[ D_x = \\begin{vmatrix} 9 &amp; -1 &amp; 3 \\\\ 6 &amp; 1 &amp; 1 \\\\ 2 &amp; -1 &amp; 1 \\end{vmatrix} = 9(1 - (-1)) - (-1)(6-2) + 3(-6-2) = 18+4-24 = -2 \\] \\[ D_y = \\begin{vmatrix} 2 &amp; 9 &amp; 3 \\\\ 1 &amp; 6 &amp; 1 \\\\ 1 &amp; 2 &amp; 1 \\end{vmatrix} = 2(6 - 2) - 9(1-1) + 3(2-6) = 8-0-12 = -4 \\] \\[ D_z = \\begin{vmatrix} 2 &amp; -1 &amp; 9 \\\\ 1 &amp; 1 &amp; 6 \\\\ 1 &amp; -1 &amp; 2 \\end{vmatrix} = 2(2 - (-6)) - (-1)(2-6) + 9(-1-1) = 16-4-18 = -6 \\] <p>Step 3: Find x, y, and z. According to Cramer's rule:</p> \\[ x = \\frac{D_x}{D} = \\frac{-2}{-2} = 1 \\] \\[ y = \\frac{D_y}{D} = \\frac{-4}{-2} = 2 \\] \\[ z = \\frac{D_z}{D} = \\frac{-6}{-2} = 3 \\] <p>The solution is \\(x=1, y=2, z=3\\).</p> <p>g. Find the inverse of the matrix A:</p> \\[ A = \\begin{bmatrix} 0 &amp; 1 &amp; 2 \\\\ 1 &amp; 2 &amp; 3 \\\\ 3 &amp; 1 &amp; 1 \\end{bmatrix} \\] <p>Ans. We will use the formula \\(A^{-1} = \\frac{1}{\\det(A)}\\text{adj}(A)\\).</p> <p>Step 1: Find the determinant of A.</p> \\[ \\det(A) = 0(2\\cdot1 - 3\\cdot1) - 1(1\\cdot1 - 3\\cdot3) + 2(1\\cdot1 - 2\\cdot3) \\] \\[ = 0 - 1(1-9) + 2(1-6) = -1(-8) + 2(-5) = 8 - 10 = -2 \\] <p>Since \\(\\det(A) \\neq 0\\), the inverse exists.</p> <p>Step 2: Find the Adjoint of A. The adjoint is the transpose of the cofactor matrix. Let's find the cofactors:</p> \\[ C_{11} = (2\\cdot1 - 3\\cdot1) = -1 \\] \\[ C_{12} = -(1\\cdot1 - 3\\cdot3) = 8 \\] \\[ C_{13} = (1\\cdot1 - 2\\cdot3) = -5 \\] \\[ C_{21} = -(1\\cdot1 - 2\\cdot1) = 1 \\] \\[ C_{22} = (0\\cdot1 - 2\\cdot3) = -6 \\] \\[ C_{23} = -(0\\cdot1 - 1\\cdot3) = 3 \\] \\[ C_{31} = (1\\cdot3 - 2\\cdot2) = -1 \\] \\[ C_{32} = -(0\\cdot3 - 2\\cdot1) = 2 \\] \\[ C_{33} = (0\\cdot2 - 1\\cdot1) = -1 \\] <p>The cofactor matrix is \\(C = \\begin{bmatrix} -1 &amp; 8 &amp; -5 \\\\ 1 &amp; -6 &amp; 3 \\\\ -1 &amp; 2 &amp; -1 \\end{bmatrix}\\). The adjoint of A is the transpose of C:</p> \\[ \\text{adj}(A) = C^T = \\begin{bmatrix} -1 &amp; 1 &amp; -1 \\\\ 8 &amp; -6 &amp; 2 \\\\ -5 &amp; 3 &amp; -1 \\end{bmatrix} \\] <p>Step 3: Calculate the inverse.</p> \\[ A^{-1} = \\frac{1}{-2} \\begin{bmatrix} -1 &amp; 1 &amp; -1 \\\\ 8 &amp; -6 &amp; 2 \\\\ -5 &amp; 3 &amp; -1 \\end{bmatrix} \\] \\[ A^{-1} = \\begin{bmatrix} 1/2 &amp; -1/2 &amp; 1/2 \\\\ -4 &amp; 3 &amp; -1 \\\\ 5/2 &amp; -3/2 &amp; 1/2 \\end{bmatrix} \\] <p>This is the required inverse matrix.</p>"},{"location":"sem1/math/u1/functions/","title":"Functions","text":""},{"location":"sem1/math/u1/functions/#definition-of-a-function","title":"Definition of a Function","text":"<p>In mathematics, a function is a rule that establishes a relationship between two non-empty sets. It maps each element from the first set, called the domain, to exactly one element in the second set, called the codomain.</p> <p>Think of a function as a machine: you put an input in (from the domain), and it gives you a specific, single output (from the codomain).</p>"},{"location":"sem1/math/u1/functions/#formal-definition","title":"Formal Definition","text":"<p>Let \\(A\\) and \\(B\\) be two non-empty sets. A function \\(f\\) from \\(A\\) to \\(B\\), denoted as \\(f: A \\to B\\), is a rule or a correspondence that assigns to each element \\(x\\) in set \\(A\\) a unique element \\(y\\) in set \\(B\\).</p> <ul> <li>The element \\(y\\) is called the image of \\(x\\) under \\(f\\). We write this as \\(y = f(x)\\).</li> <li>The element \\(x\\) is called the pre-image of \\(y\\).</li> </ul>"},{"location":"sem1/math/u1/functions/#key-components-of-a-function","title":"Key Components of a Function","text":"<ul> <li>Domain: The set of all possible input values. For a function \\(f: A \\to B\\), the domain is the set \\(A\\).</li> <li>Codomain: The set of all possible output values. For a function \\(f: A \\to B\\), the codomain is the set \\(B\\).</li> <li> <p>Range: The set of all actual output values produced by the function. The range is always a subset of the codomain.</p> \\[ \\text{Range}(f) = \\{y \\in B \\mid y = f(x) \\text{ for some } x \\in A\\} \\] </li> </ul>"},{"location":"sem1/math/u1/functions/#essential-properties-of-a-function","title":"Essential Properties of a Function","text":"<p>For a relation to be a function, it must satisfy two crucial conditions:</p> <ol> <li>Totality: Every element in the domain \\(A\\) must have an image in the codomain \\(B\\). No element in the domain can be left unmapped.</li> <li>Uniqueness: Each element in the domain \\(A\\) must be mapped to exactly one element in the codomain \\(B\\). An input cannot have multiple outputs.</li> </ol> <p>Example</p> <p>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{a, b, c, d\\}\\).</p> <ul> <li>Let \\(f = \\{(1, a), (2, b), (3, c)\\}\\). This is a valid function. Every element of \\(A\\) is mapped to a unique element in \\(B\\).<ul> <li>Domain: \\(\\{1, 2, 3\\}\\)</li> <li>Codomain: \\(\\{a, b, c, d\\}\\)</li> <li>Range: \\(\\{a, b, c\\}\\)</li> </ul> </li> <li>Let \\(g = \\{(1, a), (2, b)\\}\\). This is not a function because the element \\(3 \\in A\\) is not mapped to any element in \\(B\\) (violates totality).</li> <li>Let \\(h = \\{(1, a), (1, b), (2, c), (3, d)\\}\\). This is not a function because the element \\(1 \\in A\\) is mapped to two different elements, \\(a\\) and \\(b\\), in \\(B\\) (violates uniqueness).</li> </ul>"},{"location":"sem1/math/u1/functions/#one-to-one-function-injection","title":"One-to-One Function (Injection)","text":"<p>A function is one-to-one if every distinct element in the domain is mapped to a distinct element in the codomain. In other words, no two different inputs produce the same output. Such a function is also called an injective function or an injection.</p>"},{"location":"sem1/math/u1/functions/#formal-definition_1","title":"Formal Definition","text":"<p>A function \\(f: A \\to B\\) is one-to-one (injective) if for any two elements \\(x_1, x_2 \\in A\\):</p> \\[ \\text{If } f(x_1) = f(x_2), \\text{ then } x_1 = x_2. \\] <p>An equivalent way to state this (the contrapositive) is:</p> \\[ \\text{If } x_1 \\neq x_2, \\text{ then } f(x_1) \\neq f(x_2). \\]"},{"location":"sem1/math/u1/functions/#conditions-and-properties","title":"Conditions and Properties","text":"<ul> <li>For finite sets, if a function \\(f: A \\to B\\) is injective, then the cardinality of the domain must be less than or equal to the cardinality of the codomain: \\(|A| \\le |B|\\).</li> <li>Graphical Test (Horizontal Line Test): A function is one-to-one if and only if no horizontal line intersects its graph at more than one point.</li> </ul> <p>Example of a One-to-One Function</p> <p>Let \\(f: \\mathbb{Z} \\to \\mathbb{Z}\\) be defined by \\(f(x) = x + 5\\). To prove it's one-to-one, we assume \\(f(x_1) = f(x_2)\\) for some \\(x_1, x_2 \\in \\mathbb{Z}\\).</p> \\[ x_1 + 5 = x_2 + 5 \\] <p>Subtracting 5 from both sides gives:</p> \\[ x_1 = x_2 \\] <p>Since \\(f(x_1) = f(x_2)\\) implies \\(x_1 = x_2\\), the function \\(f\\) is one-to-one.</p> <p>Example of a Function that is NOT One-to-One</p> <p>Let \\(g: \\mathbb{R} \\to \\mathbb{R}\\) be defined by \\(g(x) = x^2\\). This function is not one-to-one. To show this, we can find a counterexample.</p> <p>Let \\(x_1 = 2\\) and \\(x_2 = -2\\). Here, \\(x_1 \\neq x_2\\). But their images are:</p> \\[ g(2) = 2^2 = 4 \\] \\[ g(-2) = (-2)^2 = 4 \\] <p>Since \\(g(2) = g(-2)\\) but \\(2 \\neq -2\\), the function is not one-to-one.</p>"},{"location":"sem1/math/u1/functions/#onto-function-surjection","title":"Onto Function (Surjection)","text":"<p>A function is onto if every element in the codomain is the image of at least one element from the domain. This means the function \"hits\" or \"covers\" every possible output value in the codomain. Such a function is also called a surjective function or a surjection.</p> <p>For an onto function, the range is equal to the codomain.</p>"},{"location":"sem1/math/u1/functions/#formal-definition_2","title":"Formal Definition","text":"<p>A function \\(f: A \\to B\\) is onto (surjective) if for every element \\(y \\in B\\), there exists at least one element \\(x \\in A\\) such that \\(f(x) = y\\).</p> \\[ \\forall y \\in B, \\exists x \\in A \\text{ such that } f(x) = y. \\]"},{"location":"sem1/math/u1/functions/#conditions-and-properties_1","title":"Conditions and Properties","text":"<ul> <li>For finite sets, if a function \\(f: A \\to B\\) is surjective, then the cardinality of the domain must be greater than or equal to the cardinality of the codomain: \\(|A| \\ge |B|\\).</li> <li>To prove a function is onto, you must show that for any arbitrary element \\(y\\) in the codomain, you can find an \\(x\\) in the domain that maps to it.</li> </ul> <p>Example of an Onto Function</p> <p>Let \\(f: \\mathbb{R} \\to \\mathbb{R}\\) be defined by \\(f(x) = x + 5\\). To prove it's onto, we take an arbitrary element \\(y\\) from the codomain \\(\\mathbb{R}\\). We need to find an \\(x\\) from the domain \\(\\mathbb{R}\\) such that \\(f(x) = y\\).</p> \\[ x + 5 = y \\] <p>Solving for \\(x\\), we get:</p> \\[ x = y - 5 \\] <p>Since \\(y\\) is a real number, \\(y-5\\) is also a real number. This means that for any \\(y \\in \\mathbb{R}\\) we choose, we can find a corresponding \\(x \\in \\mathbb{R}\\) (which is \\(y-5\\)) that maps to it. Therefore, the function \\(f\\) is onto.</p> <p>Example of a Function that is NOT Onto</p> <p>Let \\(g: \\mathbb{R} \\to \\mathbb{R}\\) be defined by \\(g(x) = x^2\\). The codomain is the set of all real numbers, \\(\\mathbb{R}\\). The range of \\(g(x) = x^2\\) is the set of all non-negative real numbers, \\([0, \\infty)\\), because the square of any real number cannot be negative. Since the Range \\([0, \\infty)\\) is not equal to the Codomain \\(\\mathbb{R}\\), the function is not onto. For example, there is no real number \\(x\\) such that \\(x^2 = -4\\).</p>"},{"location":"sem1/math/u1/functions/#bijective-function-one-to-one-correspondence","title":"Bijective Function (One-to-One Correspondence)","text":"<p>A function is bijective if it is both one-to-one (injective) and onto (surjective). A bijective function creates a perfect pairing between the elements of the domain and the codomain.</p>"},{"location":"sem1/math/u1/functions/#conditions-and-properties_2","title":"Conditions and Properties","text":"<ul> <li>For a function to be bijective, every element in the domain must map to a unique element in the codomain, and every element in the codomain must be mapped to by some element in the domain.</li> <li>For finite sets, if a function \\(f: A \\to B\\) is bijective, the cardinality of the domain must be equal to the cardinality of the codomain: \\(|A| = |B|\\).</li> <li>Bijective functions have an inverse function, denoted \\(f^{-1}\\).</li> </ul> <p>Example of a Bijective Function</p> <p>Let \\(f: \\mathbb{R} \\to \\mathbb{R}\\) be defined by \\(f(x) = 2x - 3\\).</p> <ol> <li> <p>Is it One-to-One?     Assume \\(f(x_1) = f(x_2)\\).</p> <ul> <li>\\( 2x_1 - 3 = 2x_2 - 3 \\)</li> <li>\\( 2x_1 = 2x_2 \\)</li> <li>\\( x_1 = x_2 \\)</li> </ul> <p>Yes, it is one-to-one.</p> </li> <li> <p>Is it Onto?     Let \\(y\\) be an arbitrary element in the codomain \\(\\mathbb{R}\\).</p> <p>\\( y = 2x - 3 \\)</p> <p>Solve for \\(x\\):</p> <ul> <li>\\( y + 3 = 2x \\)</li> <li>\\( x = \\frac{y+3}{2} \\)</li> </ul> <p>For any real number \\(y\\), \\(x = (y+3)/2\\) is also a real number. Thus, for any \\(y\\), we can find an \\(x\\). Yes, it is onto.</p> </li> </ol> <p>Since the function is both one-to-one and onto, it is bijective.</p>"},{"location":"sem1/math/u1/functions/#principles-of-mathematical-induction","title":"Principles of Mathematical Induction","text":"<p>Mathematical Induction is a powerful and fundamental proof technique in mathematics used to establish the truth of a statement for all natural numbers (or any well-ordered set starting from a specific integer). It's a formal method for proving that a property \\(P(n)\\) holds for every natural number \\(n \\ge n_0\\), where \\(n_0\\) is some starting integer (usually 0 or 1).</p> <p>The core idea is analogous to the domino effect. If you have a line of dominos: 1.  You can knock over the first domino. (Base Case) 2.  Each domino is placed so that if it falls, it will knock over the next one. (Inductive Step)</p> <p>If both conditions are met, you can conclude that all the dominos will eventually fall.</p>"},{"location":"sem1/math/u1/functions/#the-first-principle-of-mathematical-induction-weak-induction","title":"The First Principle of Mathematical Induction (Weak Induction)","text":"<p>This is the most common form of induction. To prove a statement \\(P(n)\\) for all integers \\(n \\ge n_0\\), you must complete two steps:</p> <p>The Two Steps of Induction</p> <ol> <li> <p>Base Case (or Basis Step):     Prove that the statement is true for the initial value, \\(n = n_0\\). This is the starting point of the proof, analogous to tipping the first domino.</p> </li> <li> <p>Inductive Step:     Prove that if the statement is true for an arbitrary integer \\(k \\ge n_0\\), then it must also be true for the next integer, \\(k+1\\). This step consists of two parts:</p> <ul> <li>Inductive Hypothesis: Assume that \\(P(k)\\) is true for some arbitrary integer \\(k \\ge n_0\\).</li> <li>Inductive Proof: Use the inductive hypothesis to show that \\(P(k+1)\\) is true.</li> </ul> </li> </ol> <p>If both the Base Case and the Inductive Step are proven to be true, then by the Principle of Mathematical Induction, the statement \\(P(n)\\) is true for all integers \\(n \\ge n_0\\).</p>"},{"location":"sem1/math/u1/functions/#example-sum-of-the-first-n-positive-integers","title":"Example: Sum of the First \\(n\\) Positive Integers","text":"<p>Proposition \\(P(n)\\): For all integers \\(n \\ge 1\\), the sum of the first \\(n\\) positive integers is given by the formula:</p> \\[ 1 + 2 + 3 + \\dots + n = \\frac{n(n+1)}{2} \\] <p>Proof:</p> <ol> <li> <p>Base Case (\\(n=1\\)):     We need to show that \\(P(1)\\) is true.</p> <ul> <li>LHS (Left-Hand Side): The sum of the first 1 integer is just \\(1\\).</li> <li>RHS (Right-Hand Side): \\(\\frac{1(1+1)}{2} = \\frac{1(2)}{2} = 1\\). Since LHS = RHS (\\(1=1\\)), the base case holds. The first domino has fallen.</li> </ul> </li> <li> <p>Inductive Step:</p> <ul> <li> <p>Inductive Hypothesis: Assume that \\(P(k)\\) is true for some arbitrary integer \\(k \\ge 1\\).     This means we assume:</p> \\[ 1 + 2 + 3 + \\dots + k = \\frac{k(k+1)}{2} \\] </li> <li> <p>Inductive Proof: We need to prove that \\(P(k+1)\\) is true. That is, we need to show:</p> \\[ 1 + 2 + 3 + \\dots + k + (k+1) = \\frac{(k+1)((k+1)+1)}{2} = \\frac{(k+1)(k+2)}{2} \\] <p>Let's start with the LHS of \\(P(k+1)\\) and use our Inductive Hypothesis.</p> \\[ \\underbrace{1 + 2 + 3 + \\dots + k}_{\\text{This is the LHS of } P(k)} + (k+1) \\] <p>By the Inductive Hypothesis, we can substitute the sum with our formula:</p> \\[ = \\left( \\frac{k(k+1)}{2} \\right) + (k+1) \\] <p>Now, we use algebra to simplify the expression and show it equals the RHS of \\(P(k+1)\\).</p> \\[ = \\frac{k(k+1)}{2} + \\frac{2(k+1)}{2} \\] \\[ = \\frac{k(k+1) + 2(k+1)}{2} \\] <p>Factor out the common term \\((k+1)\\):</p> \\[ = \\frac{(k+1)(k+2)}{2} \\] <p>This is exactly the RHS of the statement for \\(P(k+1)\\). Thus, we have shown that if \\(P(k)\\) is true, then \\(P(k+1)\\) must also be true.</p> </li> </ul> </li> </ol> <p>Conclusion: Since both the base case and the inductive step have been proven, by the principle of mathematical induction, the formula is true for all integers \\(n \\ge 1\\).</p>"},{"location":"sem1/math/u1/functions/#the-second-principle-of-mathematical-induction-strong-induction","title":"The Second Principle of Mathematical Induction (Strong Induction)","text":"<p>Strong induction is a variant of mathematical induction where the inductive step uses a stronger assumption. Instead of just assuming \\(P(k)\\) is true, we assume that \\(P(j)\\) is true for all values from the base case up to \\(k\\).</p> <p>The Two Steps of Strong Induction</p> <ol> <li> <p>Base Case (or Basis Step):     Prove that the statement is true for the initial value, \\(P(n_0)\\). Sometimes, it is necessary to prove the statement for several initial values.</p> </li> <li> <p>Inductive Step:     Prove that if the statement is true for all integers \\(j\\) from \\(n_0\\) up to \\(k\\) (i.e., \\(P(n_0), P(n_0+1), \\dots, P(k)\\) are all true), then it must also be true for \\(k+1\\).</p> <ul> <li>Inductive Hypothesis: Assume that \\(P(j)\\) is true for all integers \\(j\\) such that \\(n_0 \\le j \\le k\\).</li> <li>Inductive Proof: Use this (stronger) hypothesis to show that \\(P(k+1)\\) is true.</li> </ul> </li> </ol> <p>Strong induction is particularly useful in proofs where the truth of the \\((k+1)\\)-th case depends not just on the immediately preceding case (\\(k\\)) but on one or more earlier cases.</p>"},{"location":"sem1/math/u1/functions/#example-prime-factorization","title":"Example: Prime Factorization","text":"<p>Proposition \\(P(n)\\): Every integer \\(n \\ge 2\\) can be written as a product of prime numbers.</p> <p>Proof:</p> <ol> <li> <p>Base Case (\\(n=2\\)):     The integer 2 is a prime number. It can be written as a product of one prime: itself. So, \\(P(2)\\) is true.</p> </li> <li> <p>Inductive Step:</p> <ul> <li>Inductive Hypothesis (Strong): Assume that for some arbitrary integer \\(k \\ge 2\\), the statement \\(P(j)\\) is true for all integers \\(j\\) where \\(2 \\le j \\le k\\). This means we assume every integer from 2 to \\(k\\) can be written as a product of primes.</li> <li> <p>Inductive Proof: We need to prove that \\(P(k+1)\\) is true. That is, we need to show that the integer \\(k+1\\) can be written as a product of primes. We consider two cases for \\(k+1\\):</p> <ul> <li> <p>Case 1: \\(k+1\\) is a prime number.     If \\(k+1\\) is prime, then it is a product of one prime (itself). Thus, \\(P(k+1)\\) is true.</p> </li> <li> <p>Case 2: \\(k+1\\) is a composite number.     If \\(k+1\\) is composite, then by definition, it can be written as a product of two smaller integers, \\(a\\) and \\(b\\).</p> \\[ k+1 = a \\cdot b \\] <p>where \\(2 \\le a \\le k\\) and \\(2 \\le b \\le k\\).</p> <p>Since both \\(a\\) and \\(b\\) are in the range \\([2, k]\\), our strong inductive hypothesis applies to both of them. -   By the hypothesis, \\(a\\) can be written as a product of primes (e.g., \\(p_1 \\cdot p_2 \\cdot \\dots \\)). -   By the hypothesis, \\(b\\) can be written as a product of primes (e.g., \\(q_1 \\cdot q_2 \\cdot \\dots \\)).</p> <p>Therefore, \\(k+1\\) can be written as the product of these two sets of primes:</p> \\[ k+1 = a \\cdot b = (p_1 \\cdot p_2 \\cdot \\dots) \\cdot (q_1 \\cdot q_2 \\cdot \\dots) \\] <p>This shows that \\(k+1\\) is a product of primes.</p> </li> </ul> </li> </ul> <p>In both possible cases, \\(P(k+1)\\) is true.</p> </li> </ol> <p>Conclusion: Since the base case and the inductive step hold, by the principle of strong mathematical induction, every integer \\(n \\ge 2\\) can be written as a product of prime numbers.</p>"},{"location":"sem1/math/u1/functions/#convex-and-concave-functions","title":"Convex and Concave Functions","text":"<p>Functions can be classified based on their curvature. This classification is crucial in fields like optimization, calculus, and economics. The primary types of curvature are convex and concave.</p>"},{"location":"sem1/math/u1/functions/#convex-functions","title":"Convex Functions","text":"<p>A function is convex if the line segment connecting any two points on its graph lies on or above the graph itself. Intuitively, a convex function looks like a \"bowl\" or a \"valley\" opening upwards.</p>"},{"location":"sem1/math/u1/functions/#formal-definition_3","title":"Formal Definition","text":"<p>A function \\(f(x)\\) is defined to be convex over an interval \\(I\\) if for any two points \\(x_1, x_2 \\in I\\) and for any scalar \\(\\lambda \\in [0, 1]\\), the following inequality holds:</p> \\[ f(\\lambda x_1 + (1-\\lambda)x_2) \\leq \\lambda f(x_1) + (1-\\lambda)f(x_2) \\] <ul> <li>Explanation: The term \\(\\lambda x_1 + (1-\\lambda)x_2\\) represents any point on the line segment between \\(x_1\\) and \\(x_2\\). The left side of the inequality, \\(f(\\lambda x_1 + (1-\\lambda)x_2)\\), is the value of the function at this intermediate point. The right side, \\(\\lambda f(x_1) + (1-\\lambda)f(x_2)\\), is the value on the straight line (the chord) connecting the points \\((x_1, f(x_1))\\) and \\((x_2, f(x_2))\\). The definition essentially states that the function's curve is always below or touching this chord.</li> </ul>"},{"location":"sem1/math/u1/functions/#strictly-convex","title":"Strictly Convex","text":"<p>If the inequality is strict (<code>&lt;</code>) for all \\(\\lambda \\in (0, 1)\\) and \\(x_1 \\neq x_2\\), the function is called strictly convex. This means the graph is always strictly below the chord, never touching it except at the endpoints.</p>"},{"location":"sem1/math/u1/functions/#concave-functions","title":"Concave Functions","text":"<p>A function is concave if the line segment connecting any two points on its graph lies on or below the graph. Intuitively, a concave function looks like a \"hill\" or a \"dome\" opening downwards.</p>"},{"location":"sem1/math/u1/functions/#formal-definition_4","title":"Formal Definition","text":"<p>A function \\(f(x)\\) is defined to be concave over an interval \\(I\\) if for any two points \\(x_1, x_2 \\in I\\) and for any scalar \\(\\lambda \\in [0, 1]\\), the following inequality holds:</p> \\[ f(\\lambda x_1 + (1-\\lambda)x_2) \\geq \\lambda f(x_1) + (1-\\lambda)f(x_2) \\]"},{"location":"sem1/math/u1/functions/#relationship-between-convex-and-concave","title":"Relationship between Convex and Concave","text":"<p>There is a simple relationship between concave and convex functions:</p> <p>A function \\(f(x)\\) is concave if and only if the function \\(-f(x)\\) is convex.</p>"},{"location":"sem1/math/u1/functions/#tests-for-convexity-and-concavity","title":"Tests for Convexity and Concavity","text":"<p>For functions that are twice differentiable, we can use simple tests involving their derivatives to determine their concavity.</p>"},{"location":"sem1/math/u1/functions/#first-derivative-test","title":"First Derivative Test","text":"<ul> <li>If the first derivative \\(f'(x)\\) is a non-decreasing (i.e., increasing or constant) function over an interval, then \\(f(x)\\) is convex on that interval.</li> <li>If the first derivative \\(f'(x)\\) is a non-increasing (i.e., decreasing or constant) function over an interval, then \\(f(x)\\) is concave on that interval.</li> </ul>"},{"location":"sem1/math/u1/functions/#second-derivative-test","title":"Second Derivative Test","text":"<p>This is the most commonly used and straightforward test. Let \\(f(x)\\) be a twice-differentiable function on an interval \\(I\\).</p> <ul> <li>If \\(f''(x) \\geq 0\\) for all \\(x \\in I\\), then \\(f(x)\\) is convex on \\(I\\).</li> <li>If \\(f''(x) \\leq 0\\) for all \\(x \\in I\\), then \\(f(x)\\) is concave on \\(I\\).</li> <li>If \\(f''(x) &gt; 0\\) for all \\(x \\in I\\), then \\(f(x)\\) is strictly convex on \\(I\\).</li> <li>If \\(f''(x) &lt; 0\\) for all \\(x \\in I\\), then \\(f(x)\\) is strictly concave on \\(I\\).</li> </ul>"},{"location":"sem1/math/u1/functions/#examples","title":"Examples","text":""},{"location":"sem1/math/u1/functions/#example-1-fx-x2","title":"Example 1: \\(f(x) = x^2\\)","text":"<ul> <li>First derivative: \\(f'(x) = 2x\\)</li> <li>Second derivative: \\(f''(x) = 2\\)</li> <li>Conclusion: Since \\(f''(x) = 2 &gt; 0\\) for all real numbers \\(x\\), the function \\(f(x) = x^2\\) is strictly convex everywhere.</li> </ul>"},{"location":"sem1/math/u1/functions/#example-2-fx-log_ex-or-lnx-for-x-0","title":"Example 2: \\(f(x) = \\log_e(x)\\) or \\(\\ln(x)\\) for \\(x &gt; 0\\)","text":"<ul> <li>First derivative: \\(f'(x) = \\frac{1}{x} = x^{-1}\\)</li> <li>Second derivative: \\(f''(x) = -1 \\cdot x^{-2} = -\\frac{1}{x^2}\\)</li> <li>Conclusion: Since \\(x^2\\) is always positive for \\(x &gt; 0\\), \\(f''(x) = -\\frac{1}{x^2}\\) is always negative. Therefore, the function \\(f(x) = \\ln(x)\\) is strictly concave on its domain \\((0, \\infty)\\).</li> </ul>"},{"location":"sem1/math/u1/functions/#example-3-fx-x3","title":"Example 3: \\(f(x) = x^3\\)","text":"<ul> <li>First derivative: \\(f'(x) = 3x^2\\)</li> <li>Second derivative: \\(f''(x) = 6x\\)</li> <li>Conclusion: The sign of \\(f''(x)\\) depends on the value of \\(x\\).<ul> <li>For \\(x &gt; 0\\), \\(f''(x) &gt; 0\\), so the function is convex.</li> <li>For \\(x &lt; 0\\), \\(f''(x) &lt; 0\\), so the function is concave.</li> <li>Thus, \\(f(x)=x^3\\) is neither convex nor concave over its entire domain.</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/functions/#point-of-inflection","title":"Point of Inflection","text":"<p>A point of inflection (or inflection point) is a point on a curve where the concavity changes (from convex to concave, or vice-versa).</p> <ul> <li>This change occurs at points where the second derivative \\(f''(x)\\) is either zero or does not exist.</li> <li>In the example of \\(f(x) = x^3\\), we saw that \\(f''(x) = 6x\\). Setting \\(f''(x) = 0\\) gives \\(x=0\\). At \\(x=0\\), the function changes from concave to convex. Therefore, the point \\((0, f(0)) = (0, 0)\\) is a point of inflection.</li> </ul> <p>[insert image on graph of y = x^3 showing inflection point]</p>"},{"location":"sem1/math/u1/functions/#significance-in-optimization","title":"Significance in Optimization","text":"<p>Concavity is a cornerstone of mathematical optimization, a field with wide applications in computer science, machine learning, and economics.</p> <ul> <li>Convex Functions: For a convex function, any local minimum is guaranteed to be a global minimum. This property is extremely useful because it means optimization algorithms won't get \"stuck\" in a suboptimal valley.</li> <li>Concave Functions: Similarly, for a concave function, any local maximum is guaranteed to be a global maximum.</li> <li>Convex Optimization: Problems that involve minimizing a convex function (or maximizing a concave function) over a convex set are known as convex optimization problems. These problems are considered efficiently solvable, and many complex real-world problems are modeled in this form to find a guaranteed optimal solution.</li> </ul>"},{"location":"sem1/math/u1/functions/#problem-set","title":"Problem Set","text":"<p>This problem set contains 60 questions covering the core concepts of functions, mathematical induction, and convex/concave functions, designed for BCA-level understanding.</p>"},{"location":"sem1/math/u1/functions/#functions_1","title":"Functions","text":""},{"location":"sem1/math/u1/functions/#definition-and-properties-of-functions","title":"Definition and Properties of Functions","text":"<ol> <li>Define a function. What are the three essential components of a function? Provide an example.</li> <li>Explain the \"well-defined\" property of a function. Which of the following relations \\(R\\) from \\(A = \\{1, 2, 3\\}\\) to \\(B = \\{a, b, c\\}\\) are functions? Justify your answer.<ul> <li>\\(R_1 = \\{(1, a), (2, b), (3, c)\\}\\)</li> <li>\\(R_2 = \\{(1, a), (2, b)\\}\\)</li> <li>\\(R_3 = \\{(1, a), (2, b), (1, c)\\}\\)</li> <li>\\(R_4 = \\{(1, a), (2, a), (3, a)\\}\\)</li> </ul> </li> <li>Let a function \\(f: \\mathbb{Z} \\to \\mathbb{Z}\\) be defined by \\(f(x) = x^2 + 2\\). Determine the domain, codomain, and range of \\(f\\).</li> <li>Consider the function \\(f(x) = \\frac{1}{\\sqrt{4-x^2}}\\). What is the largest possible subset of \\(\\mathbb{R}\\) that can be the domain of this function?</li> <li>If \\(A = \\{-2, -1, 0, 1, 2\\}\\) and \\(f: A \\to \\mathbb{R}\\) is defined by \\(f(x) = x^3 - x + 1\\), find the range of \\(f\\).</li> </ol>"},{"location":"sem1/math/u1/functions/#one-to-one-injective-functions","title":"One-to-One (Injective) Functions","text":"<ol> <li>Formally define a one-to-one (injective) function.</li> <li>Prove that the function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = 5x + 3\\) is injective.</li> <li>Show that the function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = x^2 - 1\\) is not injective.</li> <li>Is the function \\(f: \\mathbb{N} \\to \\mathbb{N}\\) defined by \\(f(n) = n^2 + 1\\) one-to-one? Justify your answer.</li> <li>Let \\(A = \\mathbb{R} - \\{1\\}\\). Check if the function \\(f: A \\to \\mathbb{R}\\) defined by \\(f(x) = \\frac{2x+3}{x-1}\\) is injective.</li> <li>Give an example of a function from \\(\\mathbb{Z}\\) to \\(\\mathbb{Z}\\) that is not one-to-one and explain why.</li> <li>If \\(f: A \\to B\\) and \\(g: B \\to C\\) are both injective functions, prove that their composition \\(g \\circ f: A \\to C\\) is also injective.</li> </ol>"},{"location":"sem1/math/u1/functions/#onto-surjective-functions","title":"Onto (Surjective) Functions","text":"<ol> <li>Formally define an onto (surjective) function.</li> <li>Prove that the function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = x^3\\) is surjective.</li> <li>Show that the function \\(f: \\mathbb{Z} \\to \\mathbb{Z}\\) defined by \\(f(x) = 2x + 1\\) is not surjective.</li> <li>Determine if the function \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = x^2 - 2x + 1\\) is onto. Provide a clear justification.</li> <li>Let the codomain be restricted such that \\(f: \\mathbb{R} \\to [4, \\infty)\\). Is the function \\(f(x) = x^2 + 4\\) surjective in this case? Explain.</li> <li>Give an example of a function from \\(\\mathbb{N}\\) to \\(\\mathbb{N}\\) that is not onto and explain why.</li> <li>If \\(f: A \\to B\\) and \\(g: B \\to C\\) are both surjective functions, prove that their composition \\(g \\circ f: A \\to C\\) is also surjective.</li> </ol>"},{"location":"sem1/math/u1/functions/#bijective-functions","title":"Bijective Functions","text":"<ol> <li>Define a bijective function. What is another name for a bijective function?</li> <li>Prove that \\(f: \\mathbb{R} \\to \\mathbb{R}\\) defined by \\(f(x) = 2 - 3x\\) is a bijection.</li> <li>Let \\(f: \\mathbb{R} - \\{2\\} \\to \\mathbb{R} - \\{5\\}\\) be defined by \\(f(x) = \\frac{5x+1}{x-2}\\). Show that \\(f\\) is bijective.</li> <li>Find the inverse, \\(f^{-1}(x)\\), of the bijective function from the previous problem.</li> <li>Show that the function \\(f: \\mathbb{N} \\to \\mathbb{Z}\\) defined by \\(f(n) = (-1)^n \\lfloor n/2 \\rfloor\\) is a bijection.</li> <li>Determine if the function \\(f(x) = x|x|\\) is a bijection from \\(\\mathbb{R}\\) to \\(\\mathbb{R}\\). Justify your conclusion.</li> </ol>"},{"location":"sem1/math/u1/functions/#principles-of-mathematical-induction_1","title":"Principles of Mathematical Induction","text":""},{"location":"sem1/math/u1/functions/#the-first-principle-weak-induction","title":"The First Principle (Weak Induction)","text":"<ol> <li>State the First Principle of Mathematical Induction, outlining the base case and the inductive step.</li> <li>Using mathematical induction, prove that for all positive integers \\(n\\), \\(1 + 3 + 5 + \\dots + (2n-1) = n^2\\).</li> <li>Prove by induction that \\(1^3 + 2^3 + \\dots + n^3 = \\left(\\frac{n(n+1)}{2}\\right)^2\\) for all \\(n \\in \\mathbb{N}\\).</li> <li>Prove that \\(n^2 + n\\) is an even number for all positive integers \\(n\\).</li> <li>Prove by induction that \\(5^n - 1\\) is divisible by 4 for all integers \\(n \\geq 1\\).</li> <li>Use mathematical induction to prove that \\(x^n - y^n\\) is divisible by \\(x-y\\) for all positive integers \\(n\\).</li> <li>Prove that \\(1 \\cdot 1! + 2 \\cdot 2! + \\dots + n \\cdot n! = (n+1)! - 1\\) for all \\(n \\geq 1\\).</li> <li>Prove by induction that \\(n! &gt; 2^n\\) for all integers \\(n \\geq 4\\).</li> <li>Prove that \\(\\frac{1}{1 \\cdot 3} + \\frac{1}{3 \\cdot 5} + \\dots + \\frac{1}{(2n-1)(2n+1)} = \\frac{n}{2n+1}\\) for all \\(n \\geq 1\\).</li> <li>Prove that a set with \\(n\\) elements has exactly \\(2^n\\) subsets for \\(n \\geq 0\\).</li> <li>Prove that for any \\(n \\in \\mathbb{N}\\), \\(11^{n+1} + 12^{2n-1}\\) is divisible by 133.</li> <li>Prove by induction that \\( (1+x)^n \\geq 1 + nx \\) for all \\(x &gt; -1\\) and integers \\(n \\geq 0\\) (Bernoulli's Inequality).</li> </ol>"},{"location":"sem1/math/u1/functions/#the-second-principle-strong-induction","title":"The Second Principle (Strong Induction)","text":"<ol> <li>State the Second Principle of Mathematical Induction (Strong Induction). How does its inductive hypothesis differ from that of weak induction?</li> <li>Use strong induction to prove that every integer \\(n &gt; 1\\) has a prime factor.</li> <li>A sequence is defined recursively by \\(a_1 = 1\\), \\(a_2 = 3\\), and \\(a_n = 2a_{n-1} - a_{n-2}\\) for \\(n \\geq 3\\). Use strong induction to prove that \\(a_n = 2n-1\\) for all \\(n \\geq 1\\).</li> <li>Prove using strong induction that any postage amount of 12 cents or more can be formed using only 4-cent and 5-cent stamps.</li> <li>The Fibonacci numbers are defined by \\(F_0 = 0, F_1 = 1\\), and \\(F_n = F_{n-1} + F_{n-2}\\) for \\(n \\geq 2\\). Prove that \\(F_n &lt; 2^n\\) for all \\(n \\geq 0\\).</li> <li>A sequence is defined by \\(c_0 = 1, c_1 = 2, c_2 = 3\\) and \\(c_k = c_{k-1} + c_{k-2} + c_{k-3}\\) for \\(k \\geq 3\\). Prove using strong induction that \\(c_n \\leq 3^n\\) for all \\(n \\geq 0\\).</li> <li>Consider a game where two players start with a pile of \\(n\\) stones and take turns removing 1, 2, or 3 stones. The player who removes the last stone wins. Prove that the first player has a winning strategy if and only if \\(n\\) is not a multiple of 4.</li> <li>In what scenarios is strong induction necessary or more convenient than weak induction? Provide an example.</li> </ol>"},{"location":"sem1/math/u1/functions/#convex-and-concave-functions_1","title":"Convex and Concave Functions","text":""},{"location":"sem1/math/u1/functions/#definitions-and-tests","title":"Definitions and Tests","text":"<ol> <li>Define a convex function and a concave function using the formal definition involving a line segment.</li> <li>What is the relationship between a convex function \\(f(x)\\) and the function \\(g(x) = -f(x)\\)?</li> <li>State the Second Derivative Test for determining intervals of convexity and concavity.</li> <li>If the first derivative, \\(f'(x)\\), of a function is increasing over an interval \\((a, b)\\), what can you conclude about the convexity of \\(f(x)\\) on that interval?</li> <li>Show that \\(f(x) = x^2\\) is a strictly convex function on \\(\\mathbb{R}\\) using the second derivative test.</li> <li>For \\(x &gt; 0\\), determine if the function \\(f(x) = \\sqrt{x}\\) is convex or concave. Justify your answer.</li> <li>Determine the intervals on which the function \\(f(x) = x^3 - 3x^2 + 1\\) is convex and concave.</li> <li>Find the intervals of convexity and concavity for the function \\(f(x) = \\frac{x}{x^2+1}\\).</li> <li>Show that \\(f(x) = \\ln(x)\\) is a strictly concave function for \\(x &gt; 0\\).</li> <li>Analyze the convexity of the function \\(f(x) = x e^{-x}\\) for \\(x \\in \\mathbb{R}\\).</li> </ol>"},{"location":"sem1/math/u1/functions/#point-of-inflection-and-applications","title":"Point of Inflection and Applications","text":"<ol> <li>What is a point of inflection? What condition must the second derivative typically satisfy at a point of inflection?</li> <li>Find all points of inflection for the function \\(f(x) = x^4 - 6x^2\\).</li> <li>Find the point(s) of inflection for the function \\(f(x) = (x-2)^3\\).</li> <li>Does the function \\(f(x) = x^4\\) have a point of inflection at \\(x=0\\)? Explain why or why not, considering \\(f''(0) = 0\\).</li> <li>Briefly explain the significance of convexity in optimization problems. For example, what does strict convexity of a function guarantee about a point where \\(f'(c) = 0\\)?</li> </ol>"},{"location":"sem1/math/u1/relations/","title":"Relations","text":"<p>In discrete mathematics, a relation is a fundamental concept used to describe a relationship between elements of sets. It formalizes the idea that certain elements are connected or related to each other in some way.</p>"},{"location":"sem1/math/u1/relations/#definition-and-properties-of-binary-relations","title":"Definition and Properties of Binary Relations","text":"<p>A binary relation from a set \\(A\\) to a set \\(B\\) is a collection of ordered pairs \\((a, b)\\) where \\(a\\) is an element of \\(A\\) and \\(b\\) is an element of \\(B\\). Essentially, it's a subset of the Cartesian product \\(A \\times B\\).</p> <p>If a relation is from a set \\(A\\) to itself (i.e., a subset of \\(A \\times A\\)), it is called a relation on the set A.</p> <p>Notation: If an ordered pair \\((a, b)\\) is in A relation \\(R\\), we write \\((a, b) \\in R\\) or \\(aRb\\). This is read as \"\\(a\\) is related to \\(b\\) by \\(R\\)\".</p> <p>Domain: The set of all first elements of the ordered pairs in \\(R\\).</p> \\[ \\text{dom}(R) = \\{a \\in A \\mid \\exists b \\in B \\text{ such that } (a, b) \\in R\\} \\] <p>Range: The set of all second elements of the ordered pairs in \\(R\\).</p> \\[ \\text{ran}(R) = \\{b \\in B \\mid \\exists a \\in A \\text{ such that } (a, b) \\in R\\} \\] <p>Example</p> <p>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{x, y, z\\}\\). Let \\(R = \\{(1, x), (1, y), (3, x)\\}\\) be a relation from \\(A\\) to \\(B\\).</p> <ul> <li>Here, \\(1Rx\\) and \\(3Rx\\) are true.</li> <li>The Domain of \\(R\\) is \\(\\{1, 3\\}\\).</li> <li>The Range of \\(R\\) is \\(\\{x, y\\}\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#representation-of-relations","title":"Representation of Relations","text":"<p>Relations can be represented in several ways:</p> <p>Set-Roster Notation: Listing all the ordered pairs, as seen in the example above.</p> <p>Matrix Representation: A relation \\(R\\) from \\(A = \\{a_1, ..., a_m\\}\\) to \\(B = \\{b_1, ..., b_n\\}\\) can be represented by an \\(m \\times n\\) matrix \\(M_R = [m_{ij}]\\).</p> \\[ m_{ij} = \\begin{cases} 1 &amp; \\text{if } (a_i, b_j) \\in R \\\\ 0 &amp; \\text{if } (a_i, b_j) \\notin R \\end{cases} \\] <p>Directed Graph (Digraph): For a relation on a set \\(A\\), we can draw a digraph. Each element of \\(A\\) is a vertex. A directed edge is drawn from vertex \\(a\\) to vertex \\(b\\) if and only if \\((a, b) \\in R\\). A loop (an edge from a vertex to itself) is drawn if \\((a, a) \\in R\\).</p>"},{"location":"sem1/math/u1/relations/#properties-of-binary-relations","title":"Properties of Binary Relations","text":"<p>Let \\(R\\) be a binary relation on a set \\(A\\).</p>"},{"location":"sem1/math/u1/relations/#reflexive","title":"Reflexive","text":"<p>A relation \\(R\\) is reflexive if every element is related to itself.</p> \\[ \\forall a \\in A, (a, a) \\in R \\] <ul> <li>Matrix: All diagonal elements are 1.</li> <li>Digraph: Every vertex has a self-loop.</li> </ul> <p>Example</p> <p>The relation \"is less than or equal to\" (\\(\\le\\)) on the set of integers is reflexive because every integer is less than or equal to itself (\\(a \\le a\\)).</p>"},{"location":"sem1/math/u1/relations/#irreflexive","title":"Irreflexive","text":"<p>A relation \\(R\\) is irreflexive if no element is related to itself.</p> \\[ \\forall a \\in A, (a, a) \\notin R \\] <ul> <li>Matrix: All diagonal elements are 0.</li> <li>Digraph: No vertex has a self-loop.</li> </ul> <p>Example</p> <p>The relation \"is greater than\" (\\(&gt;\\)) on the set of integers is irreflexive because no integer is greater than itself (\\(a \\not&gt; a\\)).</p>"},{"location":"sem1/math/u1/relations/#symmetric","title":"Symmetric","text":"<p>A relation \\(R\\) is symmetric if for every pair \\((a, b)\\) in the relation, the pair \\((b, a)\\) is also in the relation.</p> \\[ \\forall a, b \\in A, (a, b) \\in R \\implies (b, a) \\in R \\] <ul> <li>Matrix: The matrix is symmetric about the main diagonal (\\(M_R = M_R^T\\)).</li> <li>Digraph: If there is an edge from \\(a\\) to \\(b\\), there must be an edge from \\(b\\) to \\(a\\).</li> </ul> <p>Example</p> <p>The relation \"is equal to\" (\\(=\\)) on integers is symmetric. If \\(a = b\\), then \\(b = a\\). A relation \\(R = \\{(1,2), (2,1), (3,3)\\}\\) on \\(A=\\{1,2,3\\}\\) is symmetric.</p>"},{"location":"sem1/math/u1/relations/#antisymmetric","title":"Antisymmetric","text":"<p>A relation \\(R\\) is antisymmetric if for any two distinct elements \\(a\\) and \\(b\\), it's not possible to have both \\(a\\) related to \\(b\\) and \\(b\\) related to \\(a\\).</p> \\[ \\forall a, b \\in A, [(a, b) \\in R \\land (b, a) \\in R] \\implies a = b \\] <ul> <li>Matrix: If \\(m_{ij} = 1\\) for \\(i \\ne j\\), then \\(m_{ji}\\) must be 0.</li> <li>Digraph: There cannot be edges in both directions between two distinct vertices.</li> </ul> <p>Example</p> <p>The relation \"is less than or equal to\" (\\(\\le\\)) on integers is antisymmetric. If \\(a \\le b\\) and \\(b \\le a\\), it must be that \\(a = b\\). The relation \"divides\" on the set of positive integers is another example.</p>"},{"location":"sem1/math/u1/relations/#asymmetric","title":"Asymmetric","text":"<p>A relation \\(R\\) is asymmetric if whenever \\(a\\) is related to \\(b\\), \\(b\\) is NOT related to \\(a\\).</p> \\[ \\forall a, b \\in A, (a, b) \\in R \\implies (b, a) \\notin R \\] <p>Note</p> <p>An asymmetric relation is both antisymmetric and irreflexive.</p> <p>Example</p> <p>The relation \"is greater than\" (\\(&gt;\\)) on integers is asymmetric. If \\(a &gt; b\\), then \\(b \\not&gt; a\\).</p>"},{"location":"sem1/math/u1/relations/#transitive","title":"Transitive","text":"<p>A relation \\(R\\) is transitive if a \"chain\" of relations implies a direct relation.</p> \\[ \\forall a, b, c \\in A, [(a, b) \\in R \\land (b, c) \\in R] \\implies (a, c) \\in R \\] <ul> <li>Matrix: If the Boolean product \\(M_R \\odot M_R\\) has a 1 in position \\((i, k)\\), then \\(M_R\\) must also have a 1 in that position.</li> <li>Digraph: If there is a path of length 2 from vertex \\(a\\) to \\(c\\) (through some vertex \\(b\\)), then there must be a direct edge from \\(a\\) to \\(c\\).</li> </ul> <p>Example</p> <p>The relation \"is an ancestor of\" is transitive. If Ram is an ancestor of Shyam, and Shyam is an ancestor of Mohan, then Ram is an ancestor of Mohan. The relation \\( \\le \\) on integers is also transitive. If \\(a \\le b\\) and \\(b \\le c\\), then \\(a \\le c\\).</p>"},{"location":"sem1/math/u1/relations/#closures-of-relations","title":"Closures of Relations","text":"<p>The closure of a relation \\(R\\) with respect to a property \\(P\\) is the smallest relation that contains \\(R\\) and satisfies property \\(P\\). \"Smallest\" means we add the minimum number of ordered pairs to \\(R\\) to achieve the property.</p>"},{"location":"sem1/math/u1/relations/#reflexive-closure","title":"Reflexive Closure","text":"<p>The reflexive closure of a relation \\(R\\) on a set \\(A\\) is the smallest reflexive relation containing \\(R\\). It is obtained by adding all pairs \\((a, a)\\) for all \\(a \\in A\\) to \\(R\\).</p> <p>Let \\(\\Delta = \\{(a, a) \\mid a \\in A\\}\\) be the diagonal (or identity) relation. The reflexive closure of R, denoted \\(r(R)\\), is: [ r(R) = R \\cup \\Delta ]</p> <p>Example</p> <p>Let \\(A = \\{1, 2, 3\\}\\) and \\(R = \\{(1, 2), (2, 2), (3, 1)\\}\\). The diagonal relation is \\(\\Delta = \\{(1, 1), (2, 2), (3, 3)\\}\\). The reflexive closure is \\(r(R) = R \\cup \\Delta = \\{(1, 2), (2, 2), (3, 1), (1, 1), (3, 3)\\}\\).</p>"},{"location":"sem1/math/u1/relations/#symmetric-closure","title":"Symmetric Closure","text":"<p>The symmetric closure of a relation \\(R\\) on a set \\(A\\) is the smallest symmetric relation containing \\(R\\). It is obtained by adding the inverse pair \\((b, a)\\) for every pair \\((a, b)\\) in \\(R\\).</p> <p>Let \\(R^{-1} = \\{(b, a) \\mid (a, b) \\in R\\}\\) be the inverse relation. The symmetric closure of R, denoted \\(s(R)\\), is: [ s(R) = R \\cup R^{-1} ]</p> <p>Example</p> <p>Let \\(A = \\{1, 2, 3\\}\\) and \\(R = \\{(1, 2), (2, 3)\\}\\). The inverse relation is \\(R^{-1} = \\{(2, 1), (3, 2)\\}\\). The symmetric closure is \\(s(R) = R \\cup R^{-1} = \\{(1, 2), (2, 3), (2, 1), (3, 2)\\}\\).</p>"},{"location":"sem1/math/u1/relations/#transitive-closure","title":"Transitive Closure","text":"<p>The transitive closure of a relation \\(R\\) on a set \\(A\\) is the smallest transitive relation containing \\(R\\). It contains the pair \\((a, c)\\) if there is a \"path\" of one or more steps from \\(a\\) to \\(c\\) in the original relation.</p> <p>The transitive closure is often denoted as \\(R^+\\) or \\(t(R)\\). If \\(R^n\\) is the composition of \\(R\\) with itself \\(n\\) times, then the transitive closure is the union of all such compositions.</p> \\[ R^+ = R \\cup R^2 \\cup R^3 \\cup \\dots = \\bigcup_{n=1}^{\\infty} R^n \\] <p>For a finite set \\(A\\) with \\(|A| = k\\), this simplifies to:</p> \\[ R^+ = \\bigcup_{n=1}^{k} R^n \\]"},{"location":"sem1/math/u1/relations/#finding-transitive-closure-warshalls-algorithm","title":"Finding Transitive Closure: Warshall's Algorithm","text":"<p>Warshall's algorithm is an efficient method to compute the transitive closure of a relation using its matrix representation.</p> <ol> <li>Start with the relation matrix, \\(M_R\\). Let's call it \\(W\\). \\(W\\) is an \\(n \\times n\\) matrix.</li> <li>Iterate from \\(k = 1\\) to \\(n\\). In each iteration, update the matrix.</li> <li>The update rule is: For every pair of indices \\((i, j)\\), set \\(W_{ij} = W_{ij} \\lor (W_{ik} \\land W_{kj})\\).</li> <li>After iterating through all \\(k\\) from 1 to \\(n\\), the resulting matrix \\(W\\) will be the matrix of the transitive closure, \\(M_{R^+}\\).</li> </ol> <p>This rule essentially says: \"There is a path from vertex \\(i\\) to vertex \\(j\\) if there was already a direct edge, OR if there is a path from \\(i\\) to \\(k\\) AND a path from \\(k\\) to \\(j\\)\". By iterating through all possible intermediate vertices \\(k\\), we find all possible paths.</p>"},{"location":"sem1/math/u1/relations/#reflexive-transitive-closure","title":"Reflexive Transitive Closure","text":"<p>The reflexive transitive closure, denoted \\(R^*\\), is the smallest relation that is both reflexive and transitive. It represents reachability, meaning \\((a, b) \\in R^*\\) if \\(b\\) is reachable from \\(a\\) in zero or more steps.</p> <p>It is simply the union of the transitive closure and the diagonal relation.</p> \\[ R^* = R^+ \\cup \\Delta \\] <p>Alternatively, it can be defined as:</p> \\[ R^* = \\bigcup_{n=0}^{\\infty} R^n \\] <p>where \\(R^0 = \\Delta\\).</p>"},{"location":"sem1/math/u1/relations/#relations-and-partitions","title":"Relations and Partitions","text":""},{"location":"sem1/math/u1/relations/#equivalence-relations","title":"Equivalence Relations","text":"<p>An equivalence relation is a specific type of binary relation on a set that generalizes the concept of equality. It is a relation that is reflexive, symmetric, and transitive.</p> <p>Let \\(R\\) be a binary relation on a non-empty set \\(A\\). \\(R\\) is an equivalence relation if it satisfies the following three properties:</p>"},{"location":"sem1/math/u1/relations/#reflexivity","title":"Reflexivity","text":"<p>A relation \\(R\\) on a set \\(A\\) is reflexive if every element of \\(A\\) is related to itself.</p> \\[ \\forall a \\in A, (a, a) \\in R \\] <ul> <li>Example: The relation 'is equal to' (=) on the set of integers \\(\\mathbb{Z}\\) is reflexive because for any integer \\(a\\), \\(a = a\\).</li> <li>Non-Example: The relation 'is greater than' (&gt;) on \\(\\mathbb{Z}\\) is not reflexive because \\(a &gt; a\\) is never true.</li> </ul>"},{"location":"sem1/math/u1/relations/#symmetry","title":"Symmetry","text":"<p>A relation \\(R\\) on a set \\(A\\) is symmetric if whenever an element \\(a\\) is related to an element \\(b\\), then \\(b\\) is also related to \\(a\\).</p> \\[ \\forall a, b \\in A, (a, b) \\in R \\implies (b, a) \\in R \\] <ul> <li>Example: The relation \"is a cousin of\" on a set of people is symmetric. If Ram is a cousin of Sita, then Sita is a cousin of Ram.</li> <li>Non-Example: The relation 'is less than or equal to' (\u2264) on \\(\\mathbb{Z}\\) is not symmetric. We know that \\(3 \\le 5\\), but \\(5 \\not\\le 3\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#transitivity","title":"Transitivity","text":"<p>A relation \\(R\\) on a set \\(A\\) is transitive if whenever an element \\(a\\) is related to \\(b\\), and \\(b\\) is related to \\(c\\), then \\(a\\) is also related to \\(c\\).</p> \\[ \\forall a, b, c \\in A, [(a, b) \\in R \\land (b, c) \\in R] \\implies (a, c) \\in R \\] <ul> <li>Example: The relation 'is a descendant of' is transitive. If B is a descendant of A, and C is a descendant of B, then C is also a descendant of A.</li> <li>Non-Example: The relation \"is the father of\" is not transitive. If A is the father of B, and B is the father of C, A is the grandfather of C, not the father.</li> </ul>"},{"location":"sem1/math/u1/relations/#example-of-an-equivalence-relation","title":"Example of an Equivalence Relation","text":"<p>Let's consider the set of all integers, \\(\\mathbb{Z}\\). Define a relation \\(R\\) such that \\((a, b) \\in R\\) if and only if \\(a \\equiv b \\pmod{m}\\), which means \\(m\\) divides \\((a - b)\\) for some fixed integer \\(m &gt; 1\\). This is called congruence modulo m.</p> <p>Let's check the three properties for \\(m=3\\). So, \\((a, b) \\in R\\) if \\((a - b)\\) is a multiple of 3.</p> <p>Reflexive: For any integer \\(a\\), \\(a - a = 0\\). Since \\(0 = 3 \\times 0\\), \\(0\\) is a multiple of 3. Thus, \\((a, a) \\in R\\). The relation is reflexive.</p> <p>Symmetric: Suppose \\((a, b) \\in R\\). This means \\((a - b)\\) is a multiple of 3. So, \\(a - b = 3k\\) for some integer \\(k\\). Then, \\(b - a = -(a - b) = -3k = 3(-k)\\). Since \\(-k\\) is also an integer, \\((b - a)\\) is a multiple of 3. Thus, \\((b, a) \\in R\\). The relation is symmetric.</p> <p>Transitive: Suppose \\((a, b) \\in R\\) and \\((b, c) \\in R\\). This means \\((a - b) = 3k\\) and \\((b - c) = 3j\\) for some integers \\(k\\) and \\(j\\). Now consider \\(a - c\\):</p> \\[ a - c = (a - b) + (b - c) = 3k + 3j = 3(k + j) \\] <p>Since \\(k+j\\) is an integer, \\((a-c)\\) is a multiple of 3. Thus, \\((a, c) \\in R\\). The relation is transitive.</p> <p>Since the relation is reflexive, symmetric, and transitive, congruence modulo 3 is an equivalence relation on the set of integers.</p>"},{"location":"sem1/math/u1/relations/#equivalence-classes","title":"Equivalence Classes","text":"<p>Given an equivalence relation \\(R\\) on a set \\(A\\), the equivalence class of an element \\(a \\in A\\), denoted by \\([a]\\) or \\(\\bar{a}\\), is the set of all elements in \\(A\\) that are related to \\(a\\).</p> \\[ [a] = \\{ x \\in A \\mid (x, a) \\in R \\} \\] <p>Essentially, an equivalence class is a subset of \\(A\\) containing all elements that are \"equivalent\" to each other under the relation \\(R\\).</p>"},{"location":"sem1/math/u1/relations/#example-of-equivalence-classes","title":"Example of Equivalence Classes","text":"<p>Using the congruence modulo 3 relation on \\(\\mathbb{Z}\\) from the previous example:</p> <ul> <li> <p>The equivalence class of 0, denoted [0]:     This is the set of all integers \\(x\\) such that \\(x \\equiv 0 \\pmod{3}\\). This means \\(x - 0\\) is a multiple of 3. These are all the multiples of 3.     [     [0] = { \\dots, -6, -3, 0, 3, 6, \\dots }     ]</p> </li> <li> <p>The equivalence class of 1, denoted [1]:     This is the set of all integers \\(x\\) such that \\(x \\equiv 1 \\pmod{3}\\). This means \\(x - 1\\) is a multiple of 3.     [     [1] = { \\dots, -5, -2, 1, 4, 7, \\dots }     ]</p> </li> <li> <p>The equivalence class of 2, denoted [2]:     This is the set of all integers \\(x\\) such that \\(x \\equiv 2 \\pmod{3}\\). This means \\(x - 2\\) is a multiple of 3.     [     [2] = { \\dots, -4, -1, 2, 5, 8, \\dots }     ]</p> </li> </ul> <p>What about \\([3]\\)? An integer \\(x\\) is in \\([3]\\) if \\(x - 3\\) is a multiple of 3. If \\(x-3 = 3k\\), then \\(x = 3k+3 = 3(k+1)\\), which means \\(x\\) is a multiple of 3. So, \\([3] = [0]\\). Similarly, \\([4] = [1]\\), \\([-1] = [2]\\), and so on.</p>"},{"location":"sem1/math/u1/relations/#properties-of-equivalence-classes","title":"Properties of Equivalence Classes","text":"<p>Let \\(R\\) be an equivalence relation on a set \\(A\\), and let \\(a, b \\in A\\).</p> <ol> <li>\\(a \\in [a]\\). (Every element belongs to its own equivalence class).</li> <li>If \\((a, b) \\in R\\), then \\([a] = [b]\\).</li> <li>If \\((a, b) \\notin R\\), then \\([a] \\cap [b] = \\emptyset\\).</li> <li>Any two equivalence classes are either identical or disjoint (they have no elements in common).</li> <li>The set of all equivalence classes forms a partition of the set \\(A\\).</li> </ol>"},{"location":"sem1/math/u1/relations/#partitions","title":"Partitions","text":"<p>A partition of a non-empty set \\(A\\) is a collection of non-empty subsets of \\(A\\), say \\(A_1, A_2, \\dots, A_n\\), such that these subsets are pairwise disjoint and their union is the entire set \\(A\\).</p> <p>Formally, a collection of subsets \\(\\{A_i \\mid i \\in I\\}\\) (where \\(I\\) is an index set) is a partition of \\(A\\) if it satisfies three conditions:</p> <ol> <li> <p>Non-empty: No subset is empty.</p> \\[ \\forall i \\in I, A_i \\neq \\emptyset \\] </li> <li> <p>Pairwise Disjoint: The intersection of any two distinct subsets is the empty set.</p> \\[ \\forall i, j \\in I, \\text{ if } i \\neq j, \\text{ then } A_i \\cap A_j = \\emptyset \\] </li> <li> <p>Covers the Set: The union of all the subsets is the original set \\(A\\).</p> \\[ \\bigcup_{i \\in I} A_i = A \\] </li> </ol>"},{"location":"sem1/math/u1/relations/#example-of-a-partition","title":"Example of a Partition","text":"<p>Let \\(A = \\{1, 2, 3, 4, 5, 6\\}\\).</p> <ul> <li> <p>The collection of subsets \\(\\{\\{1, 3\\}, \\{2\\}, \\{4, 5, 6\\}\\}\\) is a partition of \\(A\\) because:</p> <ul> <li>None of the subsets are empty.</li> <li>They are pairwise disjoint: \\(\\{1, 3\\} \\cap \\{2\\} = \\emptyset\\), \\(\\{1, 3\\} \\cap \\{4, 5, 6\\} = \\emptyset\\), and \\(\\{2\\} \\cap \\{4, 5, 6\\} = \\emptyset\\).</li> <li>Their union is \\(A\\): \\(\\{1, 3\\} \\cup \\{2\\} \\cup \\{4, 5, 6\\} = \\{1, 2, 3, 4, 5, 6\\} = A\\).</li> </ul> </li> <li> <p>The collection \\(\\{\\{1, 2\\}, \\{2, 3\\}, \\{4, 5, 6\\}\\}\\) is not a partition because the subsets \\(\\{1, 2\\}\\) and \\(\\{2, 3\\}\\) are not disjoint (\\(\\{1, 2\\} \\cap \\{2, 3\\} = \\{2\\}\\)).</p> </li> </ul>"},{"location":"sem1/math/u1/relations/#the-fundamental-theorem-of-equivalence-relations","title":"The Fundamental Theorem of Equivalence Relations","text":"<p>There is a fundamental connection between equivalence relations and partitions.</p> <p>Theorem</p> <ul> <li>An equivalence relation \\(R\\) on a set \\(A\\) partitions the set \\(A\\) into its equivalence classes.</li> <li>Conversely, any partition of a set \\(A\\) induces an equivalence relation on \\(A\\).</li> </ul> <p>This means equivalence relations and partitions are two different ways of looking at the same concept of grouping elements.</p>"},{"location":"sem1/math/u1/relations/#from-equivalence-relation-to-partition","title":"From Equivalence Relation to Partition","text":"<p>As we saw with the congruence modulo 3 example, the equivalence classes were:</p> <ul> <li>\\([0] = \\{ \\dots, -6, -3, 0, 3, 6, \\dots \\}\\)</li> <li>\\([1] = \\{ \\dots, -5, -2, 1, 4, 7, \\dots \\}\\)</li> <li>\\([2] = \\{ \\dots, -4, -1, 2, 5, 8, \\dots \\}\\)</li> </ul> <p>The collection of these classes \\(\\{[0], [1], [2]\\}\\) forms a partition of the set of integers \\(\\mathbb{Z}\\):</p> <ol> <li>Non-empty: None of the classes are empty.</li> <li>Disjoint: \\([0] \\cap [1] = \\emptyset\\), \\([0] \\cap [2] = \\emptyset\\), and \\([1] \\cap [2] = \\emptyset\\).</li> <li>Union is \\(\\mathbb{Z}\\): Every integer belongs to one of these three classes (it either has a remainder of 0, 1, or 2 when divided by 3). So, \\([0] \\cup [1] \\cup [2] = \\mathbb{Z}\\).</li> </ol>"},{"location":"sem1/math/u1/relations/#from-partition-to-equivalence-relation","title":"From Partition to Equivalence Relation","text":"<p>Let's take our example partition of \\(A = \\{1, 2, 3, 4, 5, 6\\}\\) as \\(P = \\{\\{1, 3\\}, \\{2\\}, \\{4, 5, 6\\}\\}\\).</p> <p>We can define a relation \\(R\\) on \\(A\\) where \\((a, b) \\in R\\) if and only if \\(a\\) and \\(b\\) are in the same subset of the partition \\(P\\).</p> <ul> <li>Elements related to each other:<ul> <li>\\((1, 1), (3, 3), (1, 3), (3, 1)\\)</li> <li>\\((2, 2)\\)</li> <li>\\((4, 4), (5, 5), (6, 6), (4, 5), (5, 4), (4, 6), (6, 4), (5, 6), (6, 5)\\)</li> </ul> </li> </ul> <p>This relation \\(R\\) will be an equivalence relation:</p> <ul> <li>Reflexive: Every element is in the same subset as itself. E.g., \\((1,1) \\in R\\).</li> <li>Symmetric: If \\(a\\) is in the same subset as \\(b\\), then \\(b\\) is in the same subset as \\(a\\). E.g., if \\((1,3) \\in R\\), then \\((3,1) \\in R\\).</li> <li>Transitive: If \\(a\\) and \\(b\\) are in the same subset, and \\(b\\) and \\(c\\) are in the same subset, then \\(a\\) and \\(c\\) must be in that same subset. E.g., \\((4,5) \\in R\\) and \\((5,6) \\in R\\), which implies \\((4,6) \\in R\\). All three are in the subset \\(\\{4, 5, 6\\}\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#n-ary-relations","title":"N-ary Relations","text":"<p>\u201cThis topic is not important for mathematics, but for DBMS (Database Management System).\u201d</p> <p>An n-ary relation is a fundamental concept in set theory and is the theoretical foundation for relational databases. While binary relations (where n=2) connect elements from two sets, n-ary relations generalize this idea to connect elements from any number of sets.</p>"},{"location":"sem1/math/u1/relations/#definition-of-an-n-ary-relation","title":"Definition of an N-ary Relation","text":"<p>Let \\(A_1, A_2, \\dots, A_n\\) be \\(n\\) sets. An n-ary relation \\(R\\) on these sets is any subset of the Cartesian product \\(A_1 \\times A_2 \\times \\dots \\times A_n\\).</p> <p>Mathematically, this is expressed as: [ R \\subseteq A_1 \\times A_2 \\times \\dots \\times A_n ]</p> <ul> <li>The sets \\(A_1, A_2, \\dots, A_n\\) are called the domains of the relation.</li> <li>The number \\(n\\) is called the degree or arity of the relation.</li> </ul> <p>The elements of an n-ary relation are ordered n-tuples of the form \\((a_1, a_2, \\dots, a_n)\\), where \\(a_1 \\in A_1, a_2 \\in A_2, \\dots, a_n \\in A_n\\).</p>"},{"location":"sem1/math/u1/relations/#types-of-relations-based-on-degree","title":"Types of Relations based on Degree","text":"<ul> <li>Unary Relation (n=1): A subset of a single set \\(A_1\\). It essentially specifies a property of the elements in \\(A_1\\).</li> <li>Binary Relation (n=2): A subset of \\(A_1 \\times A_2\\). This is the most commonly studied type, e.g., 'less than' (&lt;) on the set of integers.</li> <li>Ternary Relation (n=3): A subset of \\(A_1 \\times A_2 \\times A_3\\).</li> <li>Quaternary Relation (n=4): A subset of \\(A_1 \\times A_2 \\times A_3 \\times A_4\\).</li> <li>And so on for any integer \\(n &gt; 0\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#example-a-ternary-relation","title":"Example: A Ternary Relation","text":"<p>Consider a university database scenario. We can define a ternary relation <code>Enrolled</code> to capture which student is enrolled in which course and taught by which professor.</p> <ul> <li> <p>Let the domains be:</p> <ul> <li><code>Students</code> = {Anjali, Rohan, Priya}</li> <li><code>Courses</code> = {CS101, MA202, PH110}</li> <li><code>Professors</code> = {Dr. Gupta, Dr. Sharma, Dr. Verma}</li> </ul> </li> <li> <p>The Cartesian product <code>Students</code> \\(\\times\\) <code>Courses</code> \\(\\times\\) <code>Professors</code> would contain all possible combinations, like (Anjali, CS101, Dr. Gupta), (Anjali, CS101, Dr. Sharma), etc.</p> </li> <li> <p>The <code>Enrolled</code> relation is a subset of this Cartesian product that represents the actual enrollments. For example:</p> \\[ \\begin{align*} \\text{Enrolled} = \\{ &amp; (\\text{Anjali, CS101, Dr. Gupta}), \\\\                      &amp; (\\text{Rohan, CS101, Dr. Gupta}), \\\\                      &amp; (\\text{Rohan, MA202, Dr. Sharma}), \\\\                      &amp; (\\text{Priya, PH110, Dr. Verma}) \\} \\end{align*} \\] </li> </ul> <p>This relation tells us that Anjali is enrolled in CS101 taught by Dr. Gupta, Rohan is in CS101 with Dr. Gupta and MA202 with Dr. Sharma, and so on. The tuple <code>(Anjali, MA202, Dr. Gupta)</code> is not in the relation, which means Anjali is not enrolled in MA202 with Dr. Gupta.</p>"},{"location":"sem1/math/u1/relations/#representation-of-n-ary-relations-as-tables","title":"Representation of N-ary Relations as Tables","text":"<p>The most intuitive and practical way to represent an n-ary relation is using a table. This is the core principle behind the relational model for databases.</p>"},{"location":"sem1/math/u1/relations/#correspondence-between-relation-and-table","title":"Correspondence between Relation and Table","text":"Mathematical Concept Database Table Component N-ary Relation Name (e.g., <code>Enrolled</code>) Table Name Degree of the Relation (\\(n\\)) Number of Columns Domain (\\(A_i\\)) Attribute / Column Attribute Name Column Header n-tuple (\\((a_1, \\dots, a_n) \\in R\\)) Row / Record / Tuple"},{"location":"sem1/math/u1/relations/#example-representing-the-enrolled-relation","title":"Example: Representing the <code>Enrolled</code> Relation","text":"<p>The ternary relation <code>Enrolled</code> from the previous example can be represented as the following table:</p> <p>Table: Enrolled</p> Student_Name Course_ID Professor_Name Anjali CS101 Dr. Gupta Rohan CS101 Dr. Gupta Rohan MA202 Dr. Sharma Priya PH110 Dr. Verma"},{"location":"sem1/math/u1/relations/#key-observations","title":"Key Observations:","text":"<ol> <li> <p>Columns represent Domains: Each column in the table corresponds to one of the sets (domains) in the Cartesian product. The column header (e.g., <code>Student_Name</code>) is the attribute that draws its values from the corresponding domain (e.g., <code>Students</code>).</p> </li> <li> <p>Rows represent Tuples: Each row in the table is an n-tuple that belongs to the relation. The row <code>(Anjali, CS101, Dr. Gupta)</code> signifies that this 3-tuple is an element of the <code>Enrolled</code> relation.</p> </li> <li> <p>Order of Rows is Immaterial: Since a relation is a set of tuples, the order of these tuples is not important. Similarly, the order of rows in a database table is considered insignificant. The table with Rohan's entries listed first would represent the exact same relation.</p> </li> <li> <p>Order of Columns is Formally Significant: In the formal definition of a tuple, the order of elements matters. \\((a_1, a_2)\\) is different from \\((a_2, a_1)\\). However, in the practical table representation, columns are identified by their names (attributes). So, while we can reorder the columns visually, the association between a column's name and its data is fixed.</p> </li> <li> <p>No Duplicate Rows: By the definition of a set, it cannot contain duplicate elements. This translates directly to the table representation: a table representing a relation cannot have two identical rows. In database systems, this is often enforced by a primary key, which is a unique identifier for each row.</p> </li> </ol>"},{"location":"sem1/math/u1/relations/#another-example-a-4-ary-quaternary-relation","title":"Another Example: A 4-ary (Quaternary) Relation","text":"<p>Let's define a relation <code>FLIGHTS</code> with degree 4.</p> <ul> <li> <p>Domains:</p> <ul> <li><code>FlightNum</code>: {AI202, 6E155, UK810}</li> <li><code>Origin</code>: {Delhi, Mumbai, Bengaluru}</li> <li><code>Destination</code>: {Kolkata, Chennai, Delhi}</li> <li><code>DepartureTime</code>: {08:00, 14:30, 21:00}</li> </ul> </li> <li> <p>Relation (as a set of 4-tuples):</p> \\[ \\begin{align*} \\text{FLIGHTS} = \\{ &amp; (\\text{AI202, Delhi, Kolkata, 08:00}), \\\\                      &amp; (\\text{6E155, Mumbai, Chennai, 14:30}), \\\\                      &amp; (\\text{UK810, Bengaluru, Delhi, 21:00}), \\\\                      &amp; (\\text{AI202, Kolkata, Delhi, 14:30}) \\} \\end{align*} \\] </li> <li> <p>Representation as a Table:</p> </li> </ul> <p>Table: FLIGHTS</p> Flight_Number Source_City Destination_City Dep_Time AI202 Delhi Kolkata 08:00 6E155 Mumbai Chennai 14:30 UK810 Bengaluru Delhi 21:00 AI202 Kolkata Delhi 14:30 <p>This tabular representation is clear, organized, and provides a structured way to view and query the relationships between data elements, forming the basis of modern database management systems.</p>"},{"location":"sem1/math/u1/relations/#partial-ordering-relations-and-lattices","title":"Partial Ordering Relations and Lattices","text":""},{"location":"sem1/math/u1/relations/#relations_1","title":"Relations","text":"<p>A binary relation \\(R\\) from a set \\(A\\) to a set \\(B\\) is a subset of the Cartesian product \\(A \\times B\\). If \\(A = B\\), we say that \\(R\\) is a relation on the set \\(A\\). If \\((a, b) \\in R\\), we can also write \\(aRb\\), which means \"\\(a\\) is related to \\(b\\)\".</p>"},{"location":"sem1/math/u1/relations/#partial-ordering-relations","title":"Partial Ordering Relations","text":"<p>A relation \\(R\\) on a set \\(A\\) is called a partial ordering relation (or partial order) if it is:</p> <ol> <li>Reflexive: For all \\(a \\in A\\), \\((a, a) \\in R\\).<ul> <li>Every element is related to itself.</li> </ul> </li> <li>Antisymmetric: For all \\(a, b \\in A\\), if \\((a, b) \\in R\\) and \\((b, a) \\in R\\), then \\(a = b\\).<ul> <li>If two distinct elements are related, the relation cannot go in both directions.</li> </ul> </li> <li>Transitive: For all \\(a, b, c \\in A\\), if \\((a, b) \\in R\\) and \\((b, c) \\in R\\), then \\((a, c) \\in R\\).<ul> <li>If \\(a\\) is related to \\(b\\) and \\(b\\) is related to \\(c\\), then \\(a\\) must be related to \\(c\\).</li> </ul> </li> </ol> <p>A set \\(A\\) together with a partial ordering relation \\(R\\) is called a Partially Ordered Set or Poset, denoted as \\((A, R)\\). It is common to use symbols like \\(\\leq\\) or \\(\\preceq\\) to represent a generic partial order relation.</p> <p>Examples of Posets</p> <ul> <li>The set of integers \\(\\mathbb{Z}\\) with the \"less than or equal to\" relation \\((\\mathbb{Z}, \\leq)\\) is a poset.<ul> <li>Reflexive: \\(a \\leq a\\) for any integer \\(a\\).</li> <li>Antisymmetric: If \\(a \\leq b\\) and \\(b \\leq a\\), then \\(a = b\\).</li> <li>Transitive: If \\(a \\leq b\\) and \\(b \\leq c\\), then \\(a \\leq c\\).</li> </ul> </li> <li>The power set of a set \\(A\\), \\(\\mathcal{P}(A)\\), with the subset relation \\((\\mathcal{P}(A), \\subseteq)\\) is a poset.<ul> <li>Reflexive: \\(X \\subseteq X\\) for any set \\(X \\in \\mathcal{P}(A)\\).</li> <li>Antisymmetric: If \\(X \\subseteq Y\\) and \\(Y \\subseteq X\\), then \\(X = Y\\).</li> <li>Transitive: If \\(X \\subseteq Y\\) and \\(Y \\subseteq Z\\), then \\(X \\subseteq Z\\).</li> </ul> </li> <li>The set of positive integers \\(\\mathbb{Z}^+\\) with the \"divides\" relation \\((\\mathbb{Z}^+, |)\\) is a poset.<ul> <li>Reflexive: \\(a | a\\) for any \\(a \\in \\mathbb{Z}^+\\).</li> <li>Antisymmetric: If \\(a | b\\) and \\(b | a\\), then \\(a = b\\).</li> <li>Transitive: If \\(a | b\\) and \\(b | c\\), then \\(a | c\\).</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/relations/#hasse-diagrams","title":"Hasse Diagrams","text":"<p>A Hasse diagram is a graphical representation of a finite poset. It simplifies the directed graph of the relation by:</p> <ol> <li>Removing all self-loops that result from the reflexive property.</li> <li>Removing all transitive edges. We only show the \"immediate\" relationships.</li> <li>Arranging the vertices such that all edges point upwards, allowing us to omit the arrowheads.</li> </ol> <p>To construct a Hasse diagram:</p> <ul> <li>Start with the directed graph of the relation on the set.</li> <li>Remove all edges of the form \\((a, a)\\).</li> <li>Remove all edges \\((a, c)\\) for which there already exist edges \\((a, b)\\) and \\((b, c)\\).</li> <li>Draw the resulting graph with vertices arranged so that if \\(a \\preceq b\\), then \\(b\\) is placed above \\(a\\).</li> <li>Remove the arrowheads from the edges.</li> </ul>"},{"location":"sem1/math/u1/relations/#elements-in-a-poset","title":"Elements in a Poset","text":"<p>Let \\((S, \\preceq)\\) be a poset and \\(A \\subseteq S\\).</p> <ul> <li>Maximal Element: An element \\(a \\in S\\) is maximal if there is no other element \\(b \\in S\\) such that \\(a \\preceq b\\) and \\(a \\neq b\\).</li> <li>Minimal Element: An element \\(a \\in S\\) is minimal if there is no other element \\(b \\in S\\) such that \\(b \\preceq a\\) and \\(a \\neq b\\).</li> <li>Greatest Element (Top): An element \\(a \\in S\\) is the greatest element if \\(b \\preceq a\\) for all \\(b \\in S\\). It is unique if it exists. Denoted by \\(1\\) or \\(\\top\\).</li> <li>Least Element (Bottom): An element \\(a \\in S\\) is the least element if \\(a \\preceq b\\) for all \\(b \\in S\\). It is unique if it exists. Denoted by \\(0\\) or \\(\\bot\\).</li> <li>Upper Bound: An element \\(u \\in S\\) is an upper bound of \\(A\\) if \\(a \\preceq u\\) for all \\(a \\in A\\).</li> <li>Lower Bound: An element \\(l \\in S\\) is a lower bound of \\(A\\) if \\(l \\preceq a\\) for all \\(a \\in A\\).</li> <li>Least Upper Bound (LUB or Supremum): An upper bound \\(u\\) of \\(A\\) is the least upper bound if \\(u \\preceq v\\) for any other upper bound \\(v\\) of \\(A\\). Denoted as \\(sup(A)\\).</li> <li>Greatest Lower Bound (GLB or Infimum): A lower bound \\(l\\) of \\(A\\) is the greatest lower bound if \\(m \\preceq l\\) for any other lower bound \\(m\\) of \\(A\\). Denoted as \\(inf(A)\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#lattices","title":"Lattices","text":"<p>A lattice is a poset \\((L, \\preceq)\\) in which every pair of elements \\(\\{a, b\\}\\) has a unique least upper bound (LUB) and a unique greatest lower bound (GLB).</p> <ul> <li>The LUB of \\(\\{a, b\\}\\) is called the join of \\(a\\) and \\(b\\), denoted by \\(a \\vee b\\).</li> <li>The GLB of \\(\\{a, b\\}\\) is called the meet of \\(a\\) and \\(b\\), denoted by \\(a \\wedge b\\).</li> </ul> <p>So, a poset is a lattice if \\(a \\vee b\\) and \\(a \\wedge b\\) exist for all \\(a, b \\in L\\).</p> <p>Examples of Lattices</p> <ul> <li>\\((\\mathbb{Z}, \\leq)\\) is a lattice. For any integers \\(a, b\\), \\(a \\vee b = \\max(a, b)\\) and \\(a \\wedge b = \\min(a, b)\\).</li> <li>\\((\\mathcal{P}(A), \\subseteq)\\) is a lattice. For any subsets \\(X, Y \\subseteq A\\), \\(X \\vee Y = X \\cup Y\\) and \\(X \\wedge Y = X \\cap Y\\).</li> <li>\\((\\mathbb{Z}^+, |)\\) is a lattice. For any positive integers \\(a, b\\), \\(a \\vee b = \\text{lcm}(a, b)\\) and \\(a \\wedge b = \\text{gcd}(a, b)\\).</li> </ul>"},{"location":"sem1/math/u1/relations/#properties-of-lattices","title":"Properties of Lattices","text":"<p>For any elements \\(a, b, c\\) in a lattice \\(L\\):</p> <ol> <li>Idempotent Laws:<ul> <li>\\(a \\vee a = a\\)</li> <li>\\(a \\wedge a = a\\)</li> </ul> </li> <li>Commutative Laws:<ul> <li>\\(a \\vee b = b \\vee a\\)</li> <li>\\(a \\wedge b = b \\wedge a\\)</li> </ul> </li> <li>Associative Laws:<ul> <li>\\((a \\vee b) \\vee c = a \\vee (b \\vee c)\\)</li> <li>\\((a \\wedge b) \\wedge c = a \\wedge (b \\wedge c)\\)</li> </ul> </li> <li>Absorption Laws:<ul> <li>\\(a \\vee (a \\wedge b) = a\\)</li> <li>\\(a \\wedge (a \\vee b) = a\\)</li> </ul> </li> </ol>"},{"location":"sem1/math/u1/relations/#special-types-of-lattices","title":"Special Types of Lattices","text":""},{"location":"sem1/math/u1/relations/#bounded-lattice","title":"Bounded Lattice","text":"<p>A lattice \\(L\\) is bounded if it has a greatest element \\(1\\) (top) and a least element \\(0\\) (bottom). -   \\(a \\vee 1 = 1\\) and \\(a \\wedge 1 = a\\) -   \\(a \\vee 0 = a\\) and \\(a \\wedge 0 = 0\\)</p>"},{"location":"sem1/math/u1/relations/#distributive-lattice","title":"Distributive Lattice","text":"<p>A lattice \\(L\\) is distributive if the distributive laws hold for all \\(a, b, c \\in L\\): 1.  \\(a \\wedge (b \\vee c) = (a \\wedge b) \\vee (a \\wedge c)\\) (Meet distributes over Join) 2.  \\(a \\vee (b \\wedge c) = (a \\vee b) \\wedge (a \\vee c)\\) (Join distributes over Meet)</p> <p>Note</p> <p>In any lattice, one of these properties implies the other. A lattice is non-distributive if it contains a sublattice isomorphic to the \"diamond lattice\" \\(M_3\\) or the \"pentagon lattice\" \\(N_5\\).</p>"},{"location":"sem1/math/u1/relations/#complemented-lattice","title":"Complemented Lattice","text":"<p>A complemented lattice is a bounded lattice \\((L, \\preceq, \\vee, \\wedge, 0, 1)\\) in which every element \\(a \\in L\\) has a complement, denoted as \\(a'\\) or \\(\\bar{a}\\), such that: -   \\(a \\vee a' = 1\\) -   \\(a \\wedge a' = 0\\)</p> <p>The complement of an element may not be unique.</p>"},{"location":"sem1/math/u1/relations/#boolean-lattice-boolean-algebra","title":"Boolean Lattice (Boolean Algebra)","text":"<p>A lattice is a Boolean lattice or Boolean algebra if it is both distributive and complemented. In a Boolean algebra, the complement of every element is unique.</p> <p>Summary</p> <ul> <li>Poset: Reflexive, Antisymmetric, Transitive.</li> <li>Lattice: A poset where every pair has a unique LUB (join \\(\\vee\\)) and GLB (meet \\(\\wedge\\)).</li> <li>Bounded Lattice: A lattice with a greatest (1) and a least (0) element.</li> <li>Distributive Lattice: A lattice where meet distributes over join (and vice versa).</li> <li>Complemented Lattice: A bounded lattice where every element has a complement.</li> <li>Boolean Algebra: A lattice that is both distributive and complemented.</li> </ul>"},{"location":"sem1/math/u1/relations/#problem-set","title":"Problem Set","text":""},{"location":"sem1/math/u1/relations/#definition-and-properties-of-binary-relations_1","title":"Definition and Properties of Binary Relations","text":"<ol> <li> <p>Let \\( A = \\{1, 2, 3, 4\\} \\). A relation \\( R \\) is defined on \\( A \\) as \\( R = \\{(a, b) \\mid a \\text{ divides } b\\} \\).</p> <ul> <li>Write down all the ordered pairs in \\( R \\).</li> <li>Represent \\( R \\) as a matrix.</li> <li>Draw the directed graph (digraph) for \\( R \\).</li> </ul> </li> <li> <p>For each of the following relations on the set of integers \\( \\mathbb{Z} \\), determine whether it is reflexive, symmetric, antisymmetric, and/or transitive. Justify your answers.</p> <ul> <li>\\( R_1 = \\{(a, b) \\mid a \\leq b\\} \\)</li> <li>\\( R_2 = \\{(a, b) \\mid a = b \\text{ or } a = -b\\} \\)</li> <li>\\( R_3 = \\{(a, b) \\mid a = b+1\\} \\)</li> <li>\\( R_4 = \\{(a, b) \\mid a + b \\text{ is an even number}\\} \\)</li> <li>\\( R_5 = \\{(a, b) \\mid ab \\geq 0\\} \\)</li> </ul> </li> <li> <p>Let \\( S = \\{a, b, c\\} \\). Give an example of a relation on \\( S \\) that is:</p> <ul> <li>Symmetric but not transitive.</li> <li>Transitive but not symmetric.</li> <li>Antisymmetric and transitive but not reflexive.</li> <li>Reflexive and symmetric but not transitive.</li> </ul> </li> <li> <p>Consider the relation \\( R \\) on the set of all people, where \\( (a, b) \\in R \\) if person \\( a \\) is a sibling of person \\( b \\). Is this relation reflexive, symmetric, antisymmetric, or transitive? (Assume a person cannot be their own sibling).</p> </li> <li> <p>Let \\( A \\) be the set of all strings of English letters. Define a relation \\( R \\) on \\( A \\) by \\( s_1 R s_2 \\) if length(\\( s_1 \\)) = length(\\( s_2 \\)). Prove that \\( R \\) is an equivalence relation.</p> </li> <li> <p>Let \\( R \\) be the relation on the set of real numbers \\( \\mathbb{R} \\) defined by \\( x R y \\) if \\( x - y \\) is a rational number. Determine the properties (reflexive, symmetric, transitive) of \\( R \\).</p> </li> <li> <p>If \\( R_1 \\) and \\( R_2 \\) are two transitive relations on a set \\( A \\), is \\( R_1 \\cup R_2 \\) necessarily transitive? Prove or provide a counterexample.</p> </li> <li> <p>Let \\( R \\) be the relation \"congruence modulo 5\" on the set of integers \\( \\mathbb{Z} \\). That is, \\( x R y \\) if \\( x \\equiv y \\pmod{5} \\). Show that \\( R \\) has all the properties of an equivalence relation.</p> </li> <li> <p>Represent the relation \\( R = \\{(1,1), (1,4), (2,2), (2,5), (3,3), (4,1), (4,4), (5,2), (5,5)\\} \\) on the set \\( A = \\{1, 2, 3, 4, 5\\} \\) using a zero-one matrix.</p> </li> <li> <p>Draw the digraph for the relation from the previous question. From the digraph, determine if the relation is reflexive, symmetric, or antisymmetric.</p> </li> <li> <p>Let \\( P \\) be the set of all programs. Define a relation \\( R \\) on \\( P \\) such that \\( (p_1, p_2) \\in R \\) if program \\( p_1 \\) contains more lines of code than program \\( p_2 \\). What properties does this relation have?</p> </li> <li> <p>Prove that if a relation \\( R \\) on a set \\( A \\) is symmetric, then its inverse \\( R^{-1} \\) is also symmetric.</p> </li> </ol>"},{"location":"sem1/math/u1/relations/#closures-of-relations_1","title":"Closures of Relations","text":"<ol> <li> <p>Let \\( A = \\{a, b, c\\} \\) and \\( R = \\{(a, b), (b, c), (c, a)\\} \\). Find the reflexive closure of \\( R \\).</p> </li> <li> <p>Let \\( A = \\{1, 2, 3\\} \\) and \\( R = \\{(1, 2), (2, 1), (2, 3)\\} \\). Find the symmetric closure of \\( R \\).</p> </li> <li> <p>Find the reflexive and symmetric closures of the relation \\( R = \\{(x, y) \\mid x, y \\in \\mathbb{Z}, x &lt; y\\} \\).</p> </li> <li> <p>Let \\( R \\) be a relation on a set \\( A \\). Prove that the reflexive closure of \\( R \\) is \\( R \\cup \\Delta_A \\), where \\( \\Delta_A = \\{(a, a) \\mid a \\in A\\} \\).</p> </li> <li> <p>Let \\( M_R \\) be the matrix representation of a relation \\( R \\) on a set with \\( n \\) elements. How can you find the matrix representation for the reflexive closure of \\( R \\)?</p> </li> <li> <p>Let \\( R = \\{(1, 2), (2, 3), (3, 4)\\} \\) on the set \\( A = \\{1, 2, 3, 4\\} \\). Find the transitive closure \\( R^* \\) of \\( R \\).</p> </li> <li> <p>Use Warshall's Algorithm to find the transitive closure of the relation represented by the following matrix on the set \\( \\{a, b, c, d\\} \\):     [ M_R = \\begin{pmatrix} 0 &amp; 1 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 1 \\ 1 &amp; 0 &amp; 0 &amp; 0 \\end{pmatrix} ]</p> </li> <li> <p>Let \\( R \\) be the relation on \\( \\{1, 2, 3, 4, 5\\} \\) defined by \\( R = \\{(1, 2), (2, 3), (3, 4), (4, 5)\\} \\). Find the reflexive transitive closure of \\( R \\).</p> </li> <li> <p>What is the transitive closure of the relation \\( R = \\{(a, b) \\mid a \\text{ is a parent of } b\\} \\) on the set of all people?</p> </li> <li> <p>Let \\( R \\) be a relation on \\( A \\). Prove that the transitive closure of \\( R \\), \\( R^* \\), is the smallest transitive relation containing \\( R \\).</p> </li> </ol>"},{"location":"sem1/math/u1/relations/#equivalence-relations-and-partitions","title":"Equivalence Relations and Partitions","text":"<ol> <li> <p>Which of the relations in question 2 are equivalence relations? For those that are, describe their equivalence classes.</p> </li> <li> <p>Let \\( A \\) be the set of all students at a university. Define \\( (a, b) \\in R \\) if student \\( a \\) and student \\( b \\) are enrolled in the same course. Is \\( R \\) an equivalence relation? Explain.</p> </li> <li> <p>Let \\( R \\) be the relation on the set of ordered pairs of positive integers such that \\( ((a, b), (c, d)) \\in R \\) if and only if \\( ad = bc \\). Show that \\( R \\) is an equivalence relation.</p> </li> <li> <p>What are the equivalence classes of the relation from the previous question? (Hint: Think about what \\( \\frac{a}{b} = \\frac{c}{d} \\) means).</p> </li> <li> <p>Find the partition of the set \\( A = \\{1, 2, 3, 4, 5, 6, 7\\} \\) corresponding to the equivalence relation \\( R = \\{(a, b) \\mid a \\equiv b \\pmod{3}\\} \\).</p> </li> <li> <p>Let \\( \\mathcal{P} = \\{\\{1, 5\\}, \\{2, 4, 6\\}, \\{3\\}\\} \\) be a partition of the set \\( S = \\{1, 2, 3, 4, 5, 6\\} \\). Write down the equivalence relation \\( R \\) that induces this partition.</p> </li> <li> <p>State the Fundamental Theorem of Equivalence Relations. Explain its significance in your own words.</p> </li> <li> <p>Let \\( f: A \\to B \\) be a function. Define a relation \\( R \\) on \\( A \\) by \\( x R y \\) if \\( f(x) = f(y) \\).</p> <ul> <li>Prove that \\( R \\) is an equivalence relation on \\( A \\).</li> <li>Describe the equivalence classes of \\( R \\).</li> </ul> </li> <li> <p>Can \\( \\{\\{1, 2\\}, \\{2, 3\\}, \\{4\\}\\} \\) be a partition of \\( \\{1, 2, 3, 4\\} \\)? Why or why not?</p> </li> <li> <p>Let \\( A \\) be the set of all bit strings of length 8. Define a relation \\( R \\) on \\( A \\) where \\( s_1 R s_2 \\) if \\( s_1 \\) and \\( s_2 \\) have the same number of 1s.</p> <ul> <li>Show \\( R \\) is an equivalence relation.</li> <li>How many distinct equivalence classes are there?</li> </ul> </li> <li> <p>How many different equivalence relations can be defined on a set with 3 elements? Describe the corresponding partitions.</p> </li> <li> <p>A relation \\( R \\) is called a circular relation if \\( (a,b) \\in R \\) and \\( (b,c) \\in R \\) implies \\( (c,a) \\in R \\). Prove that a relation is an equivalence relation if and only if it is reflexive and circular.</p> </li> <li> <p>Let \\( R \\) be the relation on the set of points in the Cartesian plane \\( \\mathbb{R}^2 \\) where \\( (x_1, y_1) R (x_2, y_2) \\) if \\( x_1^2 + y_1^2 = x_2^2 + y_2^2 \\). Describe the equivalence classes geometrically.</p> </li> </ol>"},{"location":"sem1/math/u1/relations/#n-ary-relations_1","title":"N-ary Relations","text":"<ol> <li> <p>Define a 4-ary relation on the set of integers that would represent the equation \\( a + b = c + d \\).</p> </li> <li> <p>Consider the following table representing a ternary relation <code>STUDENT_COURSE_GRADE</code> on the sets <code>Students</code>, <code>Courses</code>, <code>Grades</code>.</p> </li> </ol> Student_ID Course_ID Grade 101 CS101 A 102 CS101 B 101 MA203 B 103 PHY101 C 102 MA203 A <ul> <li>What is the degree of this relation?</li> <li> <p>Write down all the 3-tuples that are part of this relation.</p> </li> <li> <p>From the table in the previous question, what is the result of selecting all tuples where <code>Course_ID = 'CS101'</code>?</p> </li> <li> <p>Explain the correspondence between an n-ary relation and a table in a relational database. What do the columns and rows represent?</p> </li> <li> <p>Create a 5-ary relation representing a <code>Flight</code> entity with attributes: <code>FlightNumber</code>, <code>Origin</code>, <code>Destination</code>, <code>DepartureTime</code>, <code>ArrivalTime</code>. Provide 3 example tuples for this relation.</p> </li> </ul>"},{"location":"sem1/math/u1/relations/#partial-ordering-relations-and-lattices_1","title":"Partial Ordering Relations and Lattices","text":"<ol> <li> <p>Define a partial ordering relation. Why is it called \"partial\"?</p> </li> <li> <p>Let \\( S = \\{1, 2, 3, 4, 6, 12\\} \\). The relation is \"divisibility\". Show that this relation is a partial ordering on \\( S \\).</p> </li> <li> <p>Draw the Hasse diagram for the poset described in the previous question.</p> </li> <li> <p>Consider the power set of \\( \\{a, b, c\\} \\), denoted \\( \\mathcal{P}(\\{a, b, c\\}) \\), with the subset relation \\( \\subseteq \\).</p> <ul> <li>Draw the Hasse diagram for this poset.</li> <li>Is this poset a total order? Explain.</li> </ul> </li> <li> <p>For the poset \\( (\\mathcal{P}(\\{a, b, c\\}), \\subseteq) \\), find:</p> <ul> <li>The maximal elements.</li> <li>The minimal elements.</li> <li>The greatest element.</li> <li>The least element.</li> </ul> </li> <li> <p>For the poset represented by the Hasse diagram from question 43, find:</p> <ul> <li>All upper bounds of the set \\( \\{2, 3\\} \\).</li> <li>The least upper bound (lub) of \\( \\{2, 3\\} \\).</li> <li>All lower bounds of the set \\( \\{6, 12\\} \\).</li> <li>The greatest lower bound (glb) of \\( \\{6, 12\\} \\).</li> </ul> </li> <li> <p>A relation \\( R \\) on a set \\( A \\) is a total order (or linear order) if it is a partial order and for every \\( a, b \\in A \\), either \\( (a, b) \\in R \\) or \\( (b, a) \\in R \\). Give an example of a poset that is not a total order.</p> </li> <li> <p>Define a lattice. Is the poset from question 44 a lattice? Justify your answer by checking if every pair of elements has a lub and a glb.</p> </li> <li> <p>Consider the set of positive integers \\( \\mathbb{Z}^+ \\) with the divisibility relation. Is this a lattice? If so, what are the meet (\\(\\wedge\\)) and join (\\(\\vee\\)) operations for any two integers \\( a \\) and \\( b \\)?</p> </li> <li> <p>Draw the Hasse diagram for the poset \\( (\\{1, 2, 3, 4, 5\\}, \\leq) \\) where \\( \\leq \\) is the standard \"less than or equal to\" relation. Is this a lattice?</p> </li> </ol>"},{"location":"sem1/math/u1/relations/#special-lattices-and-boolean-algebra","title":"Special Lattices and Boolean Algebra","text":"<ol> <li> <p>What is a bounded lattice? Give an example. Is the lattice from question 44 bounded? If so, what are its bounds (0 and 1)?</p> </li> <li> <p>Define a distributive lattice. Show that the lattice \\( (\\mathcal{P}(\\{a, b\\}), \\subseteq) \\) is distributive.</p> </li> <li> <p>Consider the \"diamond\" lattice, with elements \\( \\{0, a, b, c, 1\\} \\) where \\( 0 &lt; a, b, c &lt; 1 \\) and \\( a, b, c \\) are incomparable. Draw its Hasse diagram. Is this lattice distributive? (This is the standard \\( M_3 \\) lattice).</p> </li> <li> <p>Define a complemented lattice. Show that \\( (\\mathcal{P}(\\{a, b, c\\}), \\subseteq) \\) is a complemented lattice. What is the complement of the element \\( \\{a, b\\} \\)?</p> </li> <li> <p>Is the lattice of divisors of 12 (from question 43) a complemented lattice? Find the complement for each element if it exists.</p> </li> <li> <p>Define Boolean Algebra (or Boolean Lattice). List its key properties.</p> </li> <li> <p>Show that for any set \\( S \\), the power set lattice \\( (\\mathcal{P}(S), \\subseteq) \\) is a Boolean Algebra. What do the operations \\( \\vee \\), \\( \\wedge \\), and complement correspond to in terms of set operations?</p> </li> <li> <p>In a Boolean algebra, prove the absorption law: \\( a \\vee (a \\wedge b) = a \\).</p> </li> <li> <p>Simplify the Boolean expression \\( (x \\vee y) \\wedge (x' \\vee y) \\) using the properties of a Boolean Algebra.</p> </li> <li> <p>Consider the lattice of divisors of 30, \\( D_{30} = \\{1, 2, 3, 5, 6, 10, 15, 30\\} \\) with the divisibility relation.</p> <ul> <li>Draw its Hasse diagram.</li> <li>Show that this is a Boolean Algebra.</li> <li>Find the complement of the element 6.</li> </ul> </li> </ol>"},{"location":"sem1/math/u1/sets/","title":"Sets","text":""},{"location":"sem1/math/u1/sets/#definition-of-a-set","title":"Definition of a Set","text":"<p>In mathematics, a set is a well-defined collection of distinct objects, considered as an object in its own right. The objects that make up a set are called its elements or members. The key characteristics of a set are:</p> <ul> <li>Well-defined: It must be clear and unambiguous whether an object belongs to the set or not. For example, \"the set of tall students in a class\" is not well-defined because \"tall\" is subjective. However, \"the set of students in a class taller than 170 cm\" is well-defined.</li> <li>Distinct: A set does not contain duplicate elements. Each element is unique.</li> <li>Unordered: The order in which elements are listed does not matter. The set \\(\\{a, b, c\\}\\) is the same as \\(\\{c, a, b\\}\\).</li> </ul> <p>Notation</p> <ul> <li>Sets are usually denoted by capital letters (e.g., \\(A, B, S\\)).</li> <li>Elements are usually denoted by lowercase letters (e.g., \\(a, b, x\\)).</li> <li>If \\(x\\) is an element of a set \\(A\\), we write \\(x \\in A\\) (read as \"x belongs to A\").</li> <li>If \\(x\\) is not an element of a set \\(A\\), we write \\(x \\notin A\\) (read as \"x does not belong to A\").</li> </ul>"},{"location":"sem1/math/u1/sets/#representation-of-sets","title":"Representation of Sets","text":"<p>There are two primary ways to represent a set:</p> <ol> <li> <p>Roster or Tabular Form:     All the elements of the set are listed, separated by commas and enclosed within curly braces \\(\\{\\}\\).</p> <p>Roster Form</p> <ul> <li>The set \\(V\\) of vowels in the English alphabet: \\(V = \\{a, e, i, o, u\\}\\)</li> <li>The set \\(N\\) of the first 5 natural numbers: \\(N = \\{1, 2, 3, 4, 5\\}\\)</li> <li>The set of integers \\(\\mathbb{Z}\\): \\(\\mathbb{Z} = \\{\\dots, -3, -2, -1, 0, 1, 2, 3, \\dots\\}\\)</li> </ul> </li> <li> <p>Set-Builder or Rule Form:     A set is described by stating a property that its elements must satisfy. The general form is \\(A = \\{x \\mid P(x)\\}\\) or \\(A = \\{x : P(x)\\}\\), which is read as \"the set of all elements \\(x\\) such that \\(x\\) satisfies the property \\(P(x)\\)\".</p> <p>Set-Builder Form</p> <ul> <li>The set \\(V\\) of vowels in the English alphabet: \\(V = \\{x \\mid x \\text{ is a vowel in the English alphabet}\\}\\)</li> <li>The set \\(E\\) of all even integers: \\(E = \\{x \\mid x \\in \\mathbb{Z} \\text{ and } x = 2k \\text{ for some integer } k\\}\\)</li> <li>The set \\(Q\\) of rational numbers: \\(Q = \\{x \\mid x = p/q, \\text{ where } p, q \\in \\mathbb{Z} \\text{ and } q \\neq 0\\}\\)</li> </ul> </li> </ol>"},{"location":"sem1/math/u1/sets/#important-sets-in-mathematics","title":"Important Sets in Mathematics","text":"<ul> <li>\\(\\emptyset\\) or \\(\\{\\}\\): The empty set or null set, which contains no elements.</li> <li>\\(\\mathbb{N}\\): The set of Natural Numbers \\(\\{1, 2, 3, \\dots\\}\\).</li> <li>\\(\\mathbb{W}\\): The set of Whole Numbers \\(\\{0, 1, 2, 3, \\dots\\}\\).</li> <li>\\(\\mathbb{Z}\\): The set of Integers \\(\\{\\dots, -2, -1, 0, 1, 2, \\dots\\}\\).</li> <li>\\(\\mathbb{Q}\\): The set of Rational Numbers (fractions).</li> <li>\\(\\mathbb{R}\\): The set of Real Numbers (includes all rational and irrational numbers).</li> <li>\\(\\mathbb{C}\\): The set of Complex Numbers.</li> </ul>"},{"location":"sem1/math/u1/sets/#cardinality-of-a-set","title":"Cardinality of a Set","text":"<p>The cardinality of a set is a measure of the \"number of elements\" of the set. For a finite set, the cardinality is simply the count of its elements.</p> <p>Notation</p> <p>The cardinality of a set \\(A\\) is denoted by \\(|A|\\), \\(n(A)\\), or \\(card(A)\\).</p> <p>Cardinality</p> <ul> <li>If \\(A = \\{1, 2, 3, 4\\}\\), then \\(|A| = 4\\).</li> <li>If \\(V = \\{a, e, i, o, u\\}\\), then \\(|V| = 5\\).</li> <li>For the empty set, \\(|\\emptyset| = 0\\).</li> <li>For the set \\(B = \\{a, b, \\{c, d\\}\\}\\), \\(|B| = 3\\). The elements are \\(a\\), \\(b\\), and the set \\(\\{c, d\\}\\).</li> </ul>"},{"location":"sem1/math/u1/sets/#classification-of-sets","title":"Classification of Sets","text":"<p>Based on their cardinality, sets can be classified into finite, countable, and infinite.</p>"},{"location":"sem1/math/u1/sets/#finite-sets","title":"Finite Sets","text":"<p>A set is called finite if it is either empty or contains a specific, countable number of elements. In other words, if the process of counting its elements can eventually come to an end.</p> <p>Formally, a set \\(S\\) is finite if there exists a one-to-one correspondence (a bijection) between its elements and the set \\(\\{1, 2, 3, \\dots, n\\}\\) for some non-negative integer \\(n\\). The cardinality of such a set is \\(|S| = n\\).</p> <p>Finite Sets</p> <ul> <li>The set of days in a week: \\(|\\{\\text{Sun, Mon, Tue, Wed, Thu, Fri, Sat}\\}| = 7\\).</li> <li>The set of students in your classroom.</li> <li>The set of all prime numbers less than 100.</li> </ul>"},{"location":"sem1/math/u1/sets/#infinite-sets","title":"Infinite Sets","text":"<p>A set that is not finite is called an infinite set. The process of counting its elements would never end.</p> <p>Infinite Sets</p> <ul> <li>The set of natural numbers \\(\\mathbb{N} = \\{1, 2, 3, \\dots\\}\\).</li> <li>The set of all points on a line.</li> <li>The set of real numbers \\(\\mathbb{R}\\).</li> </ul> <p>Infinite sets can be further divided into two categories: countable and uncountable.</p>"},{"location":"sem1/math/u1/sets/#countable-sets","title":"Countable Sets","text":"<p>A set is countable if its elements can be put into a one-to-one correspondence with the set of natural numbers \\(\\mathbb{N}\\). This essentially means we can \"list\" all the elements of the set in a sequence \\(a_1, a_2, a_3, \\dots\\), even if the list goes on forever.</p> <ul> <li>All finite sets are countable.</li> <li>An infinite set that is countable is called countably infinite or denumerable.</li> </ul> <p>The cardinality of a countably infinite set is denoted by the symbol \\(\\aleph_0\\) (aleph-null). Thus, \\(|\\mathbb{N}| = \\aleph_0\\).</p> <p>Key Countably Infinite Sets</p> <ul> <li>The Set of Natural Numbers (\\(\\mathbb{N}\\)): This is the fundamental example of a countably infinite set. \\(|\\mathbb{N}| = \\aleph_0\\).</li> <li>The Set of Integers (\\(\\mathbb{Z}\\)): This set is also countably infinite. We can list its elements like this: \\(0, 1, -1, 2, -2, 3, -3, \\dots\\). This ensures every integer appears exactly once in the list. So, \\(|\\mathbb{Z}| = \\aleph_0\\).</li> <li>The Set of Rational Numbers (\\(\\mathbb{Q}\\)): Surprisingly, the set of all fractions is also countably infinite. Although they seem much more \"dense\" than integers, it can be proven that they can be systematically listed without missing any. So, \\(|\\mathbb{Q}| = \\aleph_0\\).</li> </ul>"},{"location":"sem1/math/u1/sets/#uncountable-sets","title":"Uncountable Sets","text":"<p>An infinite set that is not countable is called an uncountable set (or uncountably infinite). It is impossible to list all the elements of an uncountable set in a sequence. These sets are \"larger\" in size than countably infinite sets.</p> <p>Uncountable Sets are 'Bigger' Infinities</p> <p>The existence of uncountable sets implies that there are different sizes of infinity. The cardinality of countably infinite sets (\\(\\aleph_0\\)) is the \"smallest\" infinity.</p> <p>Uncountable Sets</p> <ul> <li>The Set of Real Numbers (\\(\\mathbb{R}\\)): This is the most common example of an uncountable set. The famous Cantor's diagonalization argument proves that the real numbers between 0 and 1 alone cannot be put into a one-to-one correspondence with \\(\\mathbb{N}\\). Therefore, the set of all real numbers is uncountable. Its cardinality is denoted by \\(c\\) (for continuum) or \\(\\aleph_1\\). We know that \\(\\aleph_0 &lt; c\\).</li> <li>The Power Set of \\(\\mathbb{N}\\): The set of all subsets of the natural numbers, denoted \\(P(\\mathbb{N})\\), is also uncountable.</li> </ul>"},{"location":"sem1/math/u1/sets/#summary-table","title":"Summary Table","text":"Category Definition Cardinality Examples Finite Empty or has \\(n\\) elements for some \\(n \\in \\mathbb{W}\\). ( A Infinite Not finite. Infinite \\(\\mathbb{N}, \\mathbb{Z}, \\mathbb{Q}, \\mathbb{R}\\) Countably Infinite Can be put in 1-to-1 correspondence with \\(\\mathbb{N}\\). ( A Uncountably Infinite Cannot be put in 1-to-1 correspondence with \\(\\mathbb{N}\\). ( A"},{"location":"sem1/math/u1/sets/#operations-on-sets-and-venn-diagrams","title":"Operations on Sets and Venn Diagrams","text":""},{"location":"sem1/math/u1/sets/#universal-set-u","title":"Universal Set (U)","text":"<p>Before diving into operations, it's crucial to understand the Universal Set, denoted by \\(U\\). The universal set is the set containing all possible elements under consideration for a particular problem. All other sets are considered subsets of the universal set.</p> <ul> <li>Example: If we are discussing sets of vowels, the universal set could be \\(U = \\{a, e, i, o, u\\}\\). If we are discussing sets of single-digit numbers, \\(U = \\{0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\}\\).</li> </ul>"},{"location":"sem1/math/u1/sets/#venn-diagrams","title":"Venn Diagrams","text":"<p>A Venn diagram is a visual representation of the relationship between sets. It uses overlapping circles or other shapes to illustrate the logical relationships between two or more sets. The universal set is typically represented by a rectangle, and subsets are represented by circles within this rectangle.</p>"},{"location":"sem1/math/u1/sets/#basic-set-operations","title":"Basic Set Operations","text":"<p>Let's consider two sets, \\(A\\) and \\(B\\), which are subsets of a universal set \\(U\\).</p>"},{"location":"sem1/math/u1/sets/#union-of-sets","title":"Union of Sets (\u222a)","text":"<p>The union of two sets \\(A\\) and \\(B\\), denoted by \\(A \\cup B\\), is the set of all elements that are in set \\(A\\), or in set \\(B\\), or in both.</p> <ul> <li>Set-Builder Notation: \\(A \\cup B = \\{x \\mid x \\in A \\lor x \\in B\\}\\)</li> <li>Explanation: It combines all unique elements from both sets.</li> <li>Example:<ul> <li>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{3, 4, 5\\}\\).</li> <li>Then, \\(A \\cup B = \\{1, 2, 3, 4, 5\\}\\).</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#venn-diagram-for-union","title":"Venn Diagram for Union","text":"<p>The union is represented by shading the entire area covered by both circles \\(A\\) and \\(B\\).</p>"},{"location":"sem1/math/u1/sets/#intersection-of-sets","title":"Intersection of Sets (\u2229)","text":"<p>The intersection of two sets \\(A\\) and \\(B\\), denoted by \\(A \\cap B\\), is the set of all elements that are common to both set \\(A\\) and set \\(B\\).</p> <ul> <li>Set-Builder Notation: \\(A \\cap B = \\{x \\mid x \\in A \\land x \\in B\\}\\)</li> <li>Explanation: It includes only the elements that exist in both sets simultaneously.</li> <li>Example:<ul> <li>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{3, 4, 5\\}\\).</li> <li>Then, \\(A \\cap B = \\{3\\}\\).</li> </ul> </li> </ul> <p>If \\(A \\cap B = \\emptyset\\) (the empty set), then \\(A\\) and \\(B\\) are called disjoint sets.</p>"},{"location":"sem1/math/u1/sets/#venn-diagram-for-intersection","title":"Venn Diagram for Intersection","text":"<p>The intersection is represented by shading only the overlapping area of circles \\(A\\) and \\(B\\).</p>"},{"location":"sem1/math/u1/sets/#difference-of-sets-or","title":"Difference of Sets (\u2212 or \\)","text":"<p>The difference between two sets \\(A\\) and \\(B\\), denoted by \\(A - B\\) or \\(A \\setminus B\\), is the set of all elements that are in set \\(A\\) but not in set \\(B\\).</p> <ul> <li>Set-Builder Notation: \\(A - B = \\{x \\mid x \\in A \\land x \\notin B\\}\\)</li> <li>Explanation: Start with set \\(A\\) and remove all elements that are also present in set \\(B\\). Note that \\(A - B \\neq B - A\\) in general.</li> <li>Example:<ul> <li>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{3, 4, 5\\}\\).</li> <li>Then, \\(A - B = \\{1, 2\\}\\).</li> <li>And, \\(B - A = \\{4, 5\\}\\).</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#venn-diagram-for-difference","title":"Venn Diagram for Difference","text":"<p>The difference \\(A - B\\) is represented by shading the area of circle \\(A\\) that does not overlap with circle \\(B\\).</p>"},{"location":"sem1/math/u1/sets/#complement-of-a-set-a-or-ac","title":"Complement of a Set (A' or A\u1d9c)","text":"<p>The complement of a set \\(A\\), denoted by \\(A'\\) or \\(A^c\\), is the set of all elements in the universal set \\(U\\) that are not in set \\(A\\).</p> <ul> <li>Set-Builder Notation: \\(A' = \\{x \\in U \\mid x \\notin A\\}\\)</li> <li>Explanation: It's essentially \\(U - A\\).</li> <li>Example:<ul> <li>Let \\(U = \\{1, 2, 3, 4, 5, 6\\}\\) and \\(A = \\{1, 2, 3\\}\\).</li> <li>Then, \\(A' = \\{4, 5, 6\\}\\).</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#venn-diagram-for-complement","title":"Venn Diagram for Complement","text":"<p>The complement of \\(A\\) is represented by shading the area inside the universal set's rectangle but outside the circle \\(A\\).</p>"},{"location":"sem1/math/u1/sets/#symmetric-difference-or","title":"Symmetric Difference (\u0394 or \u2295)","text":"<p>The symmetric difference of two sets \\(A\\) and \\(B\\), denoted by \\(A \\Delta B\\), is the set of all elements that are in either of the sets, but not in their intersection.</p> <ul> <li>Set-Builder Notation: \\(A \\Delta B = \\{x \\mid (x \\in A \\land x \\notin B) \\lor (x \\in B \\land x \\notin A)\\}\\)</li> <li>Relationship with other operations:<ul> <li>\\(A \\Delta B = (A - B) \\cup (B - A)\\)</li> <li>\\(A \\Delta B = (A \\cup B) - (A \\cap B)\\)</li> </ul> </li> <li>Example:<ul> <li>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{3, 4, 5\\}\\).</li> <li>\\(A \\cup B = \\{1, 2, 3, 4, 5\\}\\)</li> <li>\\(A \\cap B = \\{3\\}\\)</li> <li>Then, \\(A \\Delta B = \\{1, 2, 3, 4, 5\\} - \\{3\\} = \\{1, 2, 4, 5\\}\\).</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#venn-diagram-for-symmetric-difference","title":"Venn Diagram for Symmetric Difference","text":"<p>The symmetric difference is represented by shading all parts of circles \\(A\\) and \\(B\\) except for their overlapping intersection.</p>"},{"location":"sem1/math/u1/sets/#laws-of-set-algebra","title":"Laws of Set Algebra","text":"<p>Just like algebra with numbers, set operations follow certain laws.</p> Law Union Intersection Commutative Law \\(A \\cup B = B \\cup A\\) \\(A \\cap B = B \\cap A\\) Associative Law \\((A \\cup B) \\cup C = A \\cup (B \\cup C)\\) \\((A \\cap B) \\cap C = A \\cap (B \\cap C)\\) Distributive Law \\(A \\cup (B \\cap C) = (A \\cup B) \\cap (A \\cup C)\\) \\(A \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)\\) Identity Law \\(A \\cup \\emptyset = A\\) \\(A \\cap U = A\\) Complement Law \\(A \\cup A' = U\\) \\(A \\cap A' = \\emptyset\\) Idempotent Law \\(A \\cup A = A\\) \\(A \\cap A = A\\)"},{"location":"sem1/math/u1/sets/#de-morgans-laws","title":"De Morgan's Laws","text":"<p>De Morgan's laws are two fundamental rules that relate union, intersection, and complementation.</p> <ol> <li> <p>First Law: The complement of the union of two sets is the intersection of their complements.</p> <ul> <li>\\((A \\cup B)' = A' \\cap B'\\)</li> </ul> </li> <li> <p>Second Law: The complement of the intersection of two sets is the union of their complements.</p> <ul> <li>\\((A \\cap B)' = A' \\cup B'\\)</li> </ul> </li> </ol>"},{"location":"sem1/math/u1/sets/#principle-of-inclusion-and-exclusion","title":"Principle of Inclusion and Exclusion","text":"<p>The Principle of Inclusion and Exclusion (PIE) is a fundamental counting technique in combinatorics. It provides a systematic way to find the number of elements in the union of multiple sets by adding the sizes of the individual sets and then compensating for the elements that have been counted multiple times.</p> <p>The core idea is to \"include\" the sizes of the individual sets, then \"exclude\" the sizes of their pairwise intersections, then \"include\" the sizes of their three-way intersections, and so on, with alternating signs.</p>"},{"location":"sem1/math/u1/sets/#pie-for-two-sets","title":"PIE for Two Sets","text":"<p>For two finite sets, \\(A\\) and \\(B\\), the number of elements in their union \\(A \\cup B\\) is the sum of the number of elements in each set minus the number of elements in their intersection.</p> <p>The formula is:</p> \\[ |A \\cup B| = |A| + |B| - |A \\cap B| \\] <ul> <li>\\(|A|\\): The cardinality (number of elements) of set A.</li> <li>\\(|B|\\): The cardinality of set B.</li> <li>\\(|A \\cap B|\\): The cardinality of the intersection of A and B (elements common to both).</li> </ul> <p>We subtract \\(|A \\cap B|\\) because these elements were counted twice: once in \\(|A|\\) and once in \\(|B|\\).</p> <p>Example: Students and Subjects</p> <p>In a class of 50 students, 30 students passed in Mathematics (\\(M\\)), 25 passed in Science (\\(S\\)), and 15 passed in both subjects. How many students passed in at least one of the two subjects?</p> <ul> <li>Let \\(M\\) be the set of students who passed in Mathematics, so \\(|M| = 30\\).</li> <li>Let \\(S\\) be the set of students who passed in Science, so \\(|S| = 25\\).</li> <li>The set of students who passed in both is \\(M \\cap S\\), so \\(|M \\cap S| = 15\\).</li> </ul> <p>We want to find the number of students who passed in at least one subject, which is \\(|M \\cup S|\\).</p> <p>Using the Principle of Inclusion and Exclusion: [ |M \\cup S| = |M| + |S| - |M \\cap S| ] [ |M \\cup S| = 30 + 25 - 15 = 40 ] Therefore, 40 students passed in at least one of the two subjects.</p>"},{"location":"sem1/math/u1/sets/#pie-for-three-sets","title":"PIE for Three Sets","text":"<p>For three finite sets, \\(A\\), \\(B\\), and \\(C\\), the principle is extended. We add the sizes of the sets, subtract the sizes of all pairwise intersections, and finally add back the size of the three-way intersection.</p> <p>The formula is:</p> \\[ |A \\cup B \\cup C| = |A| + |B| + |C| - (|A \\cap B| + |A \\cap C| + |B \\cap C|) + |A \\cap B \\cap C| \\] <ul> <li>Inclusion: We first add \\(|A|\\), \\(|B|\\), and \\(|C|\\). This overcounts elements in the intersections.</li> <li>Exclusion: We subtract \\(|A \\cap B|\\), \\(|A \\cap C|\\), and \\(|B \\cap C|\\) to correct for the double-counting. However, this over-corrects for the elements in \\(A \\cap B \\cap C\\), which were initially counted three times and have now been subtracted three times.</li> <li>Inclusion: We add back \\(|A \\cap B \\cap C|\\) to ensure these elements are counted exactly once.</li> </ul>"},{"location":"sem1/math/u1/sets/#the-general-principle","title":"The General Principle","text":"<p>The principle can be generalized to find the cardinality of the union of \\(n\\) finite sets, \\(A_1, A_2, \\dots, A_n\\).</p> <p>The general formula is:</p> \\[ |A_1 \\cup A_2 \\cup \\dots \\cup A_n| = \\sum_{1 \\le i \\le n} |A_i| - \\sum_{1 \\le i &lt; j \\le n} |A_i \\cap A_j| + \\sum_{1 \\le i &lt; j &lt; k \\le n} |A_i \\cap A_j \\cap A_k| - \\dots + (-1)^{n-1} |A_1 \\cap \\dots \\cap A_n| \\] <p>In a more compact summation notation:</p> \\[ |\\bigcup_{i=1}^{n} A_i| = \\sum_{k=1}^{n} (-1)^{k-1} \\sum_{1 \\le i_1 &lt; \\dots &lt; i_k \\le n} |A_{i_1} \\cap \\dots \\cap A_{i_k}| \\] <p>Complementary Form</p> <p>Often, we are interested in finding the number of elements that are in none of the sets. If \\(U\\) is the universal set, this is given by \\(|\\overline{A_1} \\cap \\overline{A_2} \\cap \\dots \\cap \\overline{A_n}|\\). By De Morgan's laws, this is equal to \\(|\\overline{A_1 \\cup A_2 \\cup \\dots \\cup A_n}|\\).</p> \\[ |\\overline{A_1} \\cap \\dots \\cap \\overline{A_n}| = |U| - |A_1 \\cup A_2 \\cup \\dots \\cup A_n| \\]"},{"location":"sem1/math/u1/sets/#applications-of-pie","title":"Applications of PIE","text":"<p>The Principle of Inclusion and Exclusion has several important applications in combinatorics and number theory.</p>"},{"location":"sem1/math/u1/sets/#counting-integers-with-specific-properties","title":"Counting Integers with Specific Properties","text":"<p>PIE is used to count the number of integers in a range that are divisible by a certain set of numbers.</p> <p>Example: Divisibility</p> <p>How many positive integers not exceeding 1000 are divisible by 5, 7, or 11?</p> <ul> <li>Universal Set: \\(U = \\{1, 2, \\dots, 1000\\}\\), so \\(|U|=1000\\).</li> <li> <p>Sets:</p> <ul> <li>Let \\(A\\) be the set of integers divisible by 5. \\(|A| = \\lfloor \\frac{1000}{5} \\rfloor = 200\\).</li> <li>Let \\(B\\) be the set of integers divisible by 7. \\(|B| = \\lfloor \\frac{1000}{7} \\rfloor = 142\\).</li> <li>Let \\(C\\) be the set of integers divisible by 11. \\(|C| = \\lfloor \\frac{1000}{11} \\rfloor = 90\\).</li> </ul> </li> <li> <p>Pairwise Intersections (divisible by pairs of numbers):</p> <ul> <li>\\(|A \\cap B|\\) (divisible by 5 and 7, i.e., 35): \\( \\lfloor \\frac{1000}{35} \\rfloor = 28\\).</li> <li>\\(|A \\cap C|\\) (divisible by 5 and 11, i.e., 55): \\( \\lfloor \\frac{1000}{55} \\rfloor = 18\\).</li> <li>\\(|B \\cap C|\\) (divisible by 7 and 11, i.e., 77): \\( \\lfloor \\frac{1000}{77} \\rfloor = 12\\).</li> </ul> </li> <li> <p>Three-way Intersection (divisible by 5, 7, and 11, i.e., 385):</p> <ul> <li>\\(|A \\cap B \\cap C|\\): \\( \\lfloor \\frac{1000}{385} \\rfloor = 2\\).</li> </ul> </li> <li> <p>Applying PIE:</p> </li> </ul> \\[ |A \\cup B \\cup C| = (|A| + |B| + |C|) - (|A \\cap B| + |A \\cap C| + |B \\cap C|) + |A \\cap B \\cap C| \\] \\[ |A \\cup B \\cup C| = (200 + 142 + 90) - (28 + 18 + 12) + 2 \\] \\[ |A \\cup B \\cup C| = 432 - 58 + 2 = 376 \\] <p>So, 376 integers not exceeding 1000 are divisible by 5, 7, or 11.</p>"},{"location":"sem1/math/u1/sets/#derangements","title":"Derangements","text":"<p>A derangement is a permutation of the elements of a set such that no element appears in its original position. The number of derangements of \\(n\\) elements is denoted by \\(D_n\\) or \\(!n\\).</p> <ul> <li>Problem: Find the number of derangements of \\(n\\) objects.</li> <li>Approach: We find the total number of permutations (\\(n!\\)) and subtract the number of permutations where at least one element is in its correct place.</li> </ul> <p>Let \\(U\\) be the set of all \\(n!\\) permutations. Let \\(A_i\\) be the set of permutations where the \\(i\\)-th element is in its original position. We want to find the number of permutations that are in none of these sets, i.e., \\(|U| - |A_1 \\cup A_2 \\cup \\dots \\cup A_n|\\).</p> <ul> <li>The size of \\(A_i\\) is \\((n-1)!\\) (fix element \\(i\\) and permute the other \\(n-1\\)). There are \\(\\binom{n}{1}\\) such sets.</li> <li>The size of \\(A_i \\cap A_j\\) is \\((n-2)!\\). There are \\(\\binom{n}{2}\\) such intersections.</li> <li>The size of a \\(k\\)-wise intersection is \\((n-k)!\\). There are \\(\\binom{n}{k}\\) such intersections.</li> </ul> <p>Using PIE, the number of permutations with at least one fixed point is:</p> \\[ |A_1 \\cup \\dots \\cup A_n| = \\binom{n}{1}(n-1)! - \\binom{n}{2}(n-2)! + \\dots + (-1)^{n-1}\\binom{n}{n}(n-n)! \\] <p>Simplifying \\(\\binom{n}{k}(n-k)! = \\frac{n!}{k!(n-k)!}(n-k)! = \\frac{n!}{k!}\\), we get:</p> \\[ |A_1 \\cup \\dots \\cup A_n| = \\frac{n!}{1!} - \\frac{n!}{2!} + \\frac{n!}{3!} - \\dots + (-1)^{n-1}\\frac{n!}{n!} \\] <p>The number of derangements \\(D_n\\) is:</p> \\[ D_n = n! - |A_1 \\cup \\dots \\cup A_n| \\] \\[ D_n = n! - (\\frac{n!}{1!} - \\frac{n!}{2!} + \\dots + (-1)^{n-1}\\frac{n!}{n!}) \\] \\[ D_n = n! \\left( 1 - \\frac{1}{1!} + \\frac{1}{2!} - \\frac{1}{3!} + \\dots + \\frac{(-1)^n}{n!} \\right) = n! \\sum_{k=0}^{n} \\frac{(-1)^k}{k!} \\]"},{"location":"sem1/math/u1/sets/#number-of-surjective-onto-functions","title":"Number of Surjective (Onto) Functions","text":"<p>A function \\(f: A \\to B\\) is surjective (or onto) if every element in the codomain \\(B\\) is an image of at least one element from the domain \\(A\\). PIE can be used to count the number of such functions.</p> <ul> <li>Problem: Find the number of surjective functions from set \\(A\\) with \\(m\\) elements to set \\(B\\) with \\(n\\) elements, where \\(m \\ge n\\).</li> <li>Approach: Start with the total number of functions from \\(A\\) to \\(B\\), which is \\(n^m\\). Then, subtract the functions that are not surjective. A function is not surjective if at least one element in \\(B\\) is not in the image.</li> </ul> <p>Let \\(B = \\{b_1, b_2, \\dots, b_n\\}\\). Let \\(A_i\\) be the set of functions where the element \\(b_i \\in B\\) is not in the image of the function. We want to find the number of functions that are in none of these sets, which is \\(n^m - |A_1 \\cup A_2 \\cup \\dots \\cup A_n|\\).</p> <ul> <li>The size of \\(A_i\\): These are functions from \\(A\\) to \\(B - \\{b_i\\}\\). There are \\((n-1)\\) choices in the codomain for each of the \\(m\\) elements in the domain. So, \\(|A_i| = (n-1)^m\\).</li> <li>The size of \\(A_i \\cap A_j\\): These are functions that miss both \\(b_i\\) and \\(b_j\\). So, \\(|A_i \\cap A_j| = (n-2)^m\\).</li> <li>The size of a \\(k\\)-wise intersection is \\((n-k)^m\\).</li> </ul> <p>The number of functions that are not surjective is \\(|A_1 \\cup \\dots \\cup A_n|\\):</p> \\[ \\binom{n}{1}(n-1)^m - \\binom{n}{2}(n-2)^m + \\dots + (-1)^{n-1}\\binom{n}{n}(n-n)^m \\] <p>The number of surjective functions is:</p> \\[ n^m - \\left[ \\binom{n}{1}(n-1)^m - \\binom{n}{2}(n-2)^m + \\dots \\right] \\] <p>This simplifies to the formula:</p> \\[ \\sum_{k=0}^{n} (-1)^k \\binom{n}{k} (n-k)^m \\]"},{"location":"sem1/math/u1/sets/#multisets","title":"Multisets","text":"<p>A multiset is a modification of the concept of a set that, unlike a standard set, allows for multiple instances of each of its elements. The number of times an element appears in a multiset is called its multiplicity. Multisets are also sometimes called bags.</p> <p>For example, \\(\\{1, 1, 2, 2, 2, 3\\}\\) and \\(\\{a, b, b, c, d, d, d\\}\\) are multisets. In a standard set, these would be represented as \\(\\{1, 2, 3\\}\\) and \\(\\{a, b, c, d\\}\\), respectively, as duplicates are not counted.</p>"},{"location":"sem1/math/u1/sets/#formal-definition","title":"Formal Definition","text":"<p>Formally, a multiset \\(M\\) can be defined as an ordered pair \\((S, m)\\), where \\(S\\) is the underlying set of distinct elements, and \\(m\\) is a multiplicity function \\(m: S \\to \\mathbb{Z}^+\\), which maps each element in \\(S\\) to a positive integer representing its multiplicity.</p> <p>For the multiset \\(M = \\{a, a, b, c, c, c\\}\\):</p> <ul> <li>The underlying set is \\(S = \\{a, b, c\\}\\).</li> <li>The multiplicity function \\(m\\) is defined as:<ul> <li>\\(m(a) = 2\\)</li> <li>\\(m(b) = 1\\)</li> <li>\\(m(c) = 3\\)</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#cardinality-of-a-multiset","title":"Cardinality of a Multiset","text":"<p>The cardinality (or size) of a multiset is the total number of elements it contains, including repetitions. It is the sum of the multiplicities of all its distinct elements.</p> <p>If \\(M = (S, m)\\) is a multiset, its cardinality, denoted as \\(|M|\\) or \\(card(M)\\), is calculated as: [ |M| = \\sum_{x \\in S} m(x) ] Example: For the multiset \\(M = \\{1, 1, 2, 3, 3, 3, 4\\}\\):</p> <ul> <li>Underlying set \\(S = \\{1, 2, 3, 4\\}\\).</li> <li>Multiplicities are \\(m(1)=2\\), \\(m(2)=1\\), \\(m(3)=3\\), \\(m(4)=1\\).</li> <li>The cardinality is \\(|M| = 2 + 1 + 3 + 1 = 7\\).</li> </ul>"},{"location":"sem1/math/u1/sets/#submultisets","title":"Submultisets","text":"<p>A multiset \\(A\\) is a submultiset of a multiset \\(B\\), denoted \\(A \\subseteq B\\), if the multiplicity of each element in \\(A\\) is less than or equal to its multiplicity in \\(B\\).</p> <p>Formally, let \\(A = (S_A, m_A)\\) and \\(B = (S_B, m_B)\\). Then \\(A \\subseteq B\\) if and only if for every element \\(x \\in S_A\\), \\(x\\) is also in \\(S_B\\) and \\(m_A(x) \\le m_B(x)\\).</p> <p>Example: If \\(A = \\{a, a, b\\}\\) and \\(B = \\{a, a, a, b, c\\}\\), then \\(A\\) is a submultiset of \\(B\\) because:</p> <ul> <li>\\(m_A(a) = 2\\) and \\(m_B(a) = 3\\), so \\(2 \\le 3\\).</li> <li>\\(m_A(b) = 1\\) and \\(m_B(b) = 1\\), so \\(1 \\le 1\\).</li> </ul>"},{"location":"sem1/math/u1/sets/#operations-on-multisets","title":"Operations on Multisets","text":"<p>Let \\(A\\) and \\(B\\) be two multisets. Let \\(m_A(x)\\) and \\(m_B(x)\\) be the multiplicities of an element \\(x\\) in \\(A\\) and \\(B\\) respectively. (If an element is not in a multiset, its multiplicity is 0).</p>"},{"location":"sem1/math/u1/sets/#union","title":"Union","text":"<p>The union of two multisets \\(A\\) and \\(B\\), denoted \\(A \\cup B\\), is a multiset where the multiplicity of an element is the maximum of its multiplicities in \\(A\\) and \\(B\\). [ m_{A \\cup B}(x) = \\max(m_A(x), m_B(x)) ] Example: Let \\(A = \\{1, 1, 2, 3\\}\\) and \\(B = \\{1, 2, 2, 4\\}\\).</p> <ul> <li>\\(m_A(1) = 2\\), \\(m_B(1) = 1 \\implies \\max(2, 1) = 2\\). Multiplicity of 1 is 2.</li> <li>\\(m_A(2) = 1\\), \\(m_B(2) = 2 \\implies \\max(1, 2) = 2\\). Multiplicity of 2 is 2.</li> <li>\\(m_A(3) = 1\\), \\(m_B(3) = 0 \\implies \\max(1, 0) = 1\\). Multiplicity of 3 is 1.</li> <li>\\(m_A(4) = 0\\), \\(m_B(4) = 1 \\implies \\max(0, 1) = 1\\). Multiplicity of 4 is 1.</li> </ul> <p>Therefore, \\(A \\cup B = \\{1, 1, 2, 2, 3, 4\\}\\).</p>"},{"location":"sem1/math/u1/sets/#intersection","title":"Intersection","text":"<p>The intersection of two multisets \\(A\\) and \\(B\\), denoted \\(A \\cap B\\), is a multiset where the multiplicity of an element is the minimum of its multiplicities in \\(A\\) and \\(B\\). [ m_{A \\cap B}(x) = \\min(m_A(x), m_B(x)) ] Example: Let \\(A = \\{1, 1, 2, 3\\}\\) and \\(B = \\{1, 2, 2, 4\\}\\).</p> <ul> <li>\\(m_A(1) = 2\\), \\(m_B(1) = 1 \\implies \\min(2, 1) = 1\\). Multiplicity of 1 is 1.</li> <li>\\(m_A(2) = 1\\), \\(m_B(2) = 2 \\implies \\min(1, 2) = 1\\). Multiplicity of 2 is 1.</li> <li>\\(m_A(3) = 1\\), \\(m_B(3) = 0 \\implies \\min(1, 0) = 0\\). Multiplicity of 3 is 0.</li> <li>\\(m_A(4) = 0\\), \\(m_B(4) = 1 \\implies \\min(0, 1) = 0\\). Multiplicity of 4 is 0.</li> </ul> <p>Therefore, \\(A \\cap B = \\{1, 2\\}\\).</p>"},{"location":"sem1/math/u1/sets/#sum","title":"Sum","text":"<p>The sum of two multisets \\(A\\) and \\(B\\), denoted \\(A + B\\) or \\(A \\uplus B\\), is a multiset where the multiplicity of an element is the sum of its multiplicities in \\(A\\) and \\(B\\). This operation is also known as the disjoint union. [ m_{A+B}(x) = m_A(x) + m_B(x) ] Example: Let \\(A = \\{a, b, b\\}\\) and \\(B = \\{b, c\\}\\).</p> <ul> <li>\\(m_A(a) = 1\\), \\(m_B(a) = 0 \\implies 1 + 0 = 1\\). Multiplicity of \\(a\\) is 1.</li> <li>\\(m_A(b) = 2\\), \\(m_B(b) = 1 \\implies 2 + 1 = 3\\). Multiplicity of \\(b\\) is 3.</li> <li>\\(m_A(c) = 0\\), \\(m_B(c) = 1 \\implies 0 + 1 = 1\\). Multiplicity of \\(c\\) is 1.</li> </ul> <p>Therefore, \\(A + B = \\{a, b, b, b, c\\}\\).</p>"},{"location":"sem1/math/u1/sets/#difference","title":"Difference","text":"<p>The difference of two multisets \\(A\\) and \\(B\\), denoted \\(A - B\\), is a multiset where the multiplicity of an element \\(x\\) in \\(A - B\\) is the multiplicity of \\(x\\) in \\(A\\) minus its multiplicity in \\(B\\), if the result is positive. Otherwise, the multiplicity is 0. [ m_{A-B}(x) = \\max(0, m_A(x) - m_B(x)) ] Example: Let \\(A = \\{1, 1, 1, 2, 3, 3\\}\\) and \\(B = \\{1, 1, 3, 4\\}\\).</p> <ul> <li>For element 1: \\(m_A(1) - m_B(1) = 3 - 2 = 1\\).</li> <li>For element 2: \\(m_A(2) - m_B(2) = 1 - 0 = 1\\).</li> <li>For element 3: \\(m_A(3) - m_B(3) = 2 - 1 = 1\\).</li> <li>For element 4: \\(m_A(4) - m_B(4) = 0 - 1 = -1\\). Since this is negative, the multiplicity is \\(\\max(0, -1) = 0\\).</li> </ul> <p>Therefore, \\(A - B = \\{1, 2, 3\\}\\).</p>"},{"location":"sem1/math/u1/sets/#applications-of-multisets","title":"Applications of Multisets","text":"<p>Multisets are useful in various fields of mathematics and computer science.</p> <ul> <li>Prime Factorization: The prime factorization of an integer is a multiset of prime numbers. For example, the factorization of 120 is \\(2^3 \\cdot 3^1 \\cdot 5^1\\), which corresponds to the multiset \\(\\{2, 2, 2, 3, 5\\}\\).</li> <li>Combinatorics: Multisets are used in counting problems, particularly for calculating permutations and combinations where repetitions are allowed. The number of permutations of a multiset of size \\(n\\) is given by the multinomial coefficient.</li> <li>Computer Science:<ul> <li>In database systems, query results can often be multisets (bags) rather than sets, as duplicate rows might be returned.</li> <li>In data structures, a \"bag\" is an abstract data type that implements the multiset concept.</li> <li>Frequency analysis in text processing or data mining relies on counting occurrences, which is a multiset concept.</li> </ul> </li> </ul>"},{"location":"sem1/math/u1/sets/#problem-set","title":"Problem Set","text":"<p>This problem set covers fundamental concepts of set theory, including operations, the Principle of Inclusion and Exclusion, and multisets, designed for Bachelor of Computer Applications (BCA) students.</p>"},{"location":"sem1/math/u1/sets/#basics-of-sets","title":"Basics of Sets","text":"<ol> <li>Represent the set \\(A = \\{x | x \\text{ is an integer and } -3 &lt; x \\le 4\\}\\) in Roster form.</li> <li>Represent the set \\(B = \\{1, 4, 9, 16, 25, \\dots\\}\\) in Set-builder notation.</li> <li>Which of the following are well-defined sets? Justify your answer.<ul> <li>The collection of all intelligent students in a class.</li> <li>The collection of all prime numbers less than 100.</li> <li>The collection of all beautiful flowers in a garden.</li> </ul> </li> <li>If \\(S\\) is the set of letters in the word \"DISCRETE\", write \\(S\\) in Roster form. What is the cardinality of \\(S\\)?</li> <li>Let \\(\\mathbb{N}\\) be the set of natural numbers. Describe the set \\(C = \\{x \\in \\mathbb{N} | x = 2k \\text{ for some } k \\in \\mathbb{N}\\}\\) in words.</li> <li>Find the cardinality of the set \\(A = \\{x \\in \\mathbb{Z} | x^2 - 9 = 0\\}\\).</li> <li>If a set \\(A\\) has 5 elements, what is the cardinality of its power set, \\(|P(A)|\\)?</li> <li>Let \\(A\\) be the set of all functions from \\(\\{1, 2\\}\\) to \\(\\{a, b\\}\\). List all the elements of \\(A\\).</li> <li>Classify the following sets as finite, countably infinite, or uncountably infinite:<ul> <li>The set of all atoms in the universe.</li> <li>The set of all rational numbers \\(\\mathbb{Q}\\).</li> <li>The set of all real numbers \\(\\mathbb{R}\\) between 0 and 1.</li> <li>The set of all lines in a plane.</li> </ul> </li> <li>Prove that the set of all integers, \\(\\mathbb{Z}\\), is countably infinite by defining a bijective function \\(f: \\mathbb{N} \\to \\mathbb{Z}\\).</li> <li>Explain why the set of all bit strings (strings of 0s and 1s) is countably infinite.</li> <li>Give an informal argument (e.g., Cantor's diagonalization) to explain why the power set of natural numbers, \\(P(\\mathbb{N})\\), is uncountable.</li> <li>Is the set of all computer programs that can be written in Python finite, countably infinite, or uncountably infinite? Justify your reasoning.</li> <li>Let \\(A_i = \\{i, i+1, i+2, \\dots\\}\\) for \\(i \\in \\mathbb{N}\\). What is \\(\\bigcap_{i=1}^{\\infty} A_i\\)?</li> <li>What is the cardinality of the Cartesian product of the set of vowels and the set of consonants in the English alphabet?</li> </ol>"},{"location":"sem1/math/u1/sets/#operations-on-sets-and-venn-diagrams_1","title":"Operations on Sets and Venn Diagrams","text":"<ol> <li>Let \\(U = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\}\\), \\(A = \\{1, 2, 3, 4, 5\\}\\), \\(B = \\{4, 5, 6, 7\\}\\), and \\(C = \\{5, 6, 8, 9\\}\\). Find:<ul> <li>\\(A \\cup B\\)</li> <li>\\(A \\cap C\\)</li> <li>\\(B - C\\)</li> <li>\\(A^c\\)</li> <li>\\(A \\Delta B\\)</li> </ul> </li> <li>Draw a Venn diagram for three sets A, B, and C, and shade the region corresponding to \\((A \\cup B) \\cap C\\).</li> <li>Draw a Venn diagram to represent \\(A - (B \\cup C)\\).</li> <li>If \\(|A| = 15\\), \\(|B| = 20\\), and \\(|A \\cup B| = 30\\), find \\(|A \\cap B|\\).</li> <li>If \\(A \\subseteq B\\), what are \\(A \\cup B\\), \\(A \\cap B\\), and \\(A - B\\)?</li> <li>Prove the distributive law \\(A \\cap (B \\cup C) = (A \\cap B) \\cup (A \\cap C)\\) using a membership table.</li> <li>Prove De Morgan's Law, \\((A \\cap B)^c = A^c \\cup B^c\\), using set builder notation and logical equivalences.</li> <li>Using the laws of set algebra, simplify the expression: \\((A \\cup B) \\cap (A \\cup B^c)\\).</li> <li>Prove that for any sets A and B, \\(A - B = A \\cap B^c\\).</li> <li>Prove the Absorption Law, \\(A \\cup (A \\cap B) = A\\), using set algebra laws.</li> <li>If \\(A \\Delta C = B \\Delta C\\), prove that \\(A=B\\). (Hint: Use the property \\(X \\Delta X = \\emptyset\\)).</li> <li>For any two sets \\(A\\) and \\(B\\), show that \\(P(A) \\cup P(B) \\subseteq P(A \\cup B)\\). Is the reverse inclusion, \\(P(A \\cup B) \\subseteq P(A) \\cup P(B)\\), always true? Provide a counterexample if not.</li> <li>Let \\(A, B, C\\) be sets. Prove that \\((A - B) - C = A - (B \\cup C)\\).</li> <li>Describe the symmetric difference \\(A \\Delta B\\) in terms of union, intersection, and complement. Shade the corresponding region in a Venn diagram.</li> <li>Let \\(A = \\{ \\emptyset, \\{\\emptyset\\} \\}\\). Find the power set \\(P(A)\\).</li> <li>Simplify the set expression \\([(A' \\cup B')' \\cup (A' \\cup B)']'\\).</li> <li>What can you say about sets A and B if \\(A - B = A\\)?</li> <li>What can you say about sets A and B if \\(A - B = B - A\\)?</li> <li>Prove or disprove: If \\(A \\cup C = B \\cup C\\), then \\(A = B\\).</li> <li>Prove using set algebra that \\((A \\cap B) \\cup (A - B) = A\\).</li> </ol>"},{"location":"sem1/math/u1/sets/#principle-of-inclusion-and-exclusion-pie","title":"Principle of Inclusion and Exclusion (PIE)","text":"<ol> <li>In a survey of 200 students, 120 study Chemistry, 100 study Physics, and 30 study neither. How many students study both Chemistry and Physics?</li> <li>Find the number of integers between 1 and 500 (inclusive) that are divisible by 3 or 5.</li> <li>A survey of 100 coffee drinkers found that 70 take sugar, 60 take cream, and 50 take both. How many take either sugar or cream? How many take neither?</li> <li>In a group of students, 150 are enrolled in Mathematics, 100 in Physics, and 80 in Chemistry. Also, 60 are in Mathematics and Physics, 50 in Physics and Chemistry, and 70 in Mathematics and Chemistry. 30 students are enrolled in all three courses. Find the total number of students in the group, assuming every student is in at least one course.</li> <li>Use the Principle of Inclusion and Exclusion to find the number of positive integers less than or equal to 100 that are not divisible by 2, 3, or 5.</li> <li>State the general formula for the Principle of Inclusion and Exclusion for four sets: \\(|A \\cup B \\cup C \\cup D|\\).</li> <li>How many permutations of the set \\(\\{1, 2, 3, 4\\}\\) leave no element in its original position? (i.e., find the number of derangements \\(D_4\\)).</li> <li>A manager has 6 tasks to assign to 6 employees. In how many ways can the tasks be assigned so that no employee gets the task they are supposed to get (as per their job description)? Calculate \\(D_6\\).</li> <li>State the formula for the number of surjective (onto) functions from a set \\(A\\) with \\(m\\) elements to a set \\(B\\) with \\(n\\) elements.</li> <li>Find the number of onto functions from a set with 6 elements to a set with 3 elements.</li> <li>How many ways are there to distribute 5 distinct balls into 3 distinct bins such that no bin is left empty?</li> <li>How many bit strings of length 8 do not contain the substring \"11\"? (This is a more advanced application, can be solved with PIE or recurrence relations).</li> <li>Find the number of integers between 1 and 1000 that are divisible by 7 but not by 11.</li> <li>How many integers from 1 to 300 are divisible by at least one of 2, 3, 5?</li> <li>How many solutions does the equation \\(x_1 + x_2 + x_3 = 11\\) have, where \\(x_1, x_2, x_3\\) are non-negative integers such that \\(x_1 \\le 3\\), \\(x_2 \\le 4\\), and \\(x_3 \\le 6\\)? (Hint: Use PIE with upper bounds).</li> </ol>"},{"location":"sem1/math/u1/sets/#multisets_1","title":"Multisets","text":"<ol> <li>Define a multiset formally using a multiplicity function. Provide an example of a multiset with cardinality 8 and 4 distinct elements.</li> <li>Let \\(M = \\{a, b, b, c, c, c, d, d\\}\\).<ul> <li>What is the cardinality of M?</li> <li>List all submultisets of M with cardinality 3.</li> </ul> </li> <li>Let \\(A = \\{1, 1, 2, 3, 5\\}\\) and \\(B = \\{1, 2, 2, 4, 5\\}\\) be two multisets. Find:<ul> <li>\\(A \\cup B\\) (Union)</li> <li>\\(A \\cap B\\) (Intersection)</li> <li>\\(A + B\\) (Sum)</li> <li>\\(A - B\\) (Difference)</li> </ul> </li> <li>Explain the key difference between the union (\\(\\cup\\)) and sum (\\(+\\)) operations on multisets. If \\(A = \\{a, b\\}\\) and \\(B = \\{a, c\\}\\), calculate \\(A \\cup B\\) and \\(A + B\\).</li> <li>Let \\(M_1\\) and \\(M_2\\) be multisets drawn from a universal set \\(U\\). If \\(k_1(x)\\) and \\(k_2(x)\\) are the multiplicities of an element \\(x\\) in \\(M_1\\) and \\(M_2\\) respectively, define the multiplicity of \\(x\\) in \\(M_1 \\cup M_2\\) and \\(M_1 \\cap M_2\\).</li> <li>Find the number of 5-element multisets that can be formed from the set \\(\\{a, b, c, d\\}\\). (This is equivalent to combinations with repetition).</li> <li>In how many ways can a bakery sell a dozen (12) donuts if they offer 5 different varieties?</li> <li>Find the number of non-negative integer solutions to the equation \\(x_1 + x_2 + x_3 + x_4 = 20\\). Explain the connection between this problem and multisets.</li> <li>Find the number of integer solutions to \\(y_1 + y_2 + y_3 = 10\\) where \\(y_i \\ge 1\\) for all \\(i\\). (Hint: Make a substitution).</li> <li>Let \\(A\\) be a multiset with \\(k\\) distinct elements and infinite copies of each. How many submultisets of size \\(r\\) does \\(A\\) have? Give the formula.</li> </ol>"},{"location":"sem1/math/u2/first/","title":"Types of Matrices","text":"<p>A matrix (plural: matrices) is a rectangular array or table of numbers, symbols, or expressions, arranged in rows and columns. It's a fundamental concept in linear algebra. An \\(m \\times n\\) matrix has \\(m\\) rows and \\(n\\) columns.</p>"},{"location":"sem1/math/u2/first/#based-on-dimensions","title":"Based on Dimensions","text":""},{"location":"sem1/math/u2/first/#row-matrix","title":"Row Matrix","text":"<p>A matrix that has only one row is called a row matrix. Its order is \\(1 \\times n\\), where \\(n\\) is the number of columns.</p> <ul> <li>Example: The matrix \\(A = \\begin{bmatrix} 5 &amp; -1 &amp; 0 &amp; 9 \\end{bmatrix}\\) is a \\(1 \\times 4\\) row matrix.</li> </ul>"},{"location":"sem1/math/u2/first/#column-matrix","title":"Column Matrix","text":"<p>A matrix that has only one column is called a column matrix. Its order is \\(m \\times 1\\), where \\(m\\) is the number of rows.</p> <ul> <li>Example: The matrix \\(B = \\begin{bmatrix} 7 \\\\ -2 \\\\ 4 \\end{bmatrix}\\) is a \\(3 \\times 1\\) column matrix.</li> </ul>"},{"location":"sem1/math/u2/first/#square-matrix","title":"Square Matrix","text":"<p>A matrix in which the number of rows is equal to the number of columns (\\(m=n\\)) is called a square matrix of order \\(n\\).</p> <ul> <li>Example: \\(C = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}\\) is a square matrix of order 3.</li> </ul> <p>Principal Diagonal</p> <p>In a square matrix, the elements \\(a_{11}, a_{22}, a_{33}, ..., a_{nn}\\) form the main diagonal or principal diagonal of the matrix. For matrix \\(C\\) above, the principal diagonal consists of the elements 1, 5, and 9.</p> <p>[insert image on main diagonal of a square matrix here]</p>"},{"location":"sem1/math/u2/first/#rectangular-matrix","title":"Rectangular Matrix","text":"<p>A matrix where the number of rows is not equal to the number of columns (\\(m \\neq n\\)) is a rectangular matrix. Row and column matrices are special cases of rectangular matrices.</p>"},{"location":"sem1/math/u2/first/#based-on-element-values","title":"Based on Element Values","text":""},{"location":"sem1/math/u2/first/#null-or-zero-matrix","title":"Null or Zero Matrix","text":"<p>A matrix in which all the elements are zero is called a null or zero matrix. It is denoted by \\(O\\). A zero matrix can be of any order, square or rectangular.</p> <ul> <li>Example: \\(O_{2 \\times 3} = \\begin{bmatrix} 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}\\) is a \\(2 \\times 3\\) zero matrix.</li> </ul> <p>Note</p> <p>The zero matrix is the additive identity for matrix addition, meaning \\(A + O = A\\).</p>"},{"location":"sem1/math/u2/first/#diagonal-matrix","title":"Diagonal Matrix","text":"<p>A square matrix where all the non-diagonal elements are zero is called a diagonal matrix. The diagonal elements themselves can be zero or non-zero. A square matrix \\(A = [a_{ij}]\\) is a diagonal matrix if \\(a_{ij} = 0\\) whenever \\(i \\neq j\\).</p> <ul> <li> <p>Example:</p> \\[ D = \\begin{bmatrix} -3 &amp; 0 &amp; 0 \\\\ 0 &amp; 8 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/u2/first/#scalar-matrix","title":"Scalar Matrix","text":"<p>A diagonal matrix in which all the principal diagonal elements are equal is called a scalar matrix. A square matrix \\(A = [a_{ij}]\\) is a scalar matrix if \\(a_{ij} = 0\\) whenever \\(i \\neq j\\) and \\(a_{ij} = k\\) (a constant) whenever \\(i=j\\).</p> <ul> <li> <p>Example:</p> \\[ S = \\begin{bmatrix} 5 &amp; 0 &amp; 0 \\\\ 0 &amp; 5 &amp; 0 \\\\ 0 &amp; 0 &amp; 5 \\end{bmatrix} \\] <p>Here, \\(S\\) is a scalar matrix with \\(k=5\\). This can also be written as \\(5I\\), where \\(I\\) is the identity matrix.</p> </li> </ul>"},{"location":"sem1/math/u2/first/#identity-matrix-or-unit-matrix","title":"Identity Matrix (or Unit Matrix)","text":"<p>A scalar matrix where all the principal diagonal elements are 1 is called an identity matrix or unit matrix. It is denoted by \\(I_n\\) or simply \\(I\\), where \\(n\\) is the order of the matrix.</p> <p>A square matrix \\(A = [a_{ij}]\\) is an identity matrix if \\(a_{ij} = 1\\) whenever \\(i = j\\) and \\(a_{ij} = 0\\) whenever \\(i \\neq j\\).</p> <ul> <li> <p>Example of a \\(3 \\times 3\\) Identity Matrix:</p> \\[ I_3 = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] </li> </ul> <p>Multiplicative Identity</p> <p>The identity matrix \\(I\\) is the multiplicative identity for matrices, meaning for any compatible matrix \\(A\\), the product \\(A \\cdot I = I \\cdot A = A\\).</p>"},{"location":"sem1/math/u2/first/#special-types-of-square-matrices","title":"Special Types of Square Matrices","text":""},{"location":"sem1/math/u2/first/#triangular-matrix","title":"Triangular Matrix","text":"<p>A square matrix is called triangular if all its elements above or below the main diagonal are zero. There are two types:</p> <ul> <li> <p>Upper Triangular Matrix: A square matrix where all elements below the main diagonal are zero. That is, \\(a_{ij} = 0\\) for all \\(i &gt; j\\).</p> <ul> <li> <p>Example:</p> \\[ U = \\begin{bmatrix} 1 &amp; 9 &amp; -2 \\\\ 0 &amp; 5 &amp; 3 \\\\ 0 &amp; 0 &amp; 4 \\end{bmatrix} \\] </li> </ul> </li> <li> <p>Lower Triangular Matrix: A square matrix where all elements above the main diagonal are zero. That is, \\(a_{ij} = 0\\) for all \\(i &lt; j\\).</p> <ul> <li> <p>Example:</p> \\[ L = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ -4 &amp; 8 &amp; 0 \\\\ 7 &amp; 0 &amp; 2 \\end{bmatrix} \\] </li> </ul> </li> </ul> <p>[insert image on upper and lower triangular matrices here]</p>"},{"location":"sem1/math/u2/first/#symmetric-matrix","title":"Symmetric Matrix","text":"<p>A square matrix \\(A\\) is called symmetric if it is equal to its transpose (\\(A = A^T\\)). This means \\(a_{ij} = a_{ji}\\) for all values of \\(i\\) and \\(j\\). The elements are mirrored across the main diagonal.</p> <ul> <li> <p>Example:</p> \\[ A = \\begin{bmatrix} 1 &amp; \\mathbf{7} &amp; \\mathbf{-3} \\\\ \\mathbf{7} &amp; 4 &amp; \\mathbf{5} \\\\ \\mathbf{-3} &amp; \\mathbf{5} &amp; 6 \\end{bmatrix} \\quad \\text{and} \\quad A^T = \\begin{bmatrix} 1 &amp; \\mathbf{7} &amp; \\mathbf{-3} \\\\ \\mathbf{7} &amp; 4 &amp; \\mathbf{5} \\\\ \\mathbf{-3} &amp; \\mathbf{5} &amp; 6 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/u2/first/#skew-symmetric-matrix","title":"Skew-Symmetric Matrix","text":"<p>A square matrix \\(A\\) is called skew-symmetric if it is equal to the negative of its transpose (\\(A = -A^T\\)). This requires two conditions:</p> <ol> <li>\\(a_{ij} = -a_{ji}\\) for all \\(i \\neq j\\).</li> <li> <p>All principal diagonal elements must be zero (\\(a_{ii} = 0\\)).</p> </li> <li> <p>Example:</p> \\[ B = \\begin{bmatrix} 0 &amp; 1 &amp; -2 \\\\ -1 &amp; 0 &amp; 3 \\\\ 2 &amp; -3 &amp; 0 \\end{bmatrix} \\quad \\text{and} \\quad -B^T = -\\begin{bmatrix} 0 &amp; -1 &amp; 2 \\\\ 1 &amp; 0 &amp; -3 \\\\ -2 &amp; 3 &amp; 0 \\end{bmatrix} = \\begin{bmatrix} 0 &amp; 1 &amp; -2 \\\\ -1 &amp; 0 &amp; 3 \\\\ 2 &amp; -3 &amp; 0 \\end{bmatrix} \\] </li> </ol>"},{"location":"sem1/math/u2/first/#problem-set","title":"Problem Set","text":""},{"location":"sem1/math/u2/first/#1-based-on-dimensions","title":"(1) Based on Dimensions","text":"<ol> <li>Identify the type of matrix \\( A = \\begin{bmatrix} 5 &amp; -2 &amp; 1 \\end{bmatrix} \\) based on its dimensions.</li> <li>What is the order of a column matrix containing \\( n \\) elements?</li> <li>Construct a \\( 3 \\times 2 \\) rectangular matrix \\( A \\) where its elements are given by \\( a_{ij} = 2i - j \\).</li> <li>Is the matrix \\( B = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix} \\) a square matrix? Justify your answer.</li> <li>If a matrix has 13 elements, can it be a square matrix? Explain.</li> <li>Give an example of a matrix which is both a row matrix and a column matrix.</li> </ol>"},{"location":"sem1/math/u2/first/#2-based-on-element-values","title":"(2) Based on Element Values","text":"<ol> <li>Define a Null Matrix. Give an example of a \\( 2 \\times 2 \\) null matrix.</li> <li>Identify if the matrix \\( A = \\begin{bmatrix} 7 &amp; 0 &amp; 0 \\\\ 0 &amp; 7 &amp; 0 \\\\ 0 &amp; 0 &amp; 7 \\end{bmatrix} \\) is a diagonal, scalar, or identity matrix. Explain your reasoning.</li> <li>What is the fundamental difference between a diagonal matrix and a scalar matrix?</li> <li>If \\( I \\) is an identity matrix of order 3, what are the values of \\( I_{11}, I_{23}, \\) and \\( I_{32} \\)?</li> <li>Find the values of \\( x \\) and \\( y \\) if the matrix \\( \\begin{bmatrix} x-2 &amp; 0 \\\\ 0 &amp; y+5 \\end{bmatrix} \\) is an identity matrix.</li> <li>Is every scalar matrix a diagonal matrix? Is the converse true?</li> <li>Construct a \\( 3 \\times 3 \\) diagonal matrix \\( D \\) such that \\( D_{11}=5, D_{22}=-1, D_{33}=0 \\).</li> <li>If \\( A = \\begin{bmatrix} k^2-1 &amp; 0 \\\\ 0 &amp; k^2-1 \\end{bmatrix} \\) is a null matrix, find all possible values of \\( k \\).</li> </ol>"},{"location":"sem1/math/u2/first/#3-special-types-of-square-matrices","title":"(3) Special Types of Square Matrices","text":"<ol> <li>Define a Lower Triangular Matrix. Construct a \\( 3 \\times 3 \\) lower triangular matrix \\( L \\) where \\( L_{ij} = i+j \\).</li> <li>Identify the matrix \\( B = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 8 &amp; 5 \\\\ 0 &amp; 0 &amp; 4 \\end{bmatrix} \\). For this matrix to be triangular, what is the condition on its elements \\( b_{ij} \\)?</li> <li>Can a non-square matrix be a triangular matrix? Explain.</li> <li>Construct a \\( 3 \\times 3 \\) upper triangular matrix \\( U \\) where \\( U_{ij} = i \\cdot j \\).</li> <li>What type of matrix is both an upper triangular and a lower triangular matrix? Give an example.</li> </ol>"},{"location":"sem1/math/u2/first/#4-symmetric-skew-symmetric-matrices","title":"(4) Symmetric &amp; Skew-Symmetric Matrices","text":"<ol> <li>What is the necessary condition for a square matrix \\( A \\) to be symmetric? Express this using its transpose, \\( A^T \\).</li> <li>What is the property of the diagonal elements of a skew-symmetric matrix? Prove it.</li> <li>Find the values of \\( a, b, \\) and \\( c \\) if the matrix \\( A = \\begin{bmatrix} 2 &amp; a &amp; 3 \\\\ 5 &amp; -1 &amp; c \\\\ b &amp; 1 &amp; 7 \\end{bmatrix} \\) is symmetric.</li> <li>Find the transpose of \\( F = \\begin{bmatrix} 0 &amp; 5 &amp; -2 \\\\ -5 &amp; 0 &amp; 1 \\\\ 2 &amp; -1 &amp; 0 \\end{bmatrix} \\). Hence, show that \\( F \\) is a skew-symmetric matrix.</li> <li>If \\( A \\) is a square matrix, prove that the matrix \\( B = A + A^T \\) is always a symmetric matrix.</li> <li>If \\( A \\) is a square matrix, prove that the matrix \\( C = A - A^T \\) is always a skew-symmetric matrix.</li> <li>If \\( A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\), find \\( \\frac{1}{2}(A + A^T) \\).</li> <li>If \\( B = \\begin{bmatrix} 3 &amp; -1 \\\\ 5 &amp; 2 \\end{bmatrix} \\), find \\( \\frac{1}{2}(B - B^T) \\).</li> <li>Express the matrix \\( A = \\begin{bmatrix} 6 &amp; 1 \\\\ -2 &amp; 3 \\end{bmatrix} \\) as the sum of a symmetric and a skew-symmetric matrix.</li> <li>Given \\( A = \\begin{bmatrix} \\cos\\alpha &amp; -\\sin\\alpha \\\\ \\sin\\alpha &amp; \\cos\\alpha \\end{bmatrix} \\), show that \\( A^T A = I \\).</li> <li>Prove that any square matrix can be uniquely expressed as the sum of a symmetric and a skew-symmetric matrix.</li> </ol>"},{"location":"sem1/math/u2/four/","title":"Applications and Properties of Matrices","text":"<p>This section covers how matrices are used to represent discrete structures like relations and explores fundamental properties related to the transpose, symmetry, and invertibility of matrices.</p>"},{"location":"sem1/math/u2/four/#representing-relations-using-matrices","title":"Representing Relations using Matrices","text":"<p>A binary relation \\(R\\) from a finite set \\(A\\) to a finite set \\(B\\) can be represented by a relation matrix (or adjacency matrix).</p> <p>Let \\(A = \\{a_1, a_2, ..., a_m\\}\\) and \\(B = \\{b_1, b_2, ..., b_n\\}\\). The relation matrix \\(M_R\\) is an \\(m \\times n\\) matrix where the entry \\(m_{ij}\\) in the \\(i\\)-th row and \\(j\\)-th column is defined as:</p> \\[ m_{ij} = \\begin{cases} 1 &amp; \\text{if } (a_i, b_j) \\in R \\\\ 0 &amp; \\text{if } (a_i, b_j) \\notin R \\end{cases} \\] <p>Essentially, a 1 indicates that the relation exists between the elements, and a 0 indicates it does not.</p> <ul> <li> <p>Example:</p> <p>Let \\(A = \\{1, 2, 3\\}\\) and \\(B = \\{x, y\\}\\).</p> <p>Let the relation be \\(R = \\{(1, y), (2, x), (2, y), (3, x)\\}\\).</p> <p>The relation matrix \\(M_R\\) will be a \\(3 \\times 2\\) matrix.</p> <ul> <li>Row 1 corresponds to element '1' from set A.</li> <li>Row 2 corresponds to element '2' from set A.</li> <li>Row 3 corresponds to element '3' from set A.</li> <li>Column 1 corresponds to element 'x' from set B.</li> <li>Column 2 corresponds to element 'y' from set B.</li> </ul> \\[ M_R = \\begin{array}{c|cc} &amp; \\mathbf{x} &amp; \\mathbf{y} \\\\ \\hline \\mathbf{1} &amp; 0 &amp; 1 \\\\ \\mathbf{2} &amp; 1 &amp; 1 \\\\ \\mathbf{3} &amp; 1 &amp; 0 \\end{array} = \\begin{bmatrix} 0 &amp; 1 \\\\ 1 &amp; 1 \\\\ 1 &amp; 0 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/u2/four/#transpose-of-a-matrix","title":"Transpose of a Matrix","text":"<p>The transpose of a matrix \\(A\\), denoted as \\(A^T\\) or \\(A'\\), is the matrix obtained by interchanging its rows and columns. If \\(A\\) is an \\(m \\times n\\) matrix, then \\(A^T\\) will be an \\(n \\times m\\) matrix.</p> <p>If \\(A = [a_{ij}]\\), then \\(A^T = [a_{ji}]\\).</p> <ul> <li> <p>Example:</p> <p>If \\(A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix}\\), then its transpose is \\(A^T = \\begin{bmatrix} 1 &amp; 4 \\\\ 2 &amp; 5 \\\\ 3 &amp; 6 \\end{bmatrix}\\).</p> </li> </ul>"},{"location":"sem1/math/u2/four/#properties-of-transpose","title":"Properties of Transpose","text":"<ul> <li>Double Transpose: \\((A^T)^T = A\\)</li> <li>Addition: \\((A+B)^T = A^T + B^T\\)</li> <li>Scalar Multiplication: \\((kA)^T = kA^T\\), where \\(k\\) is a scalar.</li> <li>Reversal Law for Multiplication: \\((AB)^T = B^T A^T\\)</li> </ul>"},{"location":"sem1/math/u2/four/#symmetric-and-skew-symmetric-matrices","title":"Symmetric and Skew-Symmetric Matrices","text":"<p>These are special types of square matrices defined by their relationship with their transpose.</p> <ul> <li>Symmetric Matrix: A square matrix \\(A\\) is symmetric if \\(A = A^T\\). This means \\(a_{ij} = a_{ji}\\) for all \\(i\\) and \\(j\\).</li> <li>Skew-Symmetric Matrix: A square matrix \\(A\\) is skew-symmetric if \\(A = -A^T\\). This implies \\(a_{ij} = -a_{ji}\\), and all main diagonal elements must be zero (\\(a_{ii} = 0\\)).</li> </ul>"},{"location":"sem1/math/u2/four/#key-property","title":"Key Property","text":"<p>Any square matrix \\(A\\) can be uniquely expressed as the sum of a symmetric matrix (\\(P\\)) and a skew-symmetric matrix (\\(Q\\)).</p> <ul> <li>Where \\(A = P + Q\\), the components are calculated as:<ul> <li>Symmetric part: \\(P = \\frac{1}{2}(A + A^T)\\)</li> <li>Skew-symmetric part: \\(Q = \\frac{1}{2}(A - A^T)\\)</li> </ul> </li> </ul>"},{"location":"sem1/math/u2/four/#elementary-transformations-of-a-matrix","title":"Elementary Transformations of a Matrix","text":"<p>These are fundamental operations used to simplify or transform a matrix into a desired form (like row-echelon form) without changing its core properties. They are the basis for methods like Gaussian elimination and finding a matrix inverse.</p> <p>There are three types of elementary transformations, which can be applied to rows or columns:</p> <ol> <li>Interchange: Swapping any two rows (or columns). Notation: \\(R_i \\leftrightarrow R_j\\).</li> <li>Scaling: Multiplying all elements of a row (or column) by a non-zero constant. Notation: \\(R_i \\to kR_i\\).</li> <li>Combination: Adding a non-zero multiple of one row (or column) to another row (or column). Notation: \\(R_i \\to R_i + kR_j\\).</li> </ol>"},{"location":"sem1/math/u2/four/#invertible-matrices","title":"Invertible Matrices","text":"<p>A square matrix \\(A\\) is invertible (or non-singular) if there exists another square matrix \\(A^{-1}\\) of the same order, called its inverse, such that:</p> \\[ A \\cdot A^{-1} = A^{-1} \\cdot A = I \\] <p>where \\(I\\) is the identity matrix.</p> <p>Condition for Invertibility</p> <p>A square matrix \\(A\\) has an inverse if and only if its determinant is non-zero (\\(\\det(A) \\neq 0\\)). If \\(\\det(A) = 0\\), the matrix is called singular or non-invertible.</p>"},{"location":"sem1/math/u2/four/#properties-of-invertible-matrices","title":"Properties of Invertible Matrices","text":"<ul> <li>Uniqueness: If a matrix is invertible, its inverse is unique.</li> <li>Inverse of Inverse: \\((A^{-1})^{-1} = A\\)</li> <li>Reversal Law for Inverses: \\((AB)^{-1} = B^{-1}A^{-1}\\)</li> <li>Inverse of Transpose: \\((A^T)^{-1} = (A^{-1})^T\\)</li> </ul>"},{"location":"sem1/math/u2/four/#finding-the-inverse-using-elementary-operations","title":"Finding the Inverse using Elementary Operations","text":"<p>One common method is the Gauss-Jordan method:</p> <ol> <li>Create an augmented matrix by placing the identity matrix \\(I\\) to the right of matrix \\(A\\): \\([A | I]\\).</li> <li>Apply a sequence of elementary row operations to this augmented matrix.</li> <li>The goal is to transform the left side (\\(A\\)) into the identity matrix (\\(I\\)).</li> <li>If successful, the right side will be transformed into the inverse matrix \\(A^{-1}\\). The final form will be \\([I | A^{-1}]\\).</li> </ol>"},{"location":"sem1/math/u2/second/","title":"Matrix Operations","text":"<p>Matrix operations are the algebraic procedures performed on matrices. These include addition, subtraction, scalar multiplication, and matrix multiplication.</p>"},{"location":"sem1/math/u2/second/#addition-and-subtraction-of-matrices","title":"Addition and Subtraction of Matrices","text":"<p>Two matrices can be added or subtracted only if they have the same order (i.e., the same number of rows and the same number of columns). The operation is performed by adding or subtracting the corresponding elements.</p> <p>If \\(A = [a_{ij}]\\) and \\(B = [b_{ij}]\\) are two matrices of order \\(m \\times n\\), then their sum \\(A+B\\) is a matrix \\(C = [c_{ij}]\\) of the same order, where \\(c_{ij} = a_{ij} + b_{ij}\\) for all \\(i\\) and \\(j\\).</p> <ul> <li> <p>Example:     Let \\(A = \\begin{bmatrix} 8 &amp; 3 \\\\ 4 &amp; 5 \\end{bmatrix}\\) and \\(B = \\begin{bmatrix} 1 &amp; -2 \\\\ -4 &amp; 6 \\end{bmatrix}\\).</p> <ul> <li> <p>Addition:</p> \\[ A+B = \\begin{bmatrix} 8+1 &amp; 3+(-2) \\\\ 4+(-4) &amp; 5+6 \\end{bmatrix} = \\begin{bmatrix} 9 &amp; 1 \\\\ 0 &amp; 11 \\end{bmatrix} \\] </li> <li> <p>Subtraction:</p> \\[ A-B = \\begin{bmatrix} 8-1 &amp; 3-(-2) \\\\ 4-(-4) &amp; 5-6 \\end{bmatrix} = \\begin{bmatrix} 7 &amp; 5 \\\\ 8 &amp; -1 \\end{bmatrix} \\] </li> </ul> </li> </ul>"},{"location":"sem1/math/u2/second/#properties-of-matrix-addition","title":"Properties of Matrix Addition","text":"<ul> <li>Commutative Law: \\(A + B = B + A\\)</li> <li>Associative Law: \\((A + B) + C = A + (B + C)\\)</li> <li>Existence of Additive Identity: The zero matrix \\(O\\) is the additive identity. \\(A + O = O + A = A\\).</li> <li>Existence of Additive Inverse: For any matrix \\(A\\), there is a matrix \\(-A\\) such that \\(A + (-A) = (-A) + A = O\\).</li> </ul>"},{"location":"sem1/math/u2/second/#scalar-multiplication","title":"Scalar Multiplication","text":"<p>Multiplying a matrix by a scalar (a single number) involves multiplying every element of the matrix by that scalar.</p> <p>If \\(A = [a_{ij}]\\) is a matrix of order \\(m \\times n\\) and \\(k\\) is a scalar, then \\(kA\\) is another matrix of the same order, obtained by multiplying each element of \\(A\\) by \\(k\\). So, \\(kA = [ka_{ij}]\\).</p> <ul> <li> <p>Example:     Let \\(A = \\begin{bmatrix} 3 &amp; 1 \\\\ -2 &amp; 0 \\\\ 5 &amp; 4 \\end{bmatrix}\\) and \\(k = -2\\).</p> \\[ -2A = -2 \\begin{bmatrix} 3 &amp; 1 \\\\ -2 &amp; 0 \\\\ 5 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} -2(3) &amp; -2(1) \\\\ -2(-2) &amp; -2(0) \\\\ -2(5) &amp; -2(4) \\end{bmatrix} = \\begin{bmatrix} -6 &amp; -2 \\\\ 4 &amp; 0 \\\\ -10 &amp; -8 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/u2/second/#properties-of-scalar-multiplication","title":"Properties of Scalar Multiplication","text":"<p>If \\(k\\) and \\(l\\) are scalars and \\(A\\) and \\(B\\) are matrices of the same order:</p> <ul> <li>\\(k(A + B) = kA + kB\\)</li> <li>\\((k + l)A = kA + lA\\)</li> </ul>"},{"location":"sem1/math/u2/second/#matrix-multiplication","title":"Matrix Multiplication","text":"<p>The product of two matrices \\(A\\) and \\(B\\), denoted \\(AB\\), is defined only if the number of columns in \\(A\\) is equal to the number of rows in \\(B\\) L.</p> <p>If \\(A\\) is an \\(m \\times n\\) matrix and \\(B\\) is an \\(n \\times p\\) matrix, then their product \\(AB\\) is an \\(m \\times p\\) matrix.</p> <p>[insert image on matrix multiplication rule columns equal rows here]</p> <p>To find the element in the \\(i\\)-th row and \\(j\\)-th column of the product matrix \\(AB\\), you take the dot product of the \\(i\\)-th row of \\(A\\) with the \\(j\\)-th column of \\(B\\).</p> <ul> <li> <p>Example:     Let \\(A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix}\\) (\\(2 \\times 3\\)) and \\(B = \\begin{bmatrix} 7 &amp; 8 \\\\ 9 &amp; 1 \\\\ 2 &amp; 3 \\end{bmatrix}\\) (\\(3 \\times 2\\)). The product \\(AB\\) will be a \\(2 \\times 2\\) matrix.</p> \\[ AB = \\begin{bmatrix} (1\\cdot7 + 2\\cdot9 + 3\\cdot2) &amp; (1\\cdot8 + 2\\cdot1 + 3\\cdot3) \\\\ (4\\cdot7 + 5\\cdot9 + 6\\cdot2) &amp; (4\\cdot8 + 5\\cdot1 + 6\\cdot3) \\end{bmatrix} \\] \\[ AB = \\begin{bmatrix} (7 + 18 + 6) &amp; (8 + 2 + 9) \\\\ (28 + 45 + 12) &amp; (32 + 5 + 18) \\end{bmatrix} = \\begin{bmatrix} 31 &amp; 19 \\\\ 85 &amp; 55 \\end{bmatrix} \\] </li> </ul>"},{"location":"sem1/math/u2/second/#properties-of-matrix-multiplication","title":"Properties of Matrix Multiplication","text":"<ul> <li>Not Commutative (Generally): In most cases, \\(AB \\neq BA\\). In the example above, \\(BA\\) would be a \\(3 \\times 3\\) matrix, which is clearly not equal to the \\(2 \\times 2\\) matrix \\(AB\\).</li> <li>Associative Law: \\((AB)C = A(BC)\\), provided the products are defined.</li> <li>Distributive Law:<ul> <li>\\(A(B+C) = AB + AC\\)</li> <li>\\((A+B)C = AC + BC\\)</li> </ul> </li> <li>Existence of Multiplicative Identity: For every square matrix \\(A\\), there is an identity matrix \\(I\\) of the same order such that \\(AI = IA = A\\).</li> </ul>"},{"location":"sem1/math/u2/second/#elementary-row-and-column-operations","title":"Elementary Row and Column Operations","text":"<p>These are fundamental operations used to manipulate matrices, often for solving systems of linear equations or finding a matrix inverse. There are three types of elementary operations.</p>"},{"location":"sem1/math/u2/second/#1-interchange-swapping","title":"1. Interchange (Swapping)","text":"<p>Any two rows (or columns) of a matrix can be interchanged.</p> <ul> <li>Notation: \\(R_i \\leftrightarrow R_j\\) denotes the interchange of the \\(i\\)-th and \\(j\\)-th rows.</li> </ul>"},{"location":"sem1/math/u2/second/#2-multiplication-scaling","title":"2. Multiplication (Scaling)","text":"<p>The elements of any row (or column) can be multiplied by a non-zero scalar.</p> <ul> <li>Notation: \\(R_i \\to kR_i\\) denotes multiplying the \\(i\\)-th row by the scalar \\(k\\).</li> </ul>"},{"location":"sem1/math/u2/second/#3-addition-combination","title":"3. Addition (Combination)","text":"<p>You can add a scalar multiple of one row (or column) to another row (or column).</p> <ul> <li> <p>Notation: \\(R_i \\to R_i + kR_j\\) denotes adding \\(k\\) times the \\(j\\)-th row to the \\(i\\)-th row.</p> </li> <li> <p>Example of Row Operations:</p> <p>Let \\(A = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}\\).</p> <ul> <li>Applying \\(R_2 \\leftrightarrow R_3\\):</li> </ul> \\[ \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 7 &amp; 8 &amp; 9 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix} \\] <ul> <li> <p>Applying \\(R_2 \\to R_2 - 4R_1\\) to the original matrix \\(A\\):</p> \\[ R_2: \\begin{bmatrix} 4 &amp; 5 &amp; 6 \\end{bmatrix} - 4 \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\end{bmatrix} = \\begin{bmatrix} 4-4 &amp; 5-8 &amp; 6-12 \\end{bmatrix} = \\begin{bmatrix} 0 &amp; -3 &amp; -6 \\end{bmatrix} \\] <p>Resulting matrix:</p> \\[ \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; -3 &amp; -6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix} \\] </li> </ul> </li> </ul> <p>Vector Operations</p> <p>Vectors can be represented as single-row (row vectors) or single-column (column vectors) matrices. Therefore, vector addition, subtraction, and scalar multiplication are simply special cases of the matrix operations defined above.</p>"},{"location":"sem1/math/u2/second/#problem-set","title":"Problem-set","text":"<p>Section A: Matrix Addition, Subtraction &amp; Scalar Multiplication</p> <ol> <li>Given matrices \\(A = \\begin{pmatrix} 2 &amp; 4 \\\\ 3 &amp; 1 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 1 &amp; 0 \\\\ -1 &amp; 5 \\end{pmatrix}\\), find \\(A + B\\).</li> <li>Given matrices \\(P = \\begin{pmatrix} 7 &amp; -2 \\\\ 4 &amp; 5 \\end{pmatrix}\\) and \\(Q = \\begin{pmatrix} 3 &amp; 3 \\\\ 1 &amp; 0 \\end{pmatrix}\\), find \\(P - Q\\).</li> <li>If \\(C = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 1 &amp; -1 \\end{pmatrix}\\), find \\(3C\\).</li> <li>Using matrices \\(A = \\begin{pmatrix} 2 &amp; 4 \\\\ 3 &amp; 1 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 1 &amp; 0 \\\\ -1 &amp; 5 \\end{pmatrix}\\), compute \\(2A - B\\).</li> <li>Verify the commutative property of addition (\\(A+B = B+A\\)) for \\(A = \\begin{pmatrix} 1 &amp; 5 \\\\ 2 &amp; 3 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 0 &amp; -2 \\\\ 3 &amp; -1 \\end{pmatrix}\\).</li> <li>Find matrix \\(X\\) such that \\(2X + A = B\\), where \\(A = \\begin{pmatrix} 4 &amp; 0 \\\\ -2 &amp; 2 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 2 &amp; -2 \\\\ 4 &amp; 6 \\end{pmatrix}\\).</li> <li>If \\(k=4\\), \\(A = \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{pmatrix}\\), and \\(B = \\begin{pmatrix} 0 &amp; 1 \\\\ 1 &amp; 0 \\end{pmatrix}\\), show that \\(k(A+B) = kA + kB\\).</li> <li>Given \\(A = \\begin{pmatrix} 8 &amp; 0 \\\\ 4 &amp; -2 \\\\ 3 &amp; 6 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 2 &amp; -2 \\\\ 4 &amp; 2 \\\\ -5 &amp; 1 \\end{pmatrix}\\), find the matrix \\(X\\) such that \\(2A + 3X = 5B\\).</li> </ol> <p>Section B: Matrix Multiplication</p> <ol> <li>Let \\(A = \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{pmatrix}\\). Calculate \\(AB\\).</li> <li>Using the matrices from Q9, calculate \\(BA\\) and show that \\(AB \\neq BA\\).</li> <li>Let \\(C = \\begin{pmatrix} 1 &amp; 0 &amp; 2 \\\\ -1 &amp; 3 &amp; 1 \\end{pmatrix}\\) and \\(D = \\begin{pmatrix} 3 &amp; 1 \\\\ 2 &amp; 1 \\\\ 1 &amp; 0 \\end{pmatrix}\\). Compute \\(CD\\).</li> <li>Is the product \\(DC\\) defined for the matrices in Q11? If yes, compute it.</li> <li>Given \\(A = \\begin{pmatrix} 1 &amp; 1 \\\\ 0 &amp; 1 \\end{pmatrix}\\), \\(B = \\begin{pmatrix} 2 &amp; 0 \\\\ 3 &amp; 4 \\end{pmatrix}\\), and \\(C = \\begin{pmatrix} 1 &amp; 0 \\\\ 2 &amp; 3 \\end{pmatrix}\\), verify the associative property \\((AB)C = A(BC)\\).</li> <li>Using the matrices from Q13, verify the distributive property \\(A(B+C) = AB + AC\\).</li> <li>If \\(A = \\begin{pmatrix} 3 &amp; -2 \\\\ 4 &amp; -2 \\end{pmatrix}\\), find a scalar \\(k\\) such that \\(A^2 = kA - 2I\\), where \\(I\\) is the \\(2 \\times 2\\) identity matrix.</li> <li>If \\(A = \\begin{pmatrix} 1 &amp; 2 \\\\ 0 &amp; 1 \\end{pmatrix}\\), find \\(A^2\\) and \\(A^3\\).</li> <li>Find two non-zero \\(2 \\times 2\\) matrices \\(A\\) and \\(B\\) such that their product \\(AB\\) is the zero matrix \\(O\\).</li> <li>If \\(f(x) = x^2 - 5x + 6\\), find \\(f(A)\\) where \\(A = \\begin{pmatrix} 2 &amp; 0 &amp; 1 \\\\ 2 &amp; 1 &amp; 3 \\\\ 1 &amp; -1 &amp; 0 \\end{pmatrix}\\).</li> </ol> <p>Section C: Elementary Row and Column Operations</p> <p>For questions 19-24, use the matrix \\(M = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{pmatrix}\\).</p> <ol> <li>Apply the row operation \\(R_1 \\leftrightarrow R_3\\) to matrix \\(M\\).</li> <li>Apply the column operation \\(C_2 \\leftrightarrow C_3\\) to matrix \\(M\\).</li> <li>Apply the row operation \\(R_2 \\to 3R_2\\) to matrix \\(M\\).</li> <li>Apply the column operation \\(C_1 \\to \\frac{1}{2}C_1\\) to matrix \\(M\\).</li> <li>Apply the row operation \\(R_2 \\to R_2 - 4R_1\\) to matrix \\(M\\).</li> <li>Apply the column operation \\(C_3 \\to C_3 - 2C_2\\) to matrix \\(M\\).</li> <li>On matrix \\(A = \\begin{pmatrix} 1 &amp; 1 &amp; 1 \\\\ 2 &amp; 1 &amp; -1 \\\\ 3 &amp; 2 &amp; 0 \\end{pmatrix}\\), perform the operations \\(R_2 \\to R_2 - 2R_1\\) and then \\(R_3 \\to R_3 - 3R_1\\).</li> <li>Transform the matrix \\(B = \\begin{pmatrix} 2 &amp; 4 &amp; 6 \\\\ 1 &amp; 3 &amp; 5 \\\\ 3 &amp; 7 &amp; 11 \\end{pmatrix}\\) by making the element in the first row, first column a '1' using a scaling operation.</li> <li>Using the result from Q26, perform row operations to create zeros below the leading '1' in the first column.</li> <li>A matrix \\(A = \\begin{pmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{pmatrix}\\) is transformed into \\(B = \\begin{pmatrix} 1 &amp; 2 \\\\ 0 &amp; -2 \\end{pmatrix}\\). What elementary row operation was applied?</li> <li>What single elementary row operation will transform the matrix \\(C = \\begin{pmatrix} 1 &amp; 5 &amp; 2 \\\\ 0 &amp; 1 &amp; 7 \\\\ 0 &amp; 0 &amp; 3 \\end{pmatrix}\\) into an upper triangular matrix with only 1s on the diagonal?</li> <li>Given \\(A = \\begin{pmatrix} 1 &amp; 0 \\\\ -1 &amp; 3 \\end{pmatrix}\\), find the matrix obtained by applying \\(R_2 \\to R_2 + R_1\\) followed by \\(C_1 \\to C_1 - C_2\\).</li> </ol>"},{"location":"sem1/math/u2/three/","title":"Matrix Identities and Inverses","text":"<p>In matrix algebra, identity and inverse elements are crucial concepts, similar to their roles in regular arithmetic. They provide a baseline for operations and a way to \"undo\" them.</p>"},{"location":"sem1/math/u2/three/#additive-identity-and-inverse","title":"Additive Identity and Inverse","text":"<p>These concepts are related to matrix addition and subtraction.</p>"},{"location":"sem1/math/u2/three/#additive-identity-zero-matrix","title":"Additive Identity (Zero Matrix)","text":"<p>The additive identity for matrices is the zero matrix (or null matrix), denoted by \\(O\\). This is a matrix of any order where all the elements are zero.</p> <p>Its key property is that when it's added to any matrix \\(A\\) of the same order, it leaves \\(A\\) unchanged.</p> <ul> <li> <p>Property: For any \\(m \\times n\\) matrix \\(A\\), there exists an \\(m \\times n\\) zero matrix \\(O\\) such that:</p> \\[ A + O = O + A = A \\] </li> <li> <p>Example:</p> <p>Let \\(A = \\begin{bmatrix} 2 &amp; -1 \\\\ 5 &amp; 0 \\end{bmatrix}\\) and \\(O = \\begin{bmatrix} 0 &amp; 0 \\\\ 0 &amp; 0 \\end{bmatrix}\\).</p> \\[ A + O = \\begin{bmatrix} 2+0 &amp; -1+0 \\\\ 5+0 &amp; 0+0 \\end{bmatrix} = \\begin{bmatrix} 2 &amp; -1 \\\\ 5 &amp; 0 \\end{bmatrix} = A \\] </li> </ul>"},{"location":"sem1/math/u2/three/#additive-inverse","title":"Additive Inverse","text":"<p>For any matrix \\(A\\), its additive inverse is the matrix \\(-A\\), which is obtained by negating every element of \\(A\\).</p> <p>When a matrix is added to its additive inverse, the result is the zero matrix \\(O\\).</p> <ul> <li> <p>Property: For any matrix \\(A\\), there exists an additive inverse \\(-A\\) such that:</p> \\[ A + (-A) = (-A) + A = O \\] </li> <li> <p>Example:</p> <p>Let \\(A = \\begin{bmatrix} 3 &amp; -7 \\\\ -1 &amp; 4 \\end{bmatrix}\\). Its additive inverse is \\(-A = \\begin{bmatrix} -3 &amp; 7 \\\\ 1 &amp; -4 \\end{bmatrix}\\).</p> \\[ A + (-A) = \\begin{bmatrix} 3+(-3) &amp; -7+7 \\\\ -1+1 &amp; 4+(-4) \\end{bmatrix} = \\begin{bmatrix} 0 &amp; 0 \\\\ 0 &amp; 0 \\end{bmatrix} = O \\] </li> </ul>"},{"location":"sem1/math/u2/three/#multiplicative-identity-and-inverse","title":"Multiplicative Identity and Inverse","text":"<p>These concepts are related to matrix multiplication and are defined only for square matrices.</p>"},{"location":"sem1/math/u2/three/#multiplicative-identity-identity-matrix","title":"Multiplicative Identity (Identity Matrix)","text":"<p>The multiplicative identity for square matrices of order \\(n\\) is the identity matrix \\(I_n\\) (or simply \\(I\\)). This is a square matrix with 1s on the main diagonal and 0s everywhere else.</p> <p>When any square matrix \\(A\\) is multiplied by the identity matrix \\(I\\) of the same order, it leaves \\(A\\) unchanged.</p> <ul> <li> <p>Property: For any square matrix \\(A\\) of order \\(n\\),</p> \\[ A \\cdot I = I \\cdot A = A \\] </li> <li> <p>Example:     Let \\(A = \\begin{bmatrix} 3 &amp; 5 \\\\ 1 &amp; 2 \\end{bmatrix}\\) and \\(I = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix}\\).</p> \\[ A \\cdot I = \\begin{bmatrix} 3 &amp; 5 \\\\ 1 &amp; 2 \\end{bmatrix} \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} = \\begin{bmatrix} (3\\cdot1+5\\cdot0) &amp; (3\\cdot0+5\\cdot1) \\\\ (1\\cdot1+2\\cdot0) &amp; (1\\cdot0+2\\cdot1) \\end{bmatrix} = \\begin{bmatrix} 3 &amp; 5 \\\\ 1 &amp; 2 \\end{bmatrix} = A \\] </li> </ul>"},{"location":"sem1/math/u2/three/#multiplicative-inverse","title":"Multiplicative Inverse","text":"<p>The multiplicative inverse of a square matrix \\(A\\), denoted by \\(A^{-1}\\), is a matrix such that when multiplied by \\(A\\), the result is the identity matrix \\(I\\).</p> <ul> <li> <p>Property: For a square matrix \\(A\\), its inverse \\(A^{-1}\\) satisfies:</p> \\[ A \\cdot A^{-1} = A^{-1} \\cdot A = I \\] </li> </ul> <p>Existence of an Inverse</p> <p>Not every square matrix has a multiplicative inverse. An inverse exists if and only if the matrix is non-singular, which means its determinant is non-zero (\\(\\det(A) \\neq 0\\)).</p> <ul> <li>If \\(\\det(A) \\neq 0\\), the matrix is invertible or non-singular.</li> <li>If \\(\\det(A) = 0\\), the matrix is non-invertible or singular.</li> </ul> <ul> <li> <p>Example:     Let \\(A = \\begin{bmatrix} 2 &amp; 5 \\\\ 1 &amp; 3 \\end{bmatrix}\\). Its determinant is \\(\\det(A) = (2)(3) - (5)(1) = 6 - 5 = 1 \\neq 0\\), so it has an inverse.     The inverse is \\(A^{-1} = \\begin{bmatrix} 3 &amp; -5 \\\\ -1 &amp; 2 \\end{bmatrix}\\).</p> <p>Let's verify:</p> \\[ A \\cdot A^{-1} = \\begin{bmatrix} 2 &amp; 5 \\\\ 1 &amp; 3 \\end{bmatrix} \\begin{bmatrix} 3 &amp; -5 \\\\ -1 &amp; 2 \\end{bmatrix} = \\begin{bmatrix} (6-5) &amp; (-10+10) \\\\ (3-3) &amp; (-5+6) \\end{bmatrix} = \\begin{bmatrix} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{bmatrix} = I \\] </li> </ul>"},{"location":"sem1/math/u2/three/#problem-set","title":"Problem Set","text":""},{"location":"sem1/math/u2/three/#section-1-additive-identity-and-inverse","title":"Section 1: Additive Identity and Inverse","text":"<ol> <li>Find the additive inverse of the matrix \\( A = \\begin{pmatrix} 2 &amp; -5 \\\\ 1 &amp; 0 \\end{pmatrix} \\).</li> <li>What is the additive inverse of \\( B = \\begin{pmatrix} 1 &amp; -3 &amp; 2 \\\\ 4 &amp; 0 &amp; -5 \\end{pmatrix} \\)?</li> <li>Let \\( C = \\begin{pmatrix} \\sqrt{3} &amp; 1 &amp; -1 \\\\ 2 &amp; 3 &amp; 0 \\end{pmatrix} \\). Find a matrix \\(X\\) such that \\(C + X\\) is a zero matrix.</li> <li>What is the additive identity for the set of all matrices of order \\(3 \\times 4\\)?</li> <li>If \\( A + B = O \\), where \\(A\\) and \\(B\\) are \\(2 \\times 2\\) matrices and \\(O\\) is the zero matrix, what is the relationship between \\(A\\) and \\(B\\)?</li> <li>Given \\( A = \\begin{pmatrix} 8 &amp; 3 \\\\ -1 &amp; 5 \\end{pmatrix} \\). Verify that \\( A + (-A) = O \\).</li> <li>Find the matrix \\(P\\) if \\( -P \\) is the matrix \\( \\begin{pmatrix} -9 &amp; 2 \\\\ 6 &amp; -1 \\end{pmatrix} \\).</li> <li>If \\(A\\) is a matrix of order \\(m \\times n\\), what is the order of its additive inverse?</li> <li>Simplify the expression: \\( (A + B) + (-A) \\) assuming matrices are of the same order.</li> <li>Does every matrix have a unique additive inverse? Explain in one sentence.</li> </ol>"},{"location":"sem1/math/u2/three/#section-2-multiplicative-identity-and-inverse","title":"Section 2: Multiplicative Identity and Inverse","text":"<ol> <li>What is the multiplicative identity for the set of all square matrices of order 3? Write the matrix.</li> <li>Given the matrix \\( A = \\begin{pmatrix} 3 &amp; 1 \\\\ -1 &amp; 2 \\end{pmatrix} \\). Show that \\( AI = IA = A \\), where \\(I\\) is the identity matrix of order 2.</li> <li>If \\( B = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 3 &amp; 4 \\\\ 3 &amp; 4 &amp; 5 \\end{pmatrix} \\), verify that \\(BI = B\\).</li> <li>A matrix \\(A\\) has a multiplicative inverse. What can you say about the determinant of \\(A\\)?</li> <li>If \\(A\\) is an invertible matrix, prove that \\( (A^T)^{-1} = (A^{-1})^T \\).</li> <li>Find the inverse of the matrix \\( A = \\begin{pmatrix} 2 &amp; -3 \\\\ -1 &amp; 2 \\end{pmatrix} \\).</li> <li>Find the inverse of \\( B = \\begin{pmatrix} 4 &amp; 5 \\\\ 2 &amp; 3 \\end{pmatrix} \\).</li> <li>For what value of \\(x\\) is the matrix \\( C = \\begin{pmatrix} 6 &amp; x \\\\ 4 &amp; 2 \\end{pmatrix} \\) singular (i.e., does not have an inverse)?</li> <li>Find the inverse of the matrix \\( D = \\begin{pmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 2 &amp; 4 \\\\ 0 &amp; 0 &amp; 5 \\end{pmatrix} \\).</li> <li>Find the inverse of \\( E = \\begin{pmatrix} 2 &amp; 1 &amp; 3 \\\\ 4 &amp; -1 &amp; 0 \\\\ -7 &amp; 2 &amp; 1 \\end{pmatrix} \\).</li> <li>Given \\( A = \\begin{pmatrix} 3 &amp; 7 \\\\ 2 &amp; 5 \\end{pmatrix} \\). Find \\(A^{-1}\\) and verify that \\( AA^{-1} = I \\).</li> <li>Given \\( A = \\begin{pmatrix} 2 &amp; 3 \\\\ 1 &amp; 2 \\end{pmatrix} \\) and \\( B = \\begin{pmatrix} 1 &amp; -2 \\\\ -1 &amp; 3 \\end{pmatrix} \\). Compute \\((AB)^{-1}\\).</li> <li>Using the matrices from the previous question, compute \\(B^{-1}A^{-1}\\) and show that \\( (AB)^{-1} = B^{-1}A^{-1} \\).</li> <li>If \\( A = \\begin{pmatrix} 3 &amp; 1 \\\\ -1 &amp; 2 \\end{pmatrix} \\), show that \\( A^2 - 5A + 7I = O \\). Hence, find \\( A^{-1} \\).</li> <li>True or False: The inverse of a diagonal matrix (with non-zero diagonal elements) is a diagonal matrix.</li> <li>Find the inverse of the matrix \\( F = \\begin{pmatrix} \\cos\\theta &amp; \\sin\\theta \\\\ -\\sin\\theta &amp; \\cos\\theta \\end{pmatrix} \\).</li> <li>If \\(A\\) is an invertible matrix of order 3 and \\(|A| = 4\\), find \\(|\\text{adj}(A)|\\).</li> <li>Solve the matrix equation for \\(X\\): \\( \\begin{pmatrix} 5 &amp; 4 \\\\ 1 &amp; 1 \\end{pmatrix} X = \\begin{pmatrix} 1 &amp; -2 \\\\ 3 &amp; -1 \\end{pmatrix} \\).</li> <li>If \\(A\\) is a non-singular square matrix, prove that \\( |\\text{adj}(A)| = |A|^{n-1} \\), where \\(n\\) is the order of the matrix.</li> <li>If \\(A\\), \\(B\\), and \\(C\\) are invertible matrices of the same order, what is \\( (ABC)^{-1} \\)?</li> </ol>"}]}